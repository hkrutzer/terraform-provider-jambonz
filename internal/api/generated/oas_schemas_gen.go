// Code generated by ogen, DO NOT EDIT.

package api

import (
	"io"
	"time"

	"github.com/go-faster/errors"
	"github.com/google/uuid"
)

// Ref: #/components/schemas/Account
type Account struct {
	AccountSid                  uuid.UUID                     `json:"account_sid"`
	Name                        string                        `json:"name"`
	SipRealm                    OptNilString                  `json:"sip_realm"`
	RegistrationHook            OptNilAccountRegistrationHook `json:"registration_hook"`
	DeviceCallingApplicationSid OptNilUUID                    `json:"device_calling_application_sid"`
	ServiceProviderSid          uuid.UUID                     `json:"service_provider_sid"`
}

// GetAccountSid returns the value of AccountSid.
func (s *Account) GetAccountSid() uuid.UUID {
	return s.AccountSid
}

// GetName returns the value of Name.
func (s *Account) GetName() string {
	return s.Name
}

// GetSipRealm returns the value of SipRealm.
func (s *Account) GetSipRealm() OptNilString {
	return s.SipRealm
}

// GetRegistrationHook returns the value of RegistrationHook.
func (s *Account) GetRegistrationHook() OptNilAccountRegistrationHook {
	return s.RegistrationHook
}

// GetDeviceCallingApplicationSid returns the value of DeviceCallingApplicationSid.
func (s *Account) GetDeviceCallingApplicationSid() OptNilUUID {
	return s.DeviceCallingApplicationSid
}

// GetServiceProviderSid returns the value of ServiceProviderSid.
func (s *Account) GetServiceProviderSid() uuid.UUID {
	return s.ServiceProviderSid
}

// SetAccountSid sets the value of AccountSid.
func (s *Account) SetAccountSid(val uuid.UUID) {
	s.AccountSid = val
}

// SetName sets the value of Name.
func (s *Account) SetName(val string) {
	s.Name = val
}

// SetSipRealm sets the value of SipRealm.
func (s *Account) SetSipRealm(val OptNilString) {
	s.SipRealm = val
}

// SetRegistrationHook sets the value of RegistrationHook.
func (s *Account) SetRegistrationHook(val OptNilAccountRegistrationHook) {
	s.RegistrationHook = val
}

// SetDeviceCallingApplicationSid sets the value of DeviceCallingApplicationSid.
func (s *Account) SetDeviceCallingApplicationSid(val OptNilUUID) {
	s.DeviceCallingApplicationSid = val
}

// SetServiceProviderSid sets the value of ServiceProviderSid.
func (s *Account) SetServiceProviderSid(val uuid.UUID) {
	s.ServiceProviderSid = val
}

func (*Account) getAccountRes() {}

type AccountRegistrationHook struct {
	WebhookSid OptUUID                       `json:"webhook_sid"`
	URL        string                        `json:"url"`
	Method     AccountRegistrationHookMethod `json:"method"`
	Username   NilString                     `json:"username"`
	Password   NilString                     `json:"password"`
}

// GetWebhookSid returns the value of WebhookSid.
func (s *AccountRegistrationHook) GetWebhookSid() OptUUID {
	return s.WebhookSid
}

// GetURL returns the value of URL.
func (s *AccountRegistrationHook) GetURL() string {
	return s.URL
}

// GetMethod returns the value of Method.
func (s *AccountRegistrationHook) GetMethod() AccountRegistrationHookMethod {
	return s.Method
}

// GetUsername returns the value of Username.
func (s *AccountRegistrationHook) GetUsername() NilString {
	return s.Username
}

// GetPassword returns the value of Password.
func (s *AccountRegistrationHook) GetPassword() NilString {
	return s.Password
}

// SetWebhookSid sets the value of WebhookSid.
func (s *AccountRegistrationHook) SetWebhookSid(val OptUUID) {
	s.WebhookSid = val
}

// SetURL sets the value of URL.
func (s *AccountRegistrationHook) SetURL(val string) {
	s.URL = val
}

// SetMethod sets the value of Method.
func (s *AccountRegistrationHook) SetMethod(val AccountRegistrationHookMethod) {
	s.Method = val
}

// SetUsername sets the value of Username.
func (s *AccountRegistrationHook) SetUsername(val NilString) {
	s.Username = val
}

// SetPassword sets the value of Password.
func (s *AccountRegistrationHook) SetPassword(val NilString) {
	s.Password = val
}

type AccountRegistrationHookMethod string

const (
	AccountRegistrationHookMethodGET  AccountRegistrationHookMethod = "GET"
	AccountRegistrationHookMethodPOST AccountRegistrationHookMethod = "POST"
)

// AllValues returns all AccountRegistrationHookMethod values.
func (AccountRegistrationHookMethod) AllValues() []AccountRegistrationHookMethod {
	return []AccountRegistrationHookMethod{
		AccountRegistrationHookMethodGET,
		AccountRegistrationHookMethodPOST,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AccountRegistrationHookMethod) MarshalText() ([]byte, error) {
	switch s {
	case AccountRegistrationHookMethodGET:
		return []byte(s), nil
	case AccountRegistrationHookMethodPOST:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AccountRegistrationHookMethod) UnmarshalText(data []byte) error {
	switch AccountRegistrationHookMethod(data) {
	case AccountRegistrationHookMethodGET:
		*s = AccountRegistrationHookMethodGET
		return nil
	case AccountRegistrationHookMethodPOST:
		*s = AccountRegistrationHookMethodPOST
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// AddLimitForAccountNotFound is response for AddLimitForAccount operation.
type AddLimitForAccountNotFound struct{}

func (*AddLimitForAccountNotFound) addLimitForAccountRes() {}

// AddLimitForServiceProviderNotFound is response for AddLimitForServiceProvider operation.
type AddLimitForServiceProviderNotFound struct{}

func (*AddLimitForServiceProviderNotFound) addLimitForServiceProviderRes() {}

// AddSpeechCredentialForSeerviceProviderNotFound is response for AddSpeechCredentialForSeerviceProvider operation.
type AddSpeechCredentialForSeerviceProviderNotFound struct{}

func (*AddSpeechCredentialForSeerviceProviderNotFound) addSpeechCredentialForSeerviceProviderRes() {}

// Ref: #/components/schemas/ApiKey
type ApiKey struct {
	APIKeySid          uuid.UUID   `json:"api_key_sid"`
	Token              uuid.UUID   `json:"token"`
	AccountSid         OptUUID     `json:"account_sid"`
	ServiceProviderSid OptUUID     `json:"service_provider_sid"`
	ExpiresAt          OptDateTime `json:"expires_at"`
	CreatedAt          OptDateTime `json:"created_at"`
	LastUsed           OptDateTime `json:"last_used"`
}

// GetAPIKeySid returns the value of APIKeySid.
func (s *ApiKey) GetAPIKeySid() uuid.UUID {
	return s.APIKeySid
}

// GetToken returns the value of Token.
func (s *ApiKey) GetToken() uuid.UUID {
	return s.Token
}

// GetAccountSid returns the value of AccountSid.
func (s *ApiKey) GetAccountSid() OptUUID {
	return s.AccountSid
}

// GetServiceProviderSid returns the value of ServiceProviderSid.
func (s *ApiKey) GetServiceProviderSid() OptUUID {
	return s.ServiceProviderSid
}

// GetExpiresAt returns the value of ExpiresAt.
func (s *ApiKey) GetExpiresAt() OptDateTime {
	return s.ExpiresAt
}

// GetCreatedAt returns the value of CreatedAt.
func (s *ApiKey) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetLastUsed returns the value of LastUsed.
func (s *ApiKey) GetLastUsed() OptDateTime {
	return s.LastUsed
}

// SetAPIKeySid sets the value of APIKeySid.
func (s *ApiKey) SetAPIKeySid(val uuid.UUID) {
	s.APIKeySid = val
}

// SetToken sets the value of Token.
func (s *ApiKey) SetToken(val uuid.UUID) {
	s.Token = val
}

// SetAccountSid sets the value of AccountSid.
func (s *ApiKey) SetAccountSid(val OptUUID) {
	s.AccountSid = val
}

// SetServiceProviderSid sets the value of ServiceProviderSid.
func (s *ApiKey) SetServiceProviderSid(val OptUUID) {
	s.ServiceProviderSid = val
}

// SetExpiresAt sets the value of ExpiresAt.
func (s *ApiKey) SetExpiresAt(val OptDateTime) {
	s.ExpiresAt = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *ApiKey) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetLastUsed sets the value of LastUsed.
func (s *ApiKey) SetLastUsed(val OptDateTime) {
	s.LastUsed = val
}

// Ref: #/components/schemas/Application
type Application struct {
	ApplicationSid uuid.UUID `json:"application_sid"`
	Name           string    `json:"name"`
	AccountSid     uuid.UUID `json:"account_sid"`
	// Application webhook for inbound voice calls.
	CallHook Webhook `json:"call_hook"`
	// Webhook for reporting call status events.
	CallStatusHook Webhook `json:"call_status_hook"`
	// Application webhook for inbound SMS/MMS.
	MessagingHook  Webhook                   `json:"messaging_hook"`
	RecordAllCalls ApplicationRecordAllCalls `json:"record_all_calls"`
}

// GetApplicationSid returns the value of ApplicationSid.
func (s *Application) GetApplicationSid() uuid.UUID {
	return s.ApplicationSid
}

// GetName returns the value of Name.
func (s *Application) GetName() string {
	return s.Name
}

// GetAccountSid returns the value of AccountSid.
func (s *Application) GetAccountSid() uuid.UUID {
	return s.AccountSid
}

// GetCallHook returns the value of CallHook.
func (s *Application) GetCallHook() Webhook {
	return s.CallHook
}

// GetCallStatusHook returns the value of CallStatusHook.
func (s *Application) GetCallStatusHook() Webhook {
	return s.CallStatusHook
}

// GetMessagingHook returns the value of MessagingHook.
func (s *Application) GetMessagingHook() Webhook {
	return s.MessagingHook
}

// GetRecordAllCalls returns the value of RecordAllCalls.
func (s *Application) GetRecordAllCalls() ApplicationRecordAllCalls {
	return s.RecordAllCalls
}

// SetApplicationSid sets the value of ApplicationSid.
func (s *Application) SetApplicationSid(val uuid.UUID) {
	s.ApplicationSid = val
}

// SetName sets the value of Name.
func (s *Application) SetName(val string) {
	s.Name = val
}

// SetAccountSid sets the value of AccountSid.
func (s *Application) SetAccountSid(val uuid.UUID) {
	s.AccountSid = val
}

// SetCallHook sets the value of CallHook.
func (s *Application) SetCallHook(val Webhook) {
	s.CallHook = val
}

// SetCallStatusHook sets the value of CallStatusHook.
func (s *Application) SetCallStatusHook(val Webhook) {
	s.CallStatusHook = val
}

// SetMessagingHook sets the value of MessagingHook.
func (s *Application) SetMessagingHook(val Webhook) {
	s.MessagingHook = val
}

// SetRecordAllCalls sets the value of RecordAllCalls.
func (s *Application) SetRecordAllCalls(val ApplicationRecordAllCalls) {
	s.RecordAllCalls = val
}

func (*Application) getApplicationRes() {}

type ApplicationRecordAllCalls int

const (
	ApplicationRecordAllCalls0 ApplicationRecordAllCalls = 0
	ApplicationRecordAllCalls1 ApplicationRecordAllCalls = 1
)

// AllValues returns all ApplicationRecordAllCalls values.
func (ApplicationRecordAllCalls) AllValues() []ApplicationRecordAllCalls {
	return []ApplicationRecordAllCalls{
		ApplicationRecordAllCalls0,
		ApplicationRecordAllCalls1,
	}
}

type BearerAuth struct {
	Token string
}

// GetToken returns the value of Token.
func (s *BearerAuth) GetToken() string {
	return s.Token
}

// SetToken sets the value of Token.
func (s *BearerAuth) SetToken(val string) {
	s.Token = val
}

// Ref: #/components/schemas/Call
type Call struct {
	AccountSid              uuid.UUID      `json:"account_sid"`
	ApplicationSid          OptUUID        `json:"application_sid"`
	CallID                  string         `json:"call_id"`
	CallSid                 uuid.UUID      `json:"call_sid"`
	CallStatus              CallCallStatus `json:"call_status"`
	CallerName              OptString      `json:"caller_name"`
	Direction               CallDirection  `json:"direction"`
	Duration                OptInt         `json:"duration"`
	From                    string         `json:"from"`
	OriginatingSipTrunkName OptString      `json:"originating_sip_trunk_name"`
	ParentCallSid           OptUUID        `json:"parent_call_sid"`
	ServiceURL              string         `json:"service_url"`
	SipStatus               int            `json:"sip_status"`
	To                      string         `json:"to"`
}

// GetAccountSid returns the value of AccountSid.
func (s *Call) GetAccountSid() uuid.UUID {
	return s.AccountSid
}

// GetApplicationSid returns the value of ApplicationSid.
func (s *Call) GetApplicationSid() OptUUID {
	return s.ApplicationSid
}

// GetCallID returns the value of CallID.
func (s *Call) GetCallID() string {
	return s.CallID
}

// GetCallSid returns the value of CallSid.
func (s *Call) GetCallSid() uuid.UUID {
	return s.CallSid
}

// GetCallStatus returns the value of CallStatus.
func (s *Call) GetCallStatus() CallCallStatus {
	return s.CallStatus
}

// GetCallerName returns the value of CallerName.
func (s *Call) GetCallerName() OptString {
	return s.CallerName
}

// GetDirection returns the value of Direction.
func (s *Call) GetDirection() CallDirection {
	return s.Direction
}

// GetDuration returns the value of Duration.
func (s *Call) GetDuration() OptInt {
	return s.Duration
}

// GetFrom returns the value of From.
func (s *Call) GetFrom() string {
	return s.From
}

// GetOriginatingSipTrunkName returns the value of OriginatingSipTrunkName.
func (s *Call) GetOriginatingSipTrunkName() OptString {
	return s.OriginatingSipTrunkName
}

// GetParentCallSid returns the value of ParentCallSid.
func (s *Call) GetParentCallSid() OptUUID {
	return s.ParentCallSid
}

// GetServiceURL returns the value of ServiceURL.
func (s *Call) GetServiceURL() string {
	return s.ServiceURL
}

// GetSipStatus returns the value of SipStatus.
func (s *Call) GetSipStatus() int {
	return s.SipStatus
}

// GetTo returns the value of To.
func (s *Call) GetTo() string {
	return s.To
}

// SetAccountSid sets the value of AccountSid.
func (s *Call) SetAccountSid(val uuid.UUID) {
	s.AccountSid = val
}

// SetApplicationSid sets the value of ApplicationSid.
func (s *Call) SetApplicationSid(val OptUUID) {
	s.ApplicationSid = val
}

// SetCallID sets the value of CallID.
func (s *Call) SetCallID(val string) {
	s.CallID = val
}

// SetCallSid sets the value of CallSid.
func (s *Call) SetCallSid(val uuid.UUID) {
	s.CallSid = val
}

// SetCallStatus sets the value of CallStatus.
func (s *Call) SetCallStatus(val CallCallStatus) {
	s.CallStatus = val
}

// SetCallerName sets the value of CallerName.
func (s *Call) SetCallerName(val OptString) {
	s.CallerName = val
}

// SetDirection sets the value of Direction.
func (s *Call) SetDirection(val CallDirection) {
	s.Direction = val
}

// SetDuration sets the value of Duration.
func (s *Call) SetDuration(val OptInt) {
	s.Duration = val
}

// SetFrom sets the value of From.
func (s *Call) SetFrom(val string) {
	s.From = val
}

// SetOriginatingSipTrunkName sets the value of OriginatingSipTrunkName.
func (s *Call) SetOriginatingSipTrunkName(val OptString) {
	s.OriginatingSipTrunkName = val
}

// SetParentCallSid sets the value of ParentCallSid.
func (s *Call) SetParentCallSid(val OptUUID) {
	s.ParentCallSid = val
}

// SetServiceURL sets the value of ServiceURL.
func (s *Call) SetServiceURL(val string) {
	s.ServiceURL = val
}

// SetSipStatus sets the value of SipStatus.
func (s *Call) SetSipStatus(val int) {
	s.SipStatus = val
}

// SetTo sets the value of To.
func (s *Call) SetTo(val string) {
	s.To = val
}

func (*Call) getCallRes() {}

type CallCallStatus string

const (
	CallCallStatusTrying     CallCallStatus = "trying"
	CallCallStatusRinging    CallCallStatus = "ringing"
	CallCallStatusAlerting   CallCallStatus = "alerting"
	CallCallStatusInProgress CallCallStatus = "in-progress"
	CallCallStatusCompleted  CallCallStatus = "completed"
	CallCallStatusBusy       CallCallStatus = "busy"
	CallCallStatusNoAnswer   CallCallStatus = "no-answer"
	CallCallStatusFailed     CallCallStatus = "failed"
	CallCallStatusQueued     CallCallStatus = "queued"
)

// AllValues returns all CallCallStatus values.
func (CallCallStatus) AllValues() []CallCallStatus {
	return []CallCallStatus{
		CallCallStatusTrying,
		CallCallStatusRinging,
		CallCallStatusAlerting,
		CallCallStatusInProgress,
		CallCallStatusCompleted,
		CallCallStatusBusy,
		CallCallStatusNoAnswer,
		CallCallStatusFailed,
		CallCallStatusQueued,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CallCallStatus) MarshalText() ([]byte, error) {
	switch s {
	case CallCallStatusTrying:
		return []byte(s), nil
	case CallCallStatusRinging:
		return []byte(s), nil
	case CallCallStatusAlerting:
		return []byte(s), nil
	case CallCallStatusInProgress:
		return []byte(s), nil
	case CallCallStatusCompleted:
		return []byte(s), nil
	case CallCallStatusBusy:
		return []byte(s), nil
	case CallCallStatusNoAnswer:
		return []byte(s), nil
	case CallCallStatusFailed:
		return []byte(s), nil
	case CallCallStatusQueued:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CallCallStatus) UnmarshalText(data []byte) error {
	switch CallCallStatus(data) {
	case CallCallStatusTrying:
		*s = CallCallStatusTrying
		return nil
	case CallCallStatusRinging:
		*s = CallCallStatusRinging
		return nil
	case CallCallStatusAlerting:
		*s = CallCallStatusAlerting
		return nil
	case CallCallStatusInProgress:
		*s = CallCallStatusInProgress
		return nil
	case CallCallStatusCompleted:
		*s = CallCallStatusCompleted
		return nil
	case CallCallStatusBusy:
		*s = CallCallStatusBusy
		return nil
	case CallCallStatusNoAnswer:
		*s = CallCallStatusNoAnswer
		return nil
	case CallCallStatusFailed:
		*s = CallCallStatusFailed
		return nil
	case CallCallStatusQueued:
		*s = CallCallStatusQueued
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CallDirection string

const (
	CallDirectionInbound  CallDirection = "inbound"
	CallDirectionOutbound CallDirection = "outbound"
)

// AllValues returns all CallDirection values.
func (CallDirection) AllValues() []CallDirection {
	return []CallDirection{
		CallDirectionInbound,
		CallDirectionOutbound,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CallDirection) MarshalText() ([]byte, error) {
	switch s {
	case CallDirectionInbound:
		return []byte(s), nil
	case CallDirectionOutbound:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CallDirection) UnmarshalText(data []byte) error {
	switch CallDirection(data) {
	case CallDirectionInbound:
		*s = CallDirectionInbound
		return nil
	case CallDirectionOutbound:
		*s = CallDirectionOutbound
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ChangePasswordBadRequest GeneralError

func (*ChangePasswordBadRequest) changePasswordRes() {}

type ChangePasswordInternalServerError GeneralError

func (*ChangePasswordInternalServerError) changePasswordRes() {}

// ChangePasswordNoContent is response for ChangePassword operation.
type ChangePasswordNoContent struct{}

func (*ChangePasswordNoContent) changePasswordRes() {}

type ChangePasswordReq struct {
	OldPassword OptString `json:"old_password"`
	NewPassword OptString `json:"new_password"`
}

// GetOldPassword returns the value of OldPassword.
func (s *ChangePasswordReq) GetOldPassword() OptString {
	return s.OldPassword
}

// GetNewPassword returns the value of NewPassword.
func (s *ChangePasswordReq) GetNewPassword() OptString {
	return s.NewPassword
}

// SetOldPassword sets the value of OldPassword.
func (s *ChangePasswordReq) SetOldPassword(val OptString) {
	s.OldPassword = val
}

// SetNewPassword sets the value of NewPassword.
func (s *ChangePasswordReq) SetNewPassword(val OptString) {
	s.NewPassword = val
}

type CheckAvailabilityOK struct {
	// True if value requested is available.
	Available bool `json:"available"`
}

// GetAvailable returns the value of Available.
func (s *CheckAvailabilityOK) GetAvailable() bool {
	return s.Available
}

// SetAvailable sets the value of Available.
func (s *CheckAvailabilityOK) SetAvailable(val bool) {
	s.Available = val
}

func (*CheckAvailabilityOK) checkAvailabilityRes() {}

type CheckAvailabilityType string

const (
	CheckAvailabilityTypeEmail     CheckAvailabilityType = "email"
	CheckAvailabilityTypePhone     CheckAvailabilityType = "phone"
	CheckAvailabilityTypeSubdomain CheckAvailabilityType = "subdomain"
)

// AllValues returns all CheckAvailabilityType values.
func (CheckAvailabilityType) AllValues() []CheckAvailabilityType {
	return []CheckAvailabilityType{
		CheckAvailabilityTypeEmail,
		CheckAvailabilityTypePhone,
		CheckAvailabilityTypeSubdomain,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CheckAvailabilityType) MarshalText() ([]byte, error) {
	switch s {
	case CheckAvailabilityTypeEmail:
		return []byte(s), nil
	case CheckAvailabilityTypePhone:
		return []byte(s), nil
	case CheckAvailabilityTypeSubdomain:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CheckAvailabilityType) UnmarshalText(data []byte) error {
	switch CheckAvailabilityType(data) {
	case CheckAvailabilityTypeEmail:
		*s = CheckAvailabilityTypeEmail
		return nil
	case CheckAvailabilityTypePhone:
		*s = CheckAvailabilityTypePhone
		return nil
	case CheckAvailabilityTypeSubdomain:
		*s = CheckAvailabilityTypeSubdomain
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CreateAccountBadRequest GeneralError

func (*CreateAccountBadRequest) createAccountRes() {}

type CreateAccountInternalServerError GeneralError

func (*CreateAccountInternalServerError) createAccountRes() {}

type CreateAccountReq struct {
	// Account name.
	Name string `json:"name"`
	// Sip realm for registration.
	SipRealm OptString `json:"sip_realm"`
	// Authentication webhook for registration.
	RegistrationHook OptWebhook `json:"registration_hook"`
	// Webhook called when members join or leave a queue.
	QueueEventHook     OptWebhook `json:"queue_event_hook"`
	ServiceProviderSid uuid.UUID  `json:"service_provider_sid"`
}

// GetName returns the value of Name.
func (s *CreateAccountReq) GetName() string {
	return s.Name
}

// GetSipRealm returns the value of SipRealm.
func (s *CreateAccountReq) GetSipRealm() OptString {
	return s.SipRealm
}

// GetRegistrationHook returns the value of RegistrationHook.
func (s *CreateAccountReq) GetRegistrationHook() OptWebhook {
	return s.RegistrationHook
}

// GetQueueEventHook returns the value of QueueEventHook.
func (s *CreateAccountReq) GetQueueEventHook() OptWebhook {
	return s.QueueEventHook
}

// GetServiceProviderSid returns the value of ServiceProviderSid.
func (s *CreateAccountReq) GetServiceProviderSid() uuid.UUID {
	return s.ServiceProviderSid
}

// SetName sets the value of Name.
func (s *CreateAccountReq) SetName(val string) {
	s.Name = val
}

// SetSipRealm sets the value of SipRealm.
func (s *CreateAccountReq) SetSipRealm(val OptString) {
	s.SipRealm = val
}

// SetRegistrationHook sets the value of RegistrationHook.
func (s *CreateAccountReq) SetRegistrationHook(val OptWebhook) {
	s.RegistrationHook = val
}

// SetQueueEventHook sets the value of QueueEventHook.
func (s *CreateAccountReq) SetQueueEventHook(val OptWebhook) {
	s.QueueEventHook = val
}

// SetServiceProviderSid sets the value of ServiceProviderSid.
func (s *CreateAccountReq) SetServiceProviderSid(val uuid.UUID) {
	s.ServiceProviderSid = val
}

type CreateAccountUnprocessableEntity GeneralError

func (*CreateAccountUnprocessableEntity) createAccountRes() {}

type CreateApikeyBadRequest GeneralError

func (*CreateApikeyBadRequest) createApikeyRes() {}

type CreateApikeyInternalServerError GeneralError

func (*CreateApikeyInternalServerError) createApikeyRes() {}

type CreateApikeyReq struct {
	// Service provider scope for the generated api key.
	ServiceProviderSid OptString `json:"service_provider_sid"`
	// Account scope for the generated api key.
	AccountSid OptString `json:"account_sid"`
	// Duration of key validity, in seconds.
	ExpirySecs OptFloat64 `json:"expiry_secs"`
}

// GetServiceProviderSid returns the value of ServiceProviderSid.
func (s *CreateApikeyReq) GetServiceProviderSid() OptString {
	return s.ServiceProviderSid
}

// GetAccountSid returns the value of AccountSid.
func (s *CreateApikeyReq) GetAccountSid() OptString {
	return s.AccountSid
}

// GetExpirySecs returns the value of ExpirySecs.
func (s *CreateApikeyReq) GetExpirySecs() OptFloat64 {
	return s.ExpirySecs
}

// SetServiceProviderSid sets the value of ServiceProviderSid.
func (s *CreateApikeyReq) SetServiceProviderSid(val OptString) {
	s.ServiceProviderSid = val
}

// SetAccountSid sets the value of AccountSid.
func (s *CreateApikeyReq) SetAccountSid(val OptString) {
	s.AccountSid = val
}

// SetExpirySecs sets the value of ExpirySecs.
func (s *CreateApikeyReq) SetExpirySecs(val OptFloat64) {
	s.ExpirySecs = val
}

type CreateApplicationBadRequest GeneralError

func (*CreateApplicationBadRequest) createApplicationRes() {}

type CreateApplicationInternalServerError GeneralError

func (*CreateApplicationInternalServerError) createApplicationRes() {}

type CreateApplicationReq struct {
	// Application name.
	Name       string    `json:"name"`
	AccountSid uuid.UUID `json:"account_sid"`
	// Application webhook to handle inbound voice calls.
	CallHook Webhook `json:"call_hook"`
	// Webhook to report call status events.
	CallStatusHook Webhook                            `json:"call_status_hook"`
	RecordAllCalls CreateApplicationReqRecordAllCalls `json:"record_all_calls"`
	MessagingHook  Webhook                            `json:"messaging_hook"`
}

// GetName returns the value of Name.
func (s *CreateApplicationReq) GetName() string {
	return s.Name
}

// GetAccountSid returns the value of AccountSid.
func (s *CreateApplicationReq) GetAccountSid() uuid.UUID {
	return s.AccountSid
}

// GetCallHook returns the value of CallHook.
func (s *CreateApplicationReq) GetCallHook() Webhook {
	return s.CallHook
}

// GetCallStatusHook returns the value of CallStatusHook.
func (s *CreateApplicationReq) GetCallStatusHook() Webhook {
	return s.CallStatusHook
}

// GetRecordAllCalls returns the value of RecordAllCalls.
func (s *CreateApplicationReq) GetRecordAllCalls() CreateApplicationReqRecordAllCalls {
	return s.RecordAllCalls
}

// GetMessagingHook returns the value of MessagingHook.
func (s *CreateApplicationReq) GetMessagingHook() Webhook {
	return s.MessagingHook
}

// SetName sets the value of Name.
func (s *CreateApplicationReq) SetName(val string) {
	s.Name = val
}

// SetAccountSid sets the value of AccountSid.
func (s *CreateApplicationReq) SetAccountSid(val uuid.UUID) {
	s.AccountSid = val
}

// SetCallHook sets the value of CallHook.
func (s *CreateApplicationReq) SetCallHook(val Webhook) {
	s.CallHook = val
}

// SetCallStatusHook sets the value of CallStatusHook.
func (s *CreateApplicationReq) SetCallStatusHook(val Webhook) {
	s.CallStatusHook = val
}

// SetRecordAllCalls sets the value of RecordAllCalls.
func (s *CreateApplicationReq) SetRecordAllCalls(val CreateApplicationReqRecordAllCalls) {
	s.RecordAllCalls = val
}

// SetMessagingHook sets the value of MessagingHook.
func (s *CreateApplicationReq) SetMessagingHook(val Webhook) {
	s.MessagingHook = val
}

type CreateApplicationReqRecordAllCalls int

const (
	CreateApplicationReqRecordAllCalls0 CreateApplicationReqRecordAllCalls = 0
	CreateApplicationReqRecordAllCalls1 CreateApplicationReqRecordAllCalls = 1
)

// AllValues returns all CreateApplicationReqRecordAllCalls values.
func (CreateApplicationReqRecordAllCalls) AllValues() []CreateApplicationReqRecordAllCalls {
	return []CreateApplicationReqRecordAllCalls{
		CreateApplicationReqRecordAllCalls0,
		CreateApplicationReqRecordAllCalls1,
	}
}

type CreateApplicationUnprocessableEntity GeneralError

func (*CreateApplicationUnprocessableEntity) createApplicationRes() {}

// CreateCallBadRequest is response for CreateCall operation.
type CreateCallBadRequest struct{}

func (*CreateCallBadRequest) createCallRes() {}

type CreateCallCreated struct {
	Sid uuid.UUID `json:"sid"`
}

// GetSid returns the value of Sid.
func (s *CreateCallCreated) GetSid() uuid.UUID {
	return s.Sid
}

// SetSid sets the value of Sid.
func (s *CreateCallCreated) SetSid(val uuid.UUID) {
	s.Sid = val
}

func (*CreateCallCreated) createCallRes() {}

type CreateCallReq struct {
	// The application to use to control this call.  Either applicationSid or url is required.
	ApplicationSid OptUUID `json:"application_sid"`
	// If set to true, the inbound call will ring until the number that was dialed answers the call, and
	// at that point a 200 OK will be sent on the inbound leg.  If false, the inbound call will be
	// answered immediately as the outbound call is placed.
	AnswerOnBridge OptBool    `json:"answerOnBridge"`
	CallHook       OptWebhook `json:"call_hook"`
	CallStatusHook OptWebhook `json:"call_status_hook"`
	// The calling party number.
	From string `json:"from"`
	// The hostname to put in the SIP From header of the INVITE.
	FromHost OptString `json:"fromHost"`
	// The number of seconds to wait for call to be answered.  Defaults to 60.
	Timeout OptInt `json:"timeout"`
	// The max length of call in seconds.
	TimeLimit OptInt `json:"timeLimit"`
	// Initial set of customer-supplied metadata to associate with the call (see jambonz 'tag' verb).
	Tag *CreateCallReqTag `json:"tag"`
	// Destination for call.
	To Target `json:"to"`
	// The customer SIP headers to associate with the call.
	Headers *CreateCallReqHeaders `json:"headers"`
	// The sip indialog hook to receive session messages.
	SipRequestWithinDialogHook OptString `json:"sipRequestWithinDialogHook"`
}

// GetApplicationSid returns the value of ApplicationSid.
func (s *CreateCallReq) GetApplicationSid() OptUUID {
	return s.ApplicationSid
}

// GetAnswerOnBridge returns the value of AnswerOnBridge.
func (s *CreateCallReq) GetAnswerOnBridge() OptBool {
	return s.AnswerOnBridge
}

// GetCallHook returns the value of CallHook.
func (s *CreateCallReq) GetCallHook() OptWebhook {
	return s.CallHook
}

// GetCallStatusHook returns the value of CallStatusHook.
func (s *CreateCallReq) GetCallStatusHook() OptWebhook {
	return s.CallStatusHook
}

// GetFrom returns the value of From.
func (s *CreateCallReq) GetFrom() string {
	return s.From
}

// GetFromHost returns the value of FromHost.
func (s *CreateCallReq) GetFromHost() OptString {
	return s.FromHost
}

// GetTimeout returns the value of Timeout.
func (s *CreateCallReq) GetTimeout() OptInt {
	return s.Timeout
}

// GetTimeLimit returns the value of TimeLimit.
func (s *CreateCallReq) GetTimeLimit() OptInt {
	return s.TimeLimit
}

// GetTag returns the value of Tag.
func (s *CreateCallReq) GetTag() *CreateCallReqTag {
	return s.Tag
}

// GetTo returns the value of To.
func (s *CreateCallReq) GetTo() Target {
	return s.To
}

// GetHeaders returns the value of Headers.
func (s *CreateCallReq) GetHeaders() *CreateCallReqHeaders {
	return s.Headers
}

// GetSipRequestWithinDialogHook returns the value of SipRequestWithinDialogHook.
func (s *CreateCallReq) GetSipRequestWithinDialogHook() OptString {
	return s.SipRequestWithinDialogHook
}

// SetApplicationSid sets the value of ApplicationSid.
func (s *CreateCallReq) SetApplicationSid(val OptUUID) {
	s.ApplicationSid = val
}

// SetAnswerOnBridge sets the value of AnswerOnBridge.
func (s *CreateCallReq) SetAnswerOnBridge(val OptBool) {
	s.AnswerOnBridge = val
}

// SetCallHook sets the value of CallHook.
func (s *CreateCallReq) SetCallHook(val OptWebhook) {
	s.CallHook = val
}

// SetCallStatusHook sets the value of CallStatusHook.
func (s *CreateCallReq) SetCallStatusHook(val OptWebhook) {
	s.CallStatusHook = val
}

// SetFrom sets the value of From.
func (s *CreateCallReq) SetFrom(val string) {
	s.From = val
}

// SetFromHost sets the value of FromHost.
func (s *CreateCallReq) SetFromHost(val OptString) {
	s.FromHost = val
}

// SetTimeout sets the value of Timeout.
func (s *CreateCallReq) SetTimeout(val OptInt) {
	s.Timeout = val
}

// SetTimeLimit sets the value of TimeLimit.
func (s *CreateCallReq) SetTimeLimit(val OptInt) {
	s.TimeLimit = val
}

// SetTag sets the value of Tag.
func (s *CreateCallReq) SetTag(val *CreateCallReqTag) {
	s.Tag = val
}

// SetTo sets the value of To.
func (s *CreateCallReq) SetTo(val Target) {
	s.To = val
}

// SetHeaders sets the value of Headers.
func (s *CreateCallReq) SetHeaders(val *CreateCallReqHeaders) {
	s.Headers = val
}

// SetSipRequestWithinDialogHook sets the value of SipRequestWithinDialogHook.
func (s *CreateCallReq) SetSipRequestWithinDialogHook(val OptString) {
	s.SipRequestWithinDialogHook = val
}

// The customer SIP headers to associate with the call.
type CreateCallReqHeaders struct{}

// Initial set of customer-supplied metadata to associate with the call (see jambonz 'tag' verb).
type CreateCallReqTag struct{}

// CreateCarrierForServiceProviderNotFound is response for CreateCarrierForServiceProvider operation.
type CreateCarrierForServiceProviderNotFound struct{}

func (*CreateCarrierForServiceProviderNotFound) createCarrierForServiceProviderRes() {}

type CreateGoogleCustomVoiceBadRequest GeneralError

func (*CreateGoogleCustomVoiceBadRequest) createGoogleCustomVoiceRes() {}

type CreateGoogleCustomVoiceInternalServerError GeneralError

func (*CreateGoogleCustomVoiceInternalServerError) createGoogleCustomVoiceRes() {}

type CreateGoogleCustomVoiceUnprocessableEntity GeneralError

func (*CreateGoogleCustomVoiceUnprocessableEntity) createGoogleCustomVoiceRes() {}

type CreateLcrBadRequest GeneralError

func (*CreateLcrBadRequest) createLcrRes() {}

type CreateLcrCarrierSetEntryBadRequest GeneralError

func (*CreateLcrCarrierSetEntryBadRequest) createLcrCarrierSetEntryRes() {}

type CreateLcrCarrierSetEntryInternalServerError GeneralError

func (*CreateLcrCarrierSetEntryInternalServerError) createLcrCarrierSetEntryRes() {}

type CreateLcrCarrierSetEntryUnprocessableEntity GeneralError

func (*CreateLcrCarrierSetEntryUnprocessableEntity) createLcrCarrierSetEntryRes() {}

// CreateLcrForServiceProviderNotFound is response for CreateLcrForServiceProvider operation.
type CreateLcrForServiceProviderNotFound struct{}

func (*CreateLcrForServiceProviderNotFound) createLcrForServiceProviderRes() {}

type CreateLcrForServiceProviderReq struct {
	// Name or Least Cost Routing.
	Name string `json:"name"`
}

// GetName returns the value of Name.
func (s *CreateLcrForServiceProviderReq) GetName() string {
	return s.Name
}

// SetName sets the value of Name.
func (s *CreateLcrForServiceProviderReq) SetName(val string) {
	s.Name = val
}

type CreateLcrInternalServerError GeneralError

func (*CreateLcrInternalServerError) createLcrRes() {}

type CreateLcrReq struct {
	// Name or Least Cost Routing.
	Name string `json:"name"`
}

// GetName returns the value of Name.
func (s *CreateLcrReq) GetName() string {
	return s.Name
}

// SetName sets the value of Name.
func (s *CreateLcrReq) SetName(val string) {
	s.Name = val
}

type CreateLcrRoutesBadRequest GeneralError

func (*CreateLcrRoutesBadRequest) createLcrRoutesRes() {}

type CreateLcrRoutesInternalServerError GeneralError

func (*CreateLcrRoutesInternalServerError) createLcrRoutesRes() {}

type CreateLcrRoutesUnprocessableEntity GeneralError

func (*CreateLcrRoutesUnprocessableEntity) createLcrRoutesRes() {}

type CreateLcrUnprocessableEntity GeneralError

func (*CreateLcrUnprocessableEntity) createLcrRes() {}

type CreateLeastCostRoutingRoutesAndCarrierEntriesBadRequest GeneralError

func (*CreateLeastCostRoutingRoutesAndCarrierEntriesBadRequest) createLeastCostRoutingRoutesAndCarrierEntriesRes() {
}

type CreateLeastCostRoutingRoutesAndCarrierEntriesInternalServerError GeneralError

func (*CreateLeastCostRoutingRoutesAndCarrierEntriesInternalServerError) createLeastCostRoutingRoutesAndCarrierEntriesRes() {
}

// CreateLeastCostRoutingRoutesAndCarrierEntriesNoContent is response for CreateLeastCostRoutingRoutesAndCarrierEntries operation.
type CreateLeastCostRoutingRoutesAndCarrierEntriesNoContent struct{}

func (*CreateLeastCostRoutingRoutesAndCarrierEntriesNoContent) createLeastCostRoutingRoutesAndCarrierEntriesRes() {
}

// CreateLeastCostRoutingRoutesAndCarrierEntriesNotFound is response for CreateLeastCostRoutingRoutesAndCarrierEntries operation.
type CreateLeastCostRoutingRoutesAndCarrierEntriesNotFound struct{}

func (*CreateLeastCostRoutingRoutesAndCarrierEntriesNotFound) createLeastCostRoutingRoutesAndCarrierEntriesRes() {
}

// CreateMessageBadRequest is response for CreateMessage operation.
type CreateMessageBadRequest struct{}

func (*CreateMessageBadRequest) createMessageRes() {}

type CreateMessageCode480 struct {
	Sid         uuid.UUID `json:"sid"`
	Message     OptString `json:"message"`
	SmppErrCode OptString `json:"smpp_err_code"`
}

// GetSid returns the value of Sid.
func (s *CreateMessageCode480) GetSid() uuid.UUID {
	return s.Sid
}

// GetMessage returns the value of Message.
func (s *CreateMessageCode480) GetMessage() OptString {
	return s.Message
}

// GetSmppErrCode returns the value of SmppErrCode.
func (s *CreateMessageCode480) GetSmppErrCode() OptString {
	return s.SmppErrCode
}

// SetSid sets the value of Sid.
func (s *CreateMessageCode480) SetSid(val uuid.UUID) {
	s.Sid = val
}

// SetMessage sets the value of Message.
func (s *CreateMessageCode480) SetMessage(val OptString) {
	s.Message = val
}

// SetSmppErrCode sets the value of SmppErrCode.
func (s *CreateMessageCode480) SetSmppErrCode(val OptString) {
	s.SmppErrCode = val
}

func (*CreateMessageCode480) createMessageRes() {}

type CreateMessageCreated struct {
	Sid              uuid.UUID `json:"sid"`
	ProviderResponse OptString `json:"providerResponse"`
}

// GetSid returns the value of Sid.
func (s *CreateMessageCreated) GetSid() uuid.UUID {
	return s.Sid
}

// GetProviderResponse returns the value of ProviderResponse.
func (s *CreateMessageCreated) GetProviderResponse() OptString {
	return s.ProviderResponse
}

// SetSid sets the value of Sid.
func (s *CreateMessageCreated) SetSid(val uuid.UUID) {
	s.Sid = val
}

// SetProviderResponse sets the value of ProviderResponse.
func (s *CreateMessageCreated) SetProviderResponse(val OptString) {
	s.ProviderResponse = val
}

func (*CreateMessageCreated) createMessageRes() {}

type CreateMsTeamsTenantBadRequest GeneralError

func (*CreateMsTeamsTenantBadRequest) createMsTeamsTenantRes() {}

type CreateMsTeamsTenantInternalServerError GeneralError

func (*CreateMsTeamsTenantInternalServerError) createMsTeamsTenantRes() {}

type CreateMsTeamsTenantReq struct {
	ServiceProviderSid uuid.UUID `json:"service_provider_sid"`
	AccountSid         OptUUID   `json:"account_sid"`
	ApplicationSid     OptUUID   `json:"application_sid"`
	TenantFqdn         string    `json:"tenant_fqdn"`
}

// GetServiceProviderSid returns the value of ServiceProviderSid.
func (s *CreateMsTeamsTenantReq) GetServiceProviderSid() uuid.UUID {
	return s.ServiceProviderSid
}

// GetAccountSid returns the value of AccountSid.
func (s *CreateMsTeamsTenantReq) GetAccountSid() OptUUID {
	return s.AccountSid
}

// GetApplicationSid returns the value of ApplicationSid.
func (s *CreateMsTeamsTenantReq) GetApplicationSid() OptUUID {
	return s.ApplicationSid
}

// GetTenantFqdn returns the value of TenantFqdn.
func (s *CreateMsTeamsTenantReq) GetTenantFqdn() string {
	return s.TenantFqdn
}

// SetServiceProviderSid sets the value of ServiceProviderSid.
func (s *CreateMsTeamsTenantReq) SetServiceProviderSid(val uuid.UUID) {
	s.ServiceProviderSid = val
}

// SetAccountSid sets the value of AccountSid.
func (s *CreateMsTeamsTenantReq) SetAccountSid(val OptUUID) {
	s.AccountSid = val
}

// SetApplicationSid sets the value of ApplicationSid.
func (s *CreateMsTeamsTenantReq) SetApplicationSid(val OptUUID) {
	s.ApplicationSid = val
}

// SetTenantFqdn sets the value of TenantFqdn.
func (s *CreateMsTeamsTenantReq) SetTenantFqdn(val string) {
	s.TenantFqdn = val
}

type CreateSbcBadRequest GeneralError

func (*CreateSbcBadRequest) createSbcRes() {}

type CreateSbcInternalServerError GeneralError

func (*CreateSbcInternalServerError) createSbcRes() {}

type CreateSbcReq struct {
	Ipv4 string     `json:"ipv4"`
	Port OptFloat64 `json:"port"`
	// Service provider scope for the generated api key.
	ServiceProviderSid OptString `json:"service_provider_sid"`
}

// GetIpv4 returns the value of Ipv4.
func (s *CreateSbcReq) GetIpv4() string {
	return s.Ipv4
}

// GetPort returns the value of Port.
func (s *CreateSbcReq) GetPort() OptFloat64 {
	return s.Port
}

// GetServiceProviderSid returns the value of ServiceProviderSid.
func (s *CreateSbcReq) GetServiceProviderSid() OptString {
	return s.ServiceProviderSid
}

// SetIpv4 sets the value of Ipv4.
func (s *CreateSbcReq) SetIpv4(val string) {
	s.Ipv4 = val
}

// SetPort sets the value of Port.
func (s *CreateSbcReq) SetPort(val OptFloat64) {
	s.Port = val
}

// SetServiceProviderSid sets the value of ServiceProviderSid.
func (s *CreateSbcReq) SetServiceProviderSid(val OptString) {
	s.ServiceProviderSid = val
}

type CreateServiceProviderReq struct {
	// Service provider name.
	Name        string    `json:"name"`
	Description OptString `json:"description"`
	// Root domain for group of accounts that share a registration hook.
	RootDomain OptString `json:"root_domain"`
	// Authentication webhook for registration.
	RegistrationHook OptWebhook `json:"registration_hook"`
	// SBC domain name for Microsoft Teams.
	MsTeamsFqdn OptString `json:"ms_teams_fqdn"`
}

// GetName returns the value of Name.
func (s *CreateServiceProviderReq) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *CreateServiceProviderReq) GetDescription() OptString {
	return s.Description
}

// GetRootDomain returns the value of RootDomain.
func (s *CreateServiceProviderReq) GetRootDomain() OptString {
	return s.RootDomain
}

// GetRegistrationHook returns the value of RegistrationHook.
func (s *CreateServiceProviderReq) GetRegistrationHook() OptWebhook {
	return s.RegistrationHook
}

// GetMsTeamsFqdn returns the value of MsTeamsFqdn.
func (s *CreateServiceProviderReq) GetMsTeamsFqdn() OptString {
	return s.MsTeamsFqdn
}

// SetName sets the value of Name.
func (s *CreateServiceProviderReq) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *CreateServiceProviderReq) SetDescription(val OptString) {
	s.Description = val
}

// SetRootDomain sets the value of RootDomain.
func (s *CreateServiceProviderReq) SetRootDomain(val OptString) {
	s.RootDomain = val
}

// SetRegistrationHook sets the value of RegistrationHook.
func (s *CreateServiceProviderReq) SetRegistrationHook(val OptWebhook) {
	s.RegistrationHook = val
}

// SetMsTeamsFqdn sets the value of MsTeamsFqdn.
func (s *CreateServiceProviderReq) SetMsTeamsFqdn(val OptString) {
	s.MsTeamsFqdn = val
}

type CreateSipGatewayBadRequest GeneralError

func (*CreateSipGatewayBadRequest) createSipGatewayRes() {}

type CreateSipGatewayInternalServerError GeneralError

func (*CreateSipGatewayInternalServerError) createSipGatewayRes() {}

type CreateSipGatewayReq struct {
	// Voip carrier that provides this gateway.
	VoipCarrierSid uuid.UUID  `json:"voip_carrier_sid"`
	Ipv4           string     `json:"ipv4"`
	Port           OptFloat64 `json:"port"`
	IsActive       OptBool    `json:"is_active"`
	Inbound        OptBool    `json:"inbound"`
	Outbound       OptBool    `json:"outbound"`
}

// GetVoipCarrierSid returns the value of VoipCarrierSid.
func (s *CreateSipGatewayReq) GetVoipCarrierSid() uuid.UUID {
	return s.VoipCarrierSid
}

// GetIpv4 returns the value of Ipv4.
func (s *CreateSipGatewayReq) GetIpv4() string {
	return s.Ipv4
}

// GetPort returns the value of Port.
func (s *CreateSipGatewayReq) GetPort() OptFloat64 {
	return s.Port
}

// GetIsActive returns the value of IsActive.
func (s *CreateSipGatewayReq) GetIsActive() OptBool {
	return s.IsActive
}

// GetInbound returns the value of Inbound.
func (s *CreateSipGatewayReq) GetInbound() OptBool {
	return s.Inbound
}

// GetOutbound returns the value of Outbound.
func (s *CreateSipGatewayReq) GetOutbound() OptBool {
	return s.Outbound
}

// SetVoipCarrierSid sets the value of VoipCarrierSid.
func (s *CreateSipGatewayReq) SetVoipCarrierSid(val uuid.UUID) {
	s.VoipCarrierSid = val
}

// SetIpv4 sets the value of Ipv4.
func (s *CreateSipGatewayReq) SetIpv4(val string) {
	s.Ipv4 = val
}

// SetPort sets the value of Port.
func (s *CreateSipGatewayReq) SetPort(val OptFloat64) {
	s.Port = val
}

// SetIsActive sets the value of IsActive.
func (s *CreateSipGatewayReq) SetIsActive(val OptBool) {
	s.IsActive = val
}

// SetInbound sets the value of Inbound.
func (s *CreateSipGatewayReq) SetInbound(val OptBool) {
	s.Inbound = val
}

// SetOutbound sets the value of Outbound.
func (s *CreateSipGatewayReq) SetOutbound(val OptBool) {
	s.Outbound = val
}

type CreateSipGatewayUnprocessableEntity GeneralError

func (*CreateSipGatewayUnprocessableEntity) createSipGatewayRes() {}

type CreateSipRealmBadRequest GeneralError

func (*CreateSipRealmBadRequest) createSipRealmRes() {}

type CreateSipRealmInternalServerError GeneralError

func (*CreateSipRealmInternalServerError) createSipRealmRes() {}

// CreateSipRealmNoContent is response for CreateSipRealm operation.
type CreateSipRealmNoContent struct{}

func (*CreateSipRealmNoContent) createSipRealmRes() {}

type CreateSmppGatewayBadRequest GeneralError

func (*CreateSmppGatewayBadRequest) createSmppGatewayRes() {}

type CreateSmppGatewayInternalServerError GeneralError

func (*CreateSmppGatewayInternalServerError) createSmppGatewayRes() {}

type CreateSmppGatewayReq struct {
	// Voip carrier that provides this gateway.
	VoipCarrierSid uuid.UUID  `json:"voip_carrier_sid"`
	Ipv4           string     `json:"ipv4"`
	Port           OptFloat64 `json:"port"`
	Netmask        OptFloat64 `json:"netmask"`
	Inbound        OptBool    `json:"inbound"`
	Outbound       OptBool    `json:"outbound"`
	IsPrimary      OptBool    `json:"is_primary"`
	UseTLS         OptBool    `json:"use_tls"`
}

// GetVoipCarrierSid returns the value of VoipCarrierSid.
func (s *CreateSmppGatewayReq) GetVoipCarrierSid() uuid.UUID {
	return s.VoipCarrierSid
}

// GetIpv4 returns the value of Ipv4.
func (s *CreateSmppGatewayReq) GetIpv4() string {
	return s.Ipv4
}

// GetPort returns the value of Port.
func (s *CreateSmppGatewayReq) GetPort() OptFloat64 {
	return s.Port
}

// GetNetmask returns the value of Netmask.
func (s *CreateSmppGatewayReq) GetNetmask() OptFloat64 {
	return s.Netmask
}

// GetInbound returns the value of Inbound.
func (s *CreateSmppGatewayReq) GetInbound() OptBool {
	return s.Inbound
}

// GetOutbound returns the value of Outbound.
func (s *CreateSmppGatewayReq) GetOutbound() OptBool {
	return s.Outbound
}

// GetIsPrimary returns the value of IsPrimary.
func (s *CreateSmppGatewayReq) GetIsPrimary() OptBool {
	return s.IsPrimary
}

// GetUseTLS returns the value of UseTLS.
func (s *CreateSmppGatewayReq) GetUseTLS() OptBool {
	return s.UseTLS
}

// SetVoipCarrierSid sets the value of VoipCarrierSid.
func (s *CreateSmppGatewayReq) SetVoipCarrierSid(val uuid.UUID) {
	s.VoipCarrierSid = val
}

// SetIpv4 sets the value of Ipv4.
func (s *CreateSmppGatewayReq) SetIpv4(val string) {
	s.Ipv4 = val
}

// SetPort sets the value of Port.
func (s *CreateSmppGatewayReq) SetPort(val OptFloat64) {
	s.Port = val
}

// SetNetmask sets the value of Netmask.
func (s *CreateSmppGatewayReq) SetNetmask(val OptFloat64) {
	s.Netmask = val
}

// SetInbound sets the value of Inbound.
func (s *CreateSmppGatewayReq) SetInbound(val OptBool) {
	s.Inbound = val
}

// SetOutbound sets the value of Outbound.
func (s *CreateSmppGatewayReq) SetOutbound(val OptBool) {
	s.Outbound = val
}

// SetIsPrimary sets the value of IsPrimary.
func (s *CreateSmppGatewayReq) SetIsPrimary(val OptBool) {
	s.IsPrimary = val
}

// SetUseTLS sets the value of UseTLS.
func (s *CreateSmppGatewayReq) SetUseTLS(val OptBool) {
	s.UseTLS = val
}

type CreateSmppGatewayUnprocessableEntity GeneralError

func (*CreateSmppGatewayUnprocessableEntity) createSmppGatewayRes() {}

type CreateSpeechCredentialBadRequest GeneralError

func (*CreateSpeechCredentialBadRequest) createSpeechCredentialRes() {}

type CreateSpeechCredentialInternalServerError GeneralError

func (*CreateSpeechCredentialInternalServerError) createSpeechCredentialRes() {}

type CreateUserForbidden GeneralError

func (*CreateUserForbidden) createUserRes() {}

type CreateUserInternalServerError GeneralError

func (*CreateUserInternalServerError) createUserRes() {}

// CreateUserNoContent is response for CreateUser operation.
type CreateUserNoContent struct{}

func (*CreateUserNoContent) createUserRes() {}

type CreateUserReq struct {
	Name        OptString `json:"name"`
	Email       OptString `json:"email"`
	IsActive    OptBool   `json:"is_active"`
	ForceChange OptBool   `json:"force_change"`
	Scope       OptString `json:"scope"`
	Permissions []string  `json:"permissions"`
	// Existing password, which is to be replaced.
	OldPassword OptString `json:"old_password"`
}

// GetName returns the value of Name.
func (s *CreateUserReq) GetName() OptString {
	return s.Name
}

// GetEmail returns the value of Email.
func (s *CreateUserReq) GetEmail() OptString {
	return s.Email
}

// GetIsActive returns the value of IsActive.
func (s *CreateUserReq) GetIsActive() OptBool {
	return s.IsActive
}

// GetForceChange returns the value of ForceChange.
func (s *CreateUserReq) GetForceChange() OptBool {
	return s.ForceChange
}

// GetScope returns the value of Scope.
func (s *CreateUserReq) GetScope() OptString {
	return s.Scope
}

// GetPermissions returns the value of Permissions.
func (s *CreateUserReq) GetPermissions() []string {
	return s.Permissions
}

// GetOldPassword returns the value of OldPassword.
func (s *CreateUserReq) GetOldPassword() OptString {
	return s.OldPassword
}

// SetName sets the value of Name.
func (s *CreateUserReq) SetName(val OptString) {
	s.Name = val
}

// SetEmail sets the value of Email.
func (s *CreateUserReq) SetEmail(val OptString) {
	s.Email = val
}

// SetIsActive sets the value of IsActive.
func (s *CreateUserReq) SetIsActive(val OptBool) {
	s.IsActive = val
}

// SetForceChange sets the value of ForceChange.
func (s *CreateUserReq) SetForceChange(val OptBool) {
	s.ForceChange = val
}

// SetScope sets the value of Scope.
func (s *CreateUserReq) SetScope(val OptString) {
	s.Scope = val
}

// SetPermissions sets the value of Permissions.
func (s *CreateUserReq) SetPermissions(val []string) {
	s.Permissions = val
}

// SetOldPassword sets the value of OldPassword.
func (s *CreateUserReq) SetOldPassword(val OptString) {
	s.OldPassword = val
}

type CreateVoipCarrierBadRequest GeneralError

func (*CreateVoipCarrierBadRequest) createVoipCarrierRes() {}

type CreateVoipCarrierInternalServerError GeneralError

func (*CreateVoipCarrierInternalServerError) createVoipCarrierRes() {}

type CreateVoipCarrierReq struct {
	// Voip carrier name.
	Name           string    `json:"name"`
	Description    OptString `json:"description"`
	AccountSid     OptString `json:"account_sid"`
	ApplicationSid OptString `json:"application_sid"`
	// Whether a leading + is required on INVITEs to this provider.
	E164LeadingPlus OptBool `json:"e164_leading_plus"`
	// Wehther this provider requires us to send a REGISTER to them in order to receive calls.
	RequiresRegister OptBool `json:"requires_register"`
	// Wehther this provider requires us to send a REGISTER use TLS protocol.
	RegisterUseTLS OptBool `json:"register_use_tls"`
	// Sip username to authenticate with, if registration is required.
	RegisterUsername OptString `json:"register_username"`
	// Sip realm to authenticate with, if registration is required.
	RegisterSipRealm OptString `json:"register_sip_realm"`
	// Sip password to authenticate with, if registration is required.
	RegisterPassword OptString `json:"register_password"`
	// Optional username to apply in From header.
	RegisterFromUser OptString `json:"register_from_user"`
	// Optional domain to apply in From header.
	RegisterFromDomain OptString `json:"register_from_domain"`
	// If true, use our public ip in Contact header; otherwise, use sip realm.
	RegisterPublicIPInContact OptBool `json:"register_public_ip_in_contact"`
	// Prefix to be applied to the called number for outbound call attempts.
	TechPrefix OptString `json:"tech_prefix"`
	// Challenge inbound calls with this username/password if supplied.
	InboundAuthUsername OptString `json:"inbound_auth_username"`
	// Challenge inbound calls with this username/password if supplied.
	InboundAuthPassword OptString `json:"inbound_auth_password"`
	// Diversion header or phone number to apply to outbound calls.
	Diversion OptString `json:"diversion"`
}

// GetName returns the value of Name.
func (s *CreateVoipCarrierReq) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *CreateVoipCarrierReq) GetDescription() OptString {
	return s.Description
}

// GetAccountSid returns the value of AccountSid.
func (s *CreateVoipCarrierReq) GetAccountSid() OptString {
	return s.AccountSid
}

// GetApplicationSid returns the value of ApplicationSid.
func (s *CreateVoipCarrierReq) GetApplicationSid() OptString {
	return s.ApplicationSid
}

// GetE164LeadingPlus returns the value of E164LeadingPlus.
func (s *CreateVoipCarrierReq) GetE164LeadingPlus() OptBool {
	return s.E164LeadingPlus
}

// GetRequiresRegister returns the value of RequiresRegister.
func (s *CreateVoipCarrierReq) GetRequiresRegister() OptBool {
	return s.RequiresRegister
}

// GetRegisterUseTLS returns the value of RegisterUseTLS.
func (s *CreateVoipCarrierReq) GetRegisterUseTLS() OptBool {
	return s.RegisterUseTLS
}

// GetRegisterUsername returns the value of RegisterUsername.
func (s *CreateVoipCarrierReq) GetRegisterUsername() OptString {
	return s.RegisterUsername
}

// GetRegisterSipRealm returns the value of RegisterSipRealm.
func (s *CreateVoipCarrierReq) GetRegisterSipRealm() OptString {
	return s.RegisterSipRealm
}

// GetRegisterPassword returns the value of RegisterPassword.
func (s *CreateVoipCarrierReq) GetRegisterPassword() OptString {
	return s.RegisterPassword
}

// GetRegisterFromUser returns the value of RegisterFromUser.
func (s *CreateVoipCarrierReq) GetRegisterFromUser() OptString {
	return s.RegisterFromUser
}

// GetRegisterFromDomain returns the value of RegisterFromDomain.
func (s *CreateVoipCarrierReq) GetRegisterFromDomain() OptString {
	return s.RegisterFromDomain
}

// GetRegisterPublicIPInContact returns the value of RegisterPublicIPInContact.
func (s *CreateVoipCarrierReq) GetRegisterPublicIPInContact() OptBool {
	return s.RegisterPublicIPInContact
}

// GetTechPrefix returns the value of TechPrefix.
func (s *CreateVoipCarrierReq) GetTechPrefix() OptString {
	return s.TechPrefix
}

// GetInboundAuthUsername returns the value of InboundAuthUsername.
func (s *CreateVoipCarrierReq) GetInboundAuthUsername() OptString {
	return s.InboundAuthUsername
}

// GetInboundAuthPassword returns the value of InboundAuthPassword.
func (s *CreateVoipCarrierReq) GetInboundAuthPassword() OptString {
	return s.InboundAuthPassword
}

// GetDiversion returns the value of Diversion.
func (s *CreateVoipCarrierReq) GetDiversion() OptString {
	return s.Diversion
}

// SetName sets the value of Name.
func (s *CreateVoipCarrierReq) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *CreateVoipCarrierReq) SetDescription(val OptString) {
	s.Description = val
}

// SetAccountSid sets the value of AccountSid.
func (s *CreateVoipCarrierReq) SetAccountSid(val OptString) {
	s.AccountSid = val
}

// SetApplicationSid sets the value of ApplicationSid.
func (s *CreateVoipCarrierReq) SetApplicationSid(val OptString) {
	s.ApplicationSid = val
}

// SetE164LeadingPlus sets the value of E164LeadingPlus.
func (s *CreateVoipCarrierReq) SetE164LeadingPlus(val OptBool) {
	s.E164LeadingPlus = val
}

// SetRequiresRegister sets the value of RequiresRegister.
func (s *CreateVoipCarrierReq) SetRequiresRegister(val OptBool) {
	s.RequiresRegister = val
}

// SetRegisterUseTLS sets the value of RegisterUseTLS.
func (s *CreateVoipCarrierReq) SetRegisterUseTLS(val OptBool) {
	s.RegisterUseTLS = val
}

// SetRegisterUsername sets the value of RegisterUsername.
func (s *CreateVoipCarrierReq) SetRegisterUsername(val OptString) {
	s.RegisterUsername = val
}

// SetRegisterSipRealm sets the value of RegisterSipRealm.
func (s *CreateVoipCarrierReq) SetRegisterSipRealm(val OptString) {
	s.RegisterSipRealm = val
}

// SetRegisterPassword sets the value of RegisterPassword.
func (s *CreateVoipCarrierReq) SetRegisterPassword(val OptString) {
	s.RegisterPassword = val
}

// SetRegisterFromUser sets the value of RegisterFromUser.
func (s *CreateVoipCarrierReq) SetRegisterFromUser(val OptString) {
	s.RegisterFromUser = val
}

// SetRegisterFromDomain sets the value of RegisterFromDomain.
func (s *CreateVoipCarrierReq) SetRegisterFromDomain(val OptString) {
	s.RegisterFromDomain = val
}

// SetRegisterPublicIPInContact sets the value of RegisterPublicIPInContact.
func (s *CreateVoipCarrierReq) SetRegisterPublicIPInContact(val OptBool) {
	s.RegisterPublicIPInContact = val
}

// SetTechPrefix sets the value of TechPrefix.
func (s *CreateVoipCarrierReq) SetTechPrefix(val OptString) {
	s.TechPrefix = val
}

// SetInboundAuthUsername sets the value of InboundAuthUsername.
func (s *CreateVoipCarrierReq) SetInboundAuthUsername(val OptString) {
	s.InboundAuthUsername = val
}

// SetInboundAuthPassword sets the value of InboundAuthPassword.
func (s *CreateVoipCarrierReq) SetInboundAuthPassword(val OptString) {
	s.InboundAuthPassword = val
}

// SetDiversion sets the value of Diversion.
func (s *CreateVoipCarrierReq) SetDiversion(val OptString) {
	s.Diversion = val
}

type CreateVoipCarrierUnprocessableEntity GeneralError

func (*CreateVoipCarrierUnprocessableEntity) createVoipCarrierRes() {}

type DeleteAccountInternalServerError GeneralError

func (*DeleteAccountInternalServerError) deleteAccountRes() {}

// DeleteAccountNoContent is response for DeleteAccount operation.
type DeleteAccountNoContent struct{}

func (*DeleteAccountNoContent) deleteAccountRes() {}

// DeleteAccountNotFound is response for DeleteAccount operation.
type DeleteAccountNotFound struct{}

func (*DeleteAccountNotFound) deleteAccountRes() {}

type DeleteAccountUnprocessableEntity GeneralError

func (*DeleteAccountUnprocessableEntity) deleteAccountRes() {}

// DeleteApiKeyNotFound is response for DeleteApiKey operation.
type DeleteApiKeyNotFound struct{}

func (*DeleteApiKeyNotFound) deleteApiKeyRes() {}

// DeleteApiKeyOK is response for DeleteApiKey operation.
type DeleteApiKeyOK struct{}

func (*DeleteApiKeyOK) deleteApiKeyRes() {}

type DeleteApplicationInternalServerError GeneralError

func (*DeleteApplicationInternalServerError) deleteApplicationRes() {}

// DeleteApplicationNoContent is response for DeleteApplication operation.
type DeleteApplicationNoContent struct{}

func (*DeleteApplicationNoContent) deleteApplicationRes() {}

// DeleteApplicationNotFound is response for DeleteApplication operation.
type DeleteApplicationNotFound struct{}

func (*DeleteApplicationNotFound) deleteApplicationRes() {}

type DeleteApplicationUnprocessableEntity GeneralError

func (*DeleteApplicationUnprocessableEntity) deleteApplicationRes() {}

type DeleteCallInternalServerError GeneralError

func (*DeleteCallInternalServerError) deleteCallRes() {}

// DeleteCallNoContent is response for DeleteCall operation.
type DeleteCallNoContent struct{}

func (*DeleteCallNoContent) deleteCallRes() {}

// DeleteCallNotFound is response for DeleteCall operation.
type DeleteCallNotFound struct{}

func (*DeleteCallNotFound) deleteCallRes() {}

type DeleteCallUnprocessableEntity GeneralError

func (*DeleteCallUnprocessableEntity) deleteCallRes() {}

type DeleteGoogleCustomVoiceInternalServerError GeneralError

func (*DeleteGoogleCustomVoiceInternalServerError) deleteGoogleCustomVoiceRes() {}

// DeleteGoogleCustomVoiceNoContent is response for DeleteGoogleCustomVoice operation.
type DeleteGoogleCustomVoiceNoContent struct{}

func (*DeleteGoogleCustomVoiceNoContent) deleteGoogleCustomVoiceRes() {}

// DeleteGoogleCustomVoiceNotFound is response for DeleteGoogleCustomVoice operation.
type DeleteGoogleCustomVoiceNotFound struct{}

func (*DeleteGoogleCustomVoiceNotFound) deleteGoogleCustomVoiceRes() {}

type DeleteGoogleCustomVoiceUnprocessableEntity GeneralError

func (*DeleteGoogleCustomVoiceUnprocessableEntity) deleteGoogleCustomVoiceRes() {}

type DeleteLeastCostRoutingCarrierSetEntryInternalServerError GeneralError

func (*DeleteLeastCostRoutingCarrierSetEntryInternalServerError) deleteLeastCostRoutingCarrierSetEntryRes() {
}

// DeleteLeastCostRoutingCarrierSetEntryNoContent is response for DeleteLeastCostRoutingCarrierSetEntry operation.
type DeleteLeastCostRoutingCarrierSetEntryNoContent struct{}

func (*DeleteLeastCostRoutingCarrierSetEntryNoContent) deleteLeastCostRoutingCarrierSetEntryRes() {}

// DeleteLeastCostRoutingCarrierSetEntryNotFound is response for DeleteLeastCostRoutingCarrierSetEntry operation.
type DeleteLeastCostRoutingCarrierSetEntryNotFound struct{}

func (*DeleteLeastCostRoutingCarrierSetEntryNotFound) deleteLeastCostRoutingCarrierSetEntryRes() {}

type DeleteLeastCostRoutingCarrierSetEntryUnprocessableEntity GeneralError

func (*DeleteLeastCostRoutingCarrierSetEntryUnprocessableEntity) deleteLeastCostRoutingCarrierSetEntryRes() {
}

type DeleteLeastCostRoutingInternalServerError GeneralError

func (*DeleteLeastCostRoutingInternalServerError) deleteLeastCostRoutingRes() {}

// DeleteLeastCostRoutingNoContent is response for DeleteLeastCostRouting operation.
type DeleteLeastCostRoutingNoContent struct{}

func (*DeleteLeastCostRoutingNoContent) deleteLeastCostRoutingRes() {}

// DeleteLeastCostRoutingNotFound is response for DeleteLeastCostRouting operation.
type DeleteLeastCostRoutingNotFound struct{}

func (*DeleteLeastCostRoutingNotFound) deleteLeastCostRoutingRes() {}

type DeleteLeastCostRoutingRouteInternalServerError GeneralError

func (*DeleteLeastCostRoutingRouteInternalServerError) deleteLeastCostRoutingRouteRes() {}

// DeleteLeastCostRoutingRouteNoContent is response for DeleteLeastCostRoutingRoute operation.
type DeleteLeastCostRoutingRouteNoContent struct{}

func (*DeleteLeastCostRoutingRouteNoContent) deleteLeastCostRoutingRouteRes() {}

// DeleteLeastCostRoutingRouteNotFound is response for DeleteLeastCostRoutingRoute operation.
type DeleteLeastCostRoutingRouteNotFound struct{}

func (*DeleteLeastCostRoutingRouteNotFound) deleteLeastCostRoutingRouteRes() {}

type DeleteLeastCostRoutingRouteUnprocessableEntity GeneralError

func (*DeleteLeastCostRoutingRouteUnprocessableEntity) deleteLeastCostRoutingRouteRes() {}

type DeleteLeastCostRoutingUnprocessableEntity GeneralError

func (*DeleteLeastCostRoutingUnprocessableEntity) deleteLeastCostRoutingRes() {}

type DeletePhoneNumberInternalServerError GeneralError

func (*DeletePhoneNumberInternalServerError) deletePhoneNumberRes() {}

// DeletePhoneNumberNoContent is response for DeletePhoneNumber operation.
type DeletePhoneNumberNoContent struct{}

func (*DeletePhoneNumberNoContent) deletePhoneNumberRes() {}

// DeletePhoneNumberNotFound is response for DeletePhoneNumber operation.
type DeletePhoneNumberNotFound struct{}

func (*DeletePhoneNumberNotFound) deletePhoneNumberRes() {}

type DeletePhoneNumberUnprocessableEntity GeneralError

func (*DeletePhoneNumberUnprocessableEntity) deletePhoneNumberRes() {}

// DeleteSbcAddressNotFound is response for DeleteSbcAddress operation.
type DeleteSbcAddressNotFound struct{}

func (*DeleteSbcAddressNotFound) deleteSbcAddressRes() {}

// DeleteSbcAddressOK is response for DeleteSbcAddress operation.
type DeleteSbcAddressOK struct{}

func (*DeleteSbcAddressOK) deleteSbcAddressRes() {}

type DeleteServiceProviderInternalServerError GeneralError

func (*DeleteServiceProviderInternalServerError) deleteServiceProviderRes() {}

// DeleteServiceProviderNoContent is response for DeleteServiceProvider operation.
type DeleteServiceProviderNoContent struct{}

func (*DeleteServiceProviderNoContent) deleteServiceProviderRes() {}

// DeleteServiceProviderNotFound is response for DeleteServiceProvider operation.
type DeleteServiceProviderNotFound struct{}

func (*DeleteServiceProviderNotFound) deleteServiceProviderRes() {}

type DeleteServiceProviderUnprocessableEntity GeneralError

func (*DeleteServiceProviderUnprocessableEntity) deleteServiceProviderRes() {}

// DeleteSipGatewayNoContent is response for DeleteSipGateway operation.
type DeleteSipGatewayNoContent struct{}

func (*DeleteSipGatewayNoContent) deleteSipGatewayRes() {}

// DeleteSipGatewayNotFound is response for DeleteSipGateway operation.
type DeleteSipGatewayNotFound struct{}

func (*DeleteSipGatewayNotFound) deleteSipGatewayRes() {}

// DeleteSmppGatewayNoContent is response for DeleteSmppGateway operation.
type DeleteSmppGatewayNoContent struct{}

func (*DeleteSmppGatewayNoContent) deleteSmppGatewayRes() {}

// DeleteSmppGatewayNotFound is response for DeleteSmppGateway operation.
type DeleteSmppGatewayNotFound struct{}

func (*DeleteSmppGatewayNotFound) deleteSmppGatewayRes() {}

// DeleteSpeechCredentialByAccountNoContent is response for DeleteSpeechCredentialByAccount operation.
type DeleteSpeechCredentialByAccountNoContent struct{}

func (*DeleteSpeechCredentialByAccountNoContent) deleteSpeechCredentialByAccountRes() {}

// DeleteSpeechCredentialByAccountNotFound is response for DeleteSpeechCredentialByAccount operation.
type DeleteSpeechCredentialByAccountNotFound struct{}

func (*DeleteSpeechCredentialByAccountNotFound) deleteSpeechCredentialByAccountRes() {}

// DeleteSpeechCredentialNoContent is response for DeleteSpeechCredential operation.
type DeleteSpeechCredentialNoContent struct{}

func (*DeleteSpeechCredentialNoContent) deleteSpeechCredentialRes() {}

// DeleteSpeechCredentialNotFound is response for DeleteSpeechCredential operation.
type DeleteSpeechCredentialNotFound struct{}

func (*DeleteSpeechCredentialNotFound) deleteSpeechCredentialRes() {}

// DeleteTenantNoContent is response for DeleteTenant operation.
type DeleteTenantNoContent struct{}

func (*DeleteTenantNoContent) deleteTenantRes() {}

// DeleteTenantNotFound is response for DeleteTenant operation.
type DeleteTenantNotFound struct{}

func (*DeleteTenantNotFound) deleteTenantRes() {}

// DeleteUserForbidden is response for DeleteUser operation.
type DeleteUserForbidden struct{}

func (*DeleteUserForbidden) deleteUserRes() {}

// DeleteUserNoContent is response for DeleteUser operation.
type DeleteUserNoContent struct{}

func (*DeleteUserNoContent) deleteUserRes() {}

// DeleteUserNotFound is response for DeleteUser operation.
type DeleteUserNotFound struct{}

func (*DeleteUserNotFound) deleteUserRes() {}

type DeleteVoipCarrierInternalServerError GeneralError

func (*DeleteVoipCarrierInternalServerError) deleteVoipCarrierRes() {}

// DeleteVoipCarrierNoContent is response for DeleteVoipCarrier operation.
type DeleteVoipCarrierNoContent struct{}

func (*DeleteVoipCarrierNoContent) deleteVoipCarrierRes() {}

// DeleteVoipCarrierNotFound is response for DeleteVoipCarrier operation.
type DeleteVoipCarrierNotFound struct{}

func (*DeleteVoipCarrierNotFound) deleteVoipCarrierRes() {}

type DeleteVoipCarrierUnprocessableEntity GeneralError

func (*DeleteVoipCarrierUnprocessableEntity) deleteVoipCarrierRes() {}

type ForgotPasswordBadRequest GeneralError

func (*ForgotPasswordBadRequest) forgotPasswordRes() {}

type ForgotPasswordInternalServerError GeneralError

func (*ForgotPasswordInternalServerError) forgotPasswordRes() {}

// ForgotPasswordNoContent is response for ForgotPassword operation.
type ForgotPasswordNoContent struct{}

func (*ForgotPasswordNoContent) forgotPasswordRes() {}

type ForgotPasswordReq struct {
	Email OptString `json:"email"`
}

// GetEmail returns the value of Email.
func (s *ForgotPasswordReq) GetEmail() OptString {
	return s.Email
}

// SetEmail sets the value of Email.
func (s *ForgotPasswordReq) SetEmail(val OptString) {
	s.Email = val
}

// Ref: #/components/schemas/GeneralError
type GeneralError struct {
	Msg string `json:"msg"`
}

// GetMsg returns the value of Msg.
func (s *GeneralError) GetMsg() string {
	return s.Msg
}

// SetMsg sets the value of Msg.
func (s *GeneralError) SetMsg(val string) {
	s.Msg = val
}

func (*GeneralError) addLimitForAccountRes()                    {}
func (*GeneralError) addLimitForServiceProviderRes()            {}
func (*GeneralError) checkAvailabilityRes()                     {}
func (*GeneralError) createServiceProviderRes()                 {}
func (*GeneralError) createVoipCarrierFromTemplateBySPRes()     {}
func (*GeneralError) createVoipCarrierFromTemplateRes()         {}
func (*GeneralError) deleteSipGatewayRes()                      {}
func (*GeneralError) deleteSmppGatewayRes()                     {}
func (*GeneralError) deleteTenantRes()                          {}
func (*GeneralError) deleteUserRes()                            {}
func (*GeneralError) generateInviteCodeRes()                    {}
func (*GeneralError) getAccountApiKeysRes()                     {}
func (*GeneralError) getAccountLimitsRes()                      {}
func (*GeneralError) getAccountRes()                            {}
func (*GeneralError) getApplicationRes()                        {}
func (*GeneralError) getCallRes()                               {}
func (*GeneralError) getGoogleCustomVoiceRes()                  {}
func (*GeneralError) getLeastCostRoutingCarrierSetEntryRes()    {}
func (*GeneralError) getLeastCostRoutingRes()                   {}
func (*GeneralError) getLeastCostRoutingRouteRes()              {}
func (*GeneralError) getMyDetailsRes()                          {}
func (*GeneralError) getPhoneNumberRes()                        {}
func (*GeneralError) getServiceProviderLimitsRes()              {}
func (*GeneralError) getServiceProviderRes()                    {}
func (*GeneralError) getSipGatewayRes()                         {}
func (*GeneralError) getSmppGatewayRes()                        {}
func (*GeneralError) getStripeCustomerIdRes()                   {}
func (*GeneralError) getTenantRes()                             {}
func (*GeneralError) getTestDataRes()                           {}
func (*GeneralError) getVoipCarrierRes()                        {}
func (*GeneralError) getWebhookRes()                            {}
func (*GeneralError) getWebhookSecretRes()                      {}
func (*GeneralError) listAccountsRes()                          {}
func (*GeneralError) listApplicationsRes()                      {}
func (*GeneralError) listCallsRes()                             {}
func (*GeneralError) listConferencesRes()                       {}
func (*GeneralError) listGoogleCustomVoicesRes()                {}
func (*GeneralError) listLeastCostRoutingCarrierSetEntriesRes() {}
func (*GeneralError) listLeastCostRoutingRoutesRes()            {}
func (*GeneralError) listLeastCostRoutingsRes()                 {}
func (*GeneralError) listMsTeamsTenantsRes()                    {}
func (*GeneralError) listProvisionedPhoneNumbersRes()           {}
func (*GeneralError) listSbcsRes()                              {}
func (*GeneralError) listServiceProvidersRes()                  {}
func (*GeneralError) listSipGatewaysRes()                       {}
func (*GeneralError) listSmppGatewaysRes()                      {}
func (*GeneralError) listSmppsRes()                             {}
func (*GeneralError) listUsersRes()                             {}
func (*GeneralError) listVoipCarriersRes()                      {}
func (*GeneralError) loginRes()                                 {}
func (*GeneralError) loginUserRes()                             {}
func (*GeneralError) logoutUserRes()                            {}
func (*GeneralError) manageSubscriptionRes()                    {}
func (*GeneralError) retrieveInvoiceRes()                       {}
func (*GeneralError) sendActivationCodeRes()                    {}
func (*GeneralError) supportedLanguagesAndVoicesByAccountRes()  {}
func (*GeneralError) supportedLanguagesAndVoicesRes()           {}
func (*GeneralError) testSpeechCredentialByAccountRes()         {}
func (*GeneralError) testSpeechCredentialRes()                  {}
func (*GeneralError) updateSpeechCredentialByAccountRes()       {}
func (*GeneralError) updateSpeechCredentialRes()                {}

type GenerateInviteCodeOK struct {
	Status GenerateInviteCodeOKStatus `json:"status"`
	Added  float64                    `json:"added"`
}

// GetStatus returns the value of Status.
func (s *GenerateInviteCodeOK) GetStatus() GenerateInviteCodeOKStatus {
	return s.Status
}

// GetAdded returns the value of Added.
func (s *GenerateInviteCodeOK) GetAdded() float64 {
	return s.Added
}

// SetStatus sets the value of Status.
func (s *GenerateInviteCodeOK) SetStatus(val GenerateInviteCodeOKStatus) {
	s.Status = val
}

// SetAdded sets the value of Added.
func (s *GenerateInviteCodeOK) SetAdded(val float64) {
	s.Added = val
}

func (*GenerateInviteCodeOK) generateInviteCodeRes() {}

type GenerateInviteCodeOKStatus string

const (
	GenerateInviteCodeOKStatusOk     GenerateInviteCodeOKStatus = "ok"
	GenerateInviteCodeOKStatusFailed GenerateInviteCodeOKStatus = "failed"
)

// AllValues returns all GenerateInviteCodeOKStatus values.
func (GenerateInviteCodeOKStatus) AllValues() []GenerateInviteCodeOKStatus {
	return []GenerateInviteCodeOKStatus{
		GenerateInviteCodeOKStatusOk,
		GenerateInviteCodeOKStatusFailed,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GenerateInviteCodeOKStatus) MarshalText() ([]byte, error) {
	switch s {
	case GenerateInviteCodeOKStatusOk:
		return []byte(s), nil
	case GenerateInviteCodeOKStatusFailed:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GenerateInviteCodeOKStatus) UnmarshalText(data []byte) error {
	switch GenerateInviteCodeOKStatus(data) {
	case GenerateInviteCodeOKStatusOk:
		*s = GenerateInviteCodeOKStatusOk
		return nil
	case GenerateInviteCodeOKStatusFailed:
		*s = GenerateInviteCodeOKStatusFailed
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GenerateInviteCodeReq struct {
	Count OptFloat64 `json:"count"`
}

// GetCount returns the value of Count.
func (s *GenerateInviteCodeReq) GetCount() OptFloat64 {
	return s.Count
}

// SetCount sets the value of Count.
func (s *GenerateInviteCodeReq) SetCount(val OptFloat64) {
	s.Count = val
}

// GetAccountApiKeysNotFound is response for GetAccountApiKeys operation.
type GetAccountApiKeysNotFound struct{}

func (*GetAccountApiKeysNotFound) getAccountApiKeysRes() {}

type GetAccountApiKeysOKApplicationJSON []ApiKey

func (*GetAccountApiKeysOKApplicationJSON) getAccountApiKeysRes() {}

// GetAccountLimitsNotFound is response for GetAccountLimits operation.
type GetAccountLimitsNotFound struct{}

func (*GetAccountLimitsNotFound) getAccountLimitsRes() {}

type GetAccountLimitsOKApplicationJSON []Limits

func (*GetAccountLimitsOKApplicationJSON) getAccountLimitsRes() {}

// GetAccountNotFound is response for GetAccount operation.
type GetAccountNotFound struct{}

func (*GetAccountNotFound) getAccountRes() {}

// GetApplicationNotFound is response for GetApplication operation.
type GetApplicationNotFound struct{}

func (*GetApplicationNotFound) getApplicationRes() {}

// GetCallNotFound is response for GetCall operation.
type GetCallNotFound struct{}

func (*GetCallNotFound) getCallRes() {}

// GetGoogleCustomVoiceNotFound is response for GetGoogleCustomVoice operation.
type GetGoogleCustomVoiceNotFound struct{}

func (*GetGoogleCustomVoiceNotFound) getGoogleCustomVoiceRes() {}

// GetLeastCostRoutingCarrierSetEntryNotFound is response for GetLeastCostRoutingCarrierSetEntry operation.
type GetLeastCostRoutingCarrierSetEntryNotFound struct{}

func (*GetLeastCostRoutingCarrierSetEntryNotFound) getLeastCostRoutingCarrierSetEntryRes() {}

// GetLeastCostRoutingNotFound is response for GetLeastCostRouting operation.
type GetLeastCostRoutingNotFound struct{}

func (*GetLeastCostRoutingNotFound) getLeastCostRoutingRes() {}

// GetLeastCostRoutingRouteNotFound is response for GetLeastCostRoutingRoute operation.
type GetLeastCostRoutingRouteNotFound struct{}

func (*GetLeastCostRoutingRouteNotFound) getLeastCostRoutingRouteRes() {}

// GetPhoneNumberNotFound is response for GetPhoneNumber operation.
type GetPhoneNumberNotFound struct{}

func (*GetPhoneNumberNotFound) getPhoneNumberRes() {}

// GetRecentCallTraceByAccountNotFound is response for GetRecentCallTraceByAccount operation.
type GetRecentCallTraceByAccountNotFound struct{}

func (*GetRecentCallTraceByAccountNotFound) getRecentCallTraceByAccountRes() {}

type GetRecentCallTraceByAccountOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s GetRecentCallTraceByAccountOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*GetRecentCallTraceByAccountOK) getRecentCallTraceByAccountRes() {}

// GetRecentCallTraceByCallIdNotFound is response for GetRecentCallTraceByCallId operation.
type GetRecentCallTraceByCallIdNotFound struct{}

func (*GetRecentCallTraceByCallIdNotFound) getRecentCallTraceByCallIdRes() {}

type GetRecentCallTraceByCallIdOK struct{}

func (*GetRecentCallTraceByCallIdOK) getRecentCallTraceByCallIdRes() {}

// GetRecentCallTraceBySPNotFound is response for GetRecentCallTraceBySP operation.
type GetRecentCallTraceBySPNotFound struct{}

func (*GetRecentCallTraceBySPNotFound) getRecentCallTraceBySPRes() {}

type GetRecentCallTraceBySPOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s GetRecentCallTraceBySPOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*GetRecentCallTraceBySPOK) getRecentCallTraceBySPRes() {}

// GetRecentCallTraceNotFound is response for GetRecentCallTrace operation.
type GetRecentCallTraceNotFound struct{}

func (*GetRecentCallTraceNotFound) getRecentCallTraceRes() {}

type GetRecentCallTraceOK struct{}

func (*GetRecentCallTraceOK) getRecentCallTraceRes() {}

// GetServiceProviderAccountsForbidden is response for GetServiceProviderAccounts operation.
type GetServiceProviderAccountsForbidden struct{}

func (*GetServiceProviderAccountsForbidden) getServiceProviderAccountsRes() {}

// GetServiceProviderAccountsNotFound is response for GetServiceProviderAccounts operation.
type GetServiceProviderAccountsNotFound struct{}

func (*GetServiceProviderAccountsNotFound) getServiceProviderAccountsRes() {}

type GetServiceProviderAccountsOKApplicationJSON []Account

func (*GetServiceProviderAccountsOKApplicationJSON) getServiceProviderAccountsRes() {}

// GetServiceProviderCarriersForbidden is response for GetServiceProviderCarriers operation.
type GetServiceProviderCarriersForbidden struct{}

func (*GetServiceProviderCarriersForbidden) getServiceProviderCarriersRes() {}

// GetServiceProviderCarriersNotFound is response for GetServiceProviderCarriers operation.
type GetServiceProviderCarriersNotFound struct{}

func (*GetServiceProviderCarriersNotFound) getServiceProviderCarriersRes() {}

type GetServiceProviderCarriersOKApplicationJSON []VoipCarrier

func (*GetServiceProviderCarriersOKApplicationJSON) getServiceProviderCarriersRes() {}

// GetServiceProviderLcrsForbidden is response for GetServiceProviderLcrs operation.
type GetServiceProviderLcrsForbidden struct{}

func (*GetServiceProviderLcrsForbidden) getServiceProviderLcrsRes() {}

// GetServiceProviderLcrsNotFound is response for GetServiceProviderLcrs operation.
type GetServiceProviderLcrsNotFound struct{}

func (*GetServiceProviderLcrsNotFound) getServiceProviderLcrsRes() {}

type GetServiceProviderLcrsOKApplicationJSON []Lcr

func (*GetServiceProviderLcrsOKApplicationJSON) getServiceProviderLcrsRes() {}

// GetServiceProviderLimitsNotFound is response for GetServiceProviderLimits operation.
type GetServiceProviderLimitsNotFound struct{}

func (*GetServiceProviderLimitsNotFound) getServiceProviderLimitsRes() {}

type GetServiceProviderLimitsOKApplicationJSON []Limits

func (*GetServiceProviderLimitsOKApplicationJSON) getServiceProviderLimitsRes() {}

// GetServiceProviderNotFound is response for GetServiceProvider operation.
type GetServiceProviderNotFound struct{}

func (*GetServiceProviderNotFound) getServiceProviderRes() {}

// GetSipGatewayNotFound is response for GetSipGateway operation.
type GetSipGatewayNotFound struct{}

func (*GetSipGatewayNotFound) getSipGatewayRes() {}

// GetSmppGatewayNotFound is response for GetSmppGateway operation.
type GetSmppGatewayNotFound struct{}

func (*GetSmppGatewayNotFound) getSmppGatewayRes() {}

// GetSpeechCredentialByAccountNotFound is response for GetSpeechCredentialByAccount operation.
type GetSpeechCredentialByAccountNotFound struct{}

func (*GetSpeechCredentialByAccountNotFound) getSpeechCredentialByAccountRes() {}

// GetSpeechCredentialNotFound is response for GetSpeechCredential operation.
type GetSpeechCredentialNotFound struct{}

func (*GetSpeechCredentialNotFound) getSpeechCredentialRes() {}

type GetStripeCustomerIdOK struct {
	StripeCustomerID string `json:"stripe_customer_id"`
}

// GetStripeCustomerID returns the value of StripeCustomerID.
func (s *GetStripeCustomerIdOK) GetStripeCustomerID() string {
	return s.StripeCustomerID
}

// SetStripeCustomerID sets the value of StripeCustomerID.
func (s *GetStripeCustomerIdOK) SetStripeCustomerID(val string) {
	s.StripeCustomerID = val
}

func (*GetStripeCustomerIdOK) getStripeCustomerIdRes() {}

type GetSubscriptionOK struct{}

// GetTenantNotFound is response for GetTenant operation.
type GetTenantNotFound struct{}

func (*GetTenantNotFound) getTenantRes() {}

// GetTestDataNotFound is response for GetTestData operation.
type GetTestDataNotFound struct{}

func (*GetTestDataNotFound) getTestDataRes() {}

type GetTestDataOK struct {
	Phonenumbers []string      `json:"phonenumbers"`
	Applications []Application `json:"applications"`
}

// GetPhonenumbers returns the value of Phonenumbers.
func (s *GetTestDataOK) GetPhonenumbers() []string {
	return s.Phonenumbers
}

// GetApplications returns the value of Applications.
func (s *GetTestDataOK) GetApplications() []Application {
	return s.Applications
}

// SetPhonenumbers sets the value of Phonenumbers.
func (s *GetTestDataOK) SetPhonenumbers(val []string) {
	s.Phonenumbers = val
}

// SetApplications sets the value of Applications.
func (s *GetTestDataOK) SetApplications(val []Application) {
	s.Applications = val
}

func (*GetTestDataOK) getTestDataRes() {}

type GetUserForbidden GeneralError

func (*GetUserForbidden) getUserRes() {}

type GetUserInternalServerError GeneralError

func (*GetUserInternalServerError) getUserRes() {}

// GetVoipCarrierNotFound is response for GetVoipCarrier operation.
type GetVoipCarrierNotFound struct{}

func (*GetVoipCarrierNotFound) getVoipCarrierRes() {}

// GetWebhookNotFound is response for GetWebhook operation.
type GetWebhookNotFound struct{}

func (*GetWebhookNotFound) getWebhookRes() {}

// GetWebhookSecretNotFound is response for GetWebhookSecret operation.
type GetWebhookSecretNotFound struct{}

func (*GetWebhookSecretNotFound) getWebhookSecretRes() {}

type GetWebhookSecretOK struct {
	WebhookSecret OptString `json:"webhook_secret"`
}

// GetWebhookSecret returns the value of WebhookSecret.
func (s *GetWebhookSecretOK) GetWebhookSecret() OptString {
	return s.WebhookSecret
}

// SetWebhookSecret sets the value of WebhookSecret.
func (s *GetWebhookSecretOK) SetWebhookSecret(val OptString) {
	s.WebhookSecret = val
}

func (*GetWebhookSecretOK) getWebhookSecretRes() {}

// Ref: #/components/schemas/GoogleCustomVoice
type GoogleCustomVoice struct {
	SpeechCredentialSid string `json:"speech_credential_sid"`
	Name                string `json:"name"`
	ReportedUsage       string `json:"reported_usage"`
	Model               string `json:"model"`
}

// GetSpeechCredentialSid returns the value of SpeechCredentialSid.
func (s *GoogleCustomVoice) GetSpeechCredentialSid() string {
	return s.SpeechCredentialSid
}

// GetName returns the value of Name.
func (s *GoogleCustomVoice) GetName() string {
	return s.Name
}

// GetReportedUsage returns the value of ReportedUsage.
func (s *GoogleCustomVoice) GetReportedUsage() string {
	return s.ReportedUsage
}

// GetModel returns the value of Model.
func (s *GoogleCustomVoice) GetModel() string {
	return s.Model
}

// SetSpeechCredentialSid sets the value of SpeechCredentialSid.
func (s *GoogleCustomVoice) SetSpeechCredentialSid(val string) {
	s.SpeechCredentialSid = val
}

// SetName sets the value of Name.
func (s *GoogleCustomVoice) SetName(val string) {
	s.Name = val
}

// SetReportedUsage sets the value of ReportedUsage.
func (s *GoogleCustomVoice) SetReportedUsage(val string) {
	s.ReportedUsage = val
}

// SetModel sets the value of Model.
func (s *GoogleCustomVoice) SetModel(val string) {
	s.Model = val
}

func (*GoogleCustomVoice) getGoogleCustomVoiceRes()    {}
func (*GoogleCustomVoice) updateGoogleCustomVoiceRes() {}

// Ref: #/components/schemas/LanguageVoice
type LanguageVoice struct {
	Name  OptString `json:"name"`
	Value OptString `json:"value"`
}

// GetName returns the value of Name.
func (s *LanguageVoice) GetName() OptString {
	return s.Name
}

// GetValue returns the value of Value.
func (s *LanguageVoice) GetValue() OptString {
	return s.Value
}

// SetName sets the value of Name.
func (s *LanguageVoice) SetName(val OptString) {
	s.Name = val
}

// SetValue sets the value of Value.
func (s *LanguageVoice) SetValue(val OptString) {
	s.Value = val
}

// Ref: #/components/schemas/LanguageVoices
type LanguageVoices struct {
	Name   OptString       `json:"name"`
	Value  OptString       `json:"value"`
	Voices []LanguageVoice `json:"voices"`
}

// GetName returns the value of Name.
func (s *LanguageVoices) GetName() OptString {
	return s.Name
}

// GetValue returns the value of Value.
func (s *LanguageVoices) GetValue() OptString {
	return s.Value
}

// GetVoices returns the value of Voices.
func (s *LanguageVoices) GetVoices() []LanguageVoice {
	return s.Voices
}

// SetName sets the value of Name.
func (s *LanguageVoices) SetName(val OptString) {
	s.Name = val
}

// SetValue sets the value of Value.
func (s *LanguageVoices) SetValue(val OptString) {
	s.Value = val
}

// SetVoices sets the value of Voices.
func (s *LanguageVoices) SetVoices(val []LanguageVoice) {
	s.Voices = val
}

// Ref: #/components/schemas/Lcr
type Lcr struct {
	Name                      string    `json:"name"`
	DefaultCarrierSetEntrySid OptString `json:"default_carrier_set_entry_sid"`
}

// GetName returns the value of Name.
func (s *Lcr) GetName() string {
	return s.Name
}

// GetDefaultCarrierSetEntrySid returns the value of DefaultCarrierSetEntrySid.
func (s *Lcr) GetDefaultCarrierSetEntrySid() OptString {
	return s.DefaultCarrierSetEntrySid
}

// SetName sets the value of Name.
func (s *Lcr) SetName(val string) {
	s.Name = val
}

// SetDefaultCarrierSetEntrySid sets the value of DefaultCarrierSetEntrySid.
func (s *Lcr) SetDefaultCarrierSetEntrySid(val OptString) {
	s.DefaultCarrierSetEntrySid = val
}

func (*Lcr) getLeastCostRoutingRes()    {}
func (*Lcr) updateLeastCostRoutingRes() {}

// Ref: #/components/schemas/LcrCarrierSetEntry
type LcrCarrierSetEntry struct {
	// Traffic distribution value.
	Workload       OptFloat64 `json:"workload"`
	LcrRouteSid    string     `json:"lcr_route_sid"`
	VoipCarrierSid string     `json:"voip_carrier_sid"`
	Priority       float64    `json:"priority"`
}

// GetWorkload returns the value of Workload.
func (s *LcrCarrierSetEntry) GetWorkload() OptFloat64 {
	return s.Workload
}

// GetLcrRouteSid returns the value of LcrRouteSid.
func (s *LcrCarrierSetEntry) GetLcrRouteSid() string {
	return s.LcrRouteSid
}

// GetVoipCarrierSid returns the value of VoipCarrierSid.
func (s *LcrCarrierSetEntry) GetVoipCarrierSid() string {
	return s.VoipCarrierSid
}

// GetPriority returns the value of Priority.
func (s *LcrCarrierSetEntry) GetPriority() float64 {
	return s.Priority
}

// SetWorkload sets the value of Workload.
func (s *LcrCarrierSetEntry) SetWorkload(val OptFloat64) {
	s.Workload = val
}

// SetLcrRouteSid sets the value of LcrRouteSid.
func (s *LcrCarrierSetEntry) SetLcrRouteSid(val string) {
	s.LcrRouteSid = val
}

// SetVoipCarrierSid sets the value of VoipCarrierSid.
func (s *LcrCarrierSetEntry) SetVoipCarrierSid(val string) {
	s.VoipCarrierSid = val
}

// SetPriority sets the value of Priority.
func (s *LcrCarrierSetEntry) SetPriority(val float64) {
	s.Priority = val
}

func (*LcrCarrierSetEntry) getLeastCostRoutingCarrierSetEntryRes()    {}
func (*LcrCarrierSetEntry) updateLeastCostRoutingCarrierSetEntryRes() {}

// Ref: #/components/schemas/LcrRoute
type LcrRoute struct {
	LcrSid string `json:"lcr_sid"`
	// Out going call Phone number regex.
	Regex       string    `json:"regex"`
	Priority    float64   `json:"priority"`
	Description OptString `json:"description"`
}

// GetLcrSid returns the value of LcrSid.
func (s *LcrRoute) GetLcrSid() string {
	return s.LcrSid
}

// GetRegex returns the value of Regex.
func (s *LcrRoute) GetRegex() string {
	return s.Regex
}

// GetPriority returns the value of Priority.
func (s *LcrRoute) GetPriority() float64 {
	return s.Priority
}

// GetDescription returns the value of Description.
func (s *LcrRoute) GetDescription() OptString {
	return s.Description
}

// SetLcrSid sets the value of LcrSid.
func (s *LcrRoute) SetLcrSid(val string) {
	s.LcrSid = val
}

// SetRegex sets the value of Regex.
func (s *LcrRoute) SetRegex(val string) {
	s.Regex = val
}

// SetPriority sets the value of Priority.
func (s *LcrRoute) SetPriority(val float64) {
	s.Priority = val
}

// SetDescription sets the value of Description.
func (s *LcrRoute) SetDescription(val OptString) {
	s.Description = val
}

func (*LcrRoute) getLeastCostRoutingRouteRes()    {}
func (*LcrRoute) updateLeastCostRoutingRouteRes() {}

// Merged schema.
// Ref: #/components/schemas/LcrRouteAndCarrierEntries
type LcrRouteAndCarrierEntries struct {
	LcrSid string `json:"lcr_sid"`
	// Out going call Phone number regex.
	Regex                string               `json:"regex"`
	Priority             float64              `json:"priority"`
	Description          OptString            `json:"description"`
	LcrCarrierSetEntries []LcrCarrierSetEntry `json:"lcr_carrier_set_entries"`
}

// GetLcrSid returns the value of LcrSid.
func (s *LcrRouteAndCarrierEntries) GetLcrSid() string {
	return s.LcrSid
}

// GetRegex returns the value of Regex.
func (s *LcrRouteAndCarrierEntries) GetRegex() string {
	return s.Regex
}

// GetPriority returns the value of Priority.
func (s *LcrRouteAndCarrierEntries) GetPriority() float64 {
	return s.Priority
}

// GetDescription returns the value of Description.
func (s *LcrRouteAndCarrierEntries) GetDescription() OptString {
	return s.Description
}

// GetLcrCarrierSetEntries returns the value of LcrCarrierSetEntries.
func (s *LcrRouteAndCarrierEntries) GetLcrCarrierSetEntries() []LcrCarrierSetEntry {
	return s.LcrCarrierSetEntries
}

// SetLcrSid sets the value of LcrSid.
func (s *LcrRouteAndCarrierEntries) SetLcrSid(val string) {
	s.LcrSid = val
}

// SetRegex sets the value of Regex.
func (s *LcrRouteAndCarrierEntries) SetRegex(val string) {
	s.Regex = val
}

// SetPriority sets the value of Priority.
func (s *LcrRouteAndCarrierEntries) SetPriority(val float64) {
	s.Priority = val
}

// SetDescription sets the value of Description.
func (s *LcrRouteAndCarrierEntries) SetDescription(val OptString) {
	s.Description = val
}

// SetLcrCarrierSetEntries sets the value of LcrCarrierSetEntries.
func (s *LcrRouteAndCarrierEntries) SetLcrCarrierSetEntries(val []LcrCarrierSetEntry) {
	s.LcrCarrierSetEntries = val
}

type LcrRoutes []LcrRouteAndCarrierEntries

// Ref: #/components/schemas/Limits
type Limits struct {
	Category OptLimitsCategory `json:"category"`
}

// GetCategory returns the value of Category.
func (s *Limits) GetCategory() OptLimitsCategory {
	return s.Category
}

// SetCategory sets the value of Category.
func (s *Limits) SetCategory(val OptLimitsCategory) {
	s.Category = val
}

type LimitsCategory string

const (
	LimitsCategoryVoiceCallSession LimitsCategory = "voice_call_session"
	LimitsCategoryAPILimit         LimitsCategory = "api_limit"
	LimitsCategoryDevices          LimitsCategory = "devices"
)

// AllValues returns all LimitsCategory values.
func (LimitsCategory) AllValues() []LimitsCategory {
	return []LimitsCategory{
		LimitsCategoryVoiceCallSession,
		LimitsCategoryAPILimit,
		LimitsCategoryDevices,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s LimitsCategory) MarshalText() ([]byte, error) {
	switch s {
	case LimitsCategoryVoiceCallSession:
		return []byte(s), nil
	case LimitsCategoryAPILimit:
		return []byte(s), nil
	case LimitsCategoryDevices:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *LimitsCategory) UnmarshalText(data []byte) error {
	switch LimitsCategory(data) {
	case LimitsCategoryVoiceCallSession:
		*s = LimitsCategoryVoiceCallSession
		return nil
	case LimitsCategoryAPILimit:
		*s = LimitsCategoryAPILimit
		return nil
	case LimitsCategoryDevices:
		*s = LimitsCategoryDevices
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ListAccountsOKApplicationJSON []Account

func (*ListAccountsOKApplicationJSON) listAccountsRes() {}

type ListAlertsAlertType string

const (
	ListAlertsAlertTypeWebhookFailure           ListAlertsAlertType = "webhook-failure"
	ListAlertsAlertTypeWebhookConnectionFailure ListAlertsAlertType = "webhook-connection-failure"
	ListAlertsAlertTypeWebhookAuthFailure       ListAlertsAlertType = "webhook-auth-failure"
	ListAlertsAlertTypeNoTts                    ListAlertsAlertType = "no-tts"
	ListAlertsAlertTypeNoStt                    ListAlertsAlertType = "no-stt"
	ListAlertsAlertTypeTtsFailure               ListAlertsAlertType = "tts-failure"
	ListAlertsAlertTypeSttFailure               ListAlertsAlertType = "stt-failure"
	ListAlertsAlertTypeNoCarrier                ListAlertsAlertType = "no-carrier"
	ListAlertsAlertTypeCallLimit                ListAlertsAlertType = "call-limit"
	ListAlertsAlertTypeDeviceLimit              ListAlertsAlertType = "device-limit"
	ListAlertsAlertTypeAPILimit                 ListAlertsAlertType = "api-limit"
)

// AllValues returns all ListAlertsAlertType values.
func (ListAlertsAlertType) AllValues() []ListAlertsAlertType {
	return []ListAlertsAlertType{
		ListAlertsAlertTypeWebhookFailure,
		ListAlertsAlertTypeWebhookConnectionFailure,
		ListAlertsAlertTypeWebhookAuthFailure,
		ListAlertsAlertTypeNoTts,
		ListAlertsAlertTypeNoStt,
		ListAlertsAlertTypeTtsFailure,
		ListAlertsAlertTypeSttFailure,
		ListAlertsAlertTypeNoCarrier,
		ListAlertsAlertTypeCallLimit,
		ListAlertsAlertTypeDeviceLimit,
		ListAlertsAlertTypeAPILimit,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ListAlertsAlertType) MarshalText() ([]byte, error) {
	switch s {
	case ListAlertsAlertTypeWebhookFailure:
		return []byte(s), nil
	case ListAlertsAlertTypeWebhookConnectionFailure:
		return []byte(s), nil
	case ListAlertsAlertTypeWebhookAuthFailure:
		return []byte(s), nil
	case ListAlertsAlertTypeNoTts:
		return []byte(s), nil
	case ListAlertsAlertTypeNoStt:
		return []byte(s), nil
	case ListAlertsAlertTypeTtsFailure:
		return []byte(s), nil
	case ListAlertsAlertTypeSttFailure:
		return []byte(s), nil
	case ListAlertsAlertTypeNoCarrier:
		return []byte(s), nil
	case ListAlertsAlertTypeCallLimit:
		return []byte(s), nil
	case ListAlertsAlertTypeDeviceLimit:
		return []byte(s), nil
	case ListAlertsAlertTypeAPILimit:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ListAlertsAlertType) UnmarshalText(data []byte) error {
	switch ListAlertsAlertType(data) {
	case ListAlertsAlertTypeWebhookFailure:
		*s = ListAlertsAlertTypeWebhookFailure
		return nil
	case ListAlertsAlertTypeWebhookConnectionFailure:
		*s = ListAlertsAlertTypeWebhookConnectionFailure
		return nil
	case ListAlertsAlertTypeWebhookAuthFailure:
		*s = ListAlertsAlertTypeWebhookAuthFailure
		return nil
	case ListAlertsAlertTypeNoTts:
		*s = ListAlertsAlertTypeNoTts
		return nil
	case ListAlertsAlertTypeNoStt:
		*s = ListAlertsAlertTypeNoStt
		return nil
	case ListAlertsAlertTypeTtsFailure:
		*s = ListAlertsAlertTypeTtsFailure
		return nil
	case ListAlertsAlertTypeSttFailure:
		*s = ListAlertsAlertTypeSttFailure
		return nil
	case ListAlertsAlertTypeNoCarrier:
		*s = ListAlertsAlertTypeNoCarrier
		return nil
	case ListAlertsAlertTypeCallLimit:
		*s = ListAlertsAlertTypeCallLimit
		return nil
	case ListAlertsAlertTypeDeviceLimit:
		*s = ListAlertsAlertTypeDeviceLimit
		return nil
	case ListAlertsAlertTypeAPILimit:
		*s = ListAlertsAlertTypeAPILimit
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ListAlertsByAccountAlertType string

const (
	ListAlertsByAccountAlertTypeWebhookFailure           ListAlertsByAccountAlertType = "webhook-failure"
	ListAlertsByAccountAlertTypeWebhookConnectionFailure ListAlertsByAccountAlertType = "webhook-connection-failure"
	ListAlertsByAccountAlertTypeWebhookAuthFailure       ListAlertsByAccountAlertType = "webhook-auth-failure"
	ListAlertsByAccountAlertTypeNoTts                    ListAlertsByAccountAlertType = "no-tts"
	ListAlertsByAccountAlertTypeNoStt                    ListAlertsByAccountAlertType = "no-stt"
	ListAlertsByAccountAlertTypeTtsFailure               ListAlertsByAccountAlertType = "tts-failure"
	ListAlertsByAccountAlertTypeSttFailure               ListAlertsByAccountAlertType = "stt-failure"
	ListAlertsByAccountAlertTypeNoCarrier                ListAlertsByAccountAlertType = "no-carrier"
	ListAlertsByAccountAlertTypeCallLimit                ListAlertsByAccountAlertType = "call-limit"
	ListAlertsByAccountAlertTypeDeviceLimit              ListAlertsByAccountAlertType = "device-limit"
	ListAlertsByAccountAlertTypeAPILimit                 ListAlertsByAccountAlertType = "api-limit"
)

// AllValues returns all ListAlertsByAccountAlertType values.
func (ListAlertsByAccountAlertType) AllValues() []ListAlertsByAccountAlertType {
	return []ListAlertsByAccountAlertType{
		ListAlertsByAccountAlertTypeWebhookFailure,
		ListAlertsByAccountAlertTypeWebhookConnectionFailure,
		ListAlertsByAccountAlertTypeWebhookAuthFailure,
		ListAlertsByAccountAlertTypeNoTts,
		ListAlertsByAccountAlertTypeNoStt,
		ListAlertsByAccountAlertTypeTtsFailure,
		ListAlertsByAccountAlertTypeSttFailure,
		ListAlertsByAccountAlertTypeNoCarrier,
		ListAlertsByAccountAlertTypeCallLimit,
		ListAlertsByAccountAlertTypeDeviceLimit,
		ListAlertsByAccountAlertTypeAPILimit,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ListAlertsByAccountAlertType) MarshalText() ([]byte, error) {
	switch s {
	case ListAlertsByAccountAlertTypeWebhookFailure:
		return []byte(s), nil
	case ListAlertsByAccountAlertTypeWebhookConnectionFailure:
		return []byte(s), nil
	case ListAlertsByAccountAlertTypeWebhookAuthFailure:
		return []byte(s), nil
	case ListAlertsByAccountAlertTypeNoTts:
		return []byte(s), nil
	case ListAlertsByAccountAlertTypeNoStt:
		return []byte(s), nil
	case ListAlertsByAccountAlertTypeTtsFailure:
		return []byte(s), nil
	case ListAlertsByAccountAlertTypeSttFailure:
		return []byte(s), nil
	case ListAlertsByAccountAlertTypeNoCarrier:
		return []byte(s), nil
	case ListAlertsByAccountAlertTypeCallLimit:
		return []byte(s), nil
	case ListAlertsByAccountAlertTypeDeviceLimit:
		return []byte(s), nil
	case ListAlertsByAccountAlertTypeAPILimit:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ListAlertsByAccountAlertType) UnmarshalText(data []byte) error {
	switch ListAlertsByAccountAlertType(data) {
	case ListAlertsByAccountAlertTypeWebhookFailure:
		*s = ListAlertsByAccountAlertTypeWebhookFailure
		return nil
	case ListAlertsByAccountAlertTypeWebhookConnectionFailure:
		*s = ListAlertsByAccountAlertTypeWebhookConnectionFailure
		return nil
	case ListAlertsByAccountAlertTypeWebhookAuthFailure:
		*s = ListAlertsByAccountAlertTypeWebhookAuthFailure
		return nil
	case ListAlertsByAccountAlertTypeNoTts:
		*s = ListAlertsByAccountAlertTypeNoTts
		return nil
	case ListAlertsByAccountAlertTypeNoStt:
		*s = ListAlertsByAccountAlertTypeNoStt
		return nil
	case ListAlertsByAccountAlertTypeTtsFailure:
		*s = ListAlertsByAccountAlertTypeTtsFailure
		return nil
	case ListAlertsByAccountAlertTypeSttFailure:
		*s = ListAlertsByAccountAlertTypeSttFailure
		return nil
	case ListAlertsByAccountAlertTypeNoCarrier:
		*s = ListAlertsByAccountAlertTypeNoCarrier
		return nil
	case ListAlertsByAccountAlertTypeCallLimit:
		*s = ListAlertsByAccountAlertTypeCallLimit
		return nil
	case ListAlertsByAccountAlertTypeDeviceLimit:
		*s = ListAlertsByAccountAlertTypeDeviceLimit
		return nil
	case ListAlertsByAccountAlertTypeAPILimit:
		*s = ListAlertsByAccountAlertTypeAPILimit
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// ListAlertsByAccountNotFound is response for ListAlertsByAccount operation.
type ListAlertsByAccountNotFound struct{}

func (*ListAlertsByAccountNotFound) listAlertsByAccountRes() {}

type ListAlertsByAccountOK struct {
	// Total number of records in that database that match the filter criteria.
	Total OptFloat64 `json:"total"`
	// Total number of records returned in this page set.
	Batch OptFloat64 `json:"batch"`
	// Page number that was requested, and is being returned.
	Page OptFloat64                      `json:"page"`
	Data []ListAlertsByAccountOKDataItem `json:"data"`
}

// GetTotal returns the value of Total.
func (s *ListAlertsByAccountOK) GetTotal() OptFloat64 {
	return s.Total
}

// GetBatch returns the value of Batch.
func (s *ListAlertsByAccountOK) GetBatch() OptFloat64 {
	return s.Batch
}

// GetPage returns the value of Page.
func (s *ListAlertsByAccountOK) GetPage() OptFloat64 {
	return s.Page
}

// GetData returns the value of Data.
func (s *ListAlertsByAccountOK) GetData() []ListAlertsByAccountOKDataItem {
	return s.Data
}

// SetTotal sets the value of Total.
func (s *ListAlertsByAccountOK) SetTotal(val OptFloat64) {
	s.Total = val
}

// SetBatch sets the value of Batch.
func (s *ListAlertsByAccountOK) SetBatch(val OptFloat64) {
	s.Batch = val
}

// SetPage sets the value of Page.
func (s *ListAlertsByAccountOK) SetPage(val OptFloat64) {
	s.Page = val
}

// SetData sets the value of Data.
func (s *ListAlertsByAccountOK) SetData(val []ListAlertsByAccountOKDataItem) {
	s.Data = val
}

func (*ListAlertsByAccountOK) listAlertsByAccountRes() {}

type ListAlertsByAccountOKDataItem struct {
	Time       time.Time `json:"time"`
	AccountSid uuid.UUID `json:"account_sid"`
	AlertType  string    `json:"alert_type"`
	Message    string    `json:"message"`
	Detail     OptString `json:"detail"`
}

// GetTime returns the value of Time.
func (s *ListAlertsByAccountOKDataItem) GetTime() time.Time {
	return s.Time
}

// GetAccountSid returns the value of AccountSid.
func (s *ListAlertsByAccountOKDataItem) GetAccountSid() uuid.UUID {
	return s.AccountSid
}

// GetAlertType returns the value of AlertType.
func (s *ListAlertsByAccountOKDataItem) GetAlertType() string {
	return s.AlertType
}

// GetMessage returns the value of Message.
func (s *ListAlertsByAccountOKDataItem) GetMessage() string {
	return s.Message
}

// GetDetail returns the value of Detail.
func (s *ListAlertsByAccountOKDataItem) GetDetail() OptString {
	return s.Detail
}

// SetTime sets the value of Time.
func (s *ListAlertsByAccountOKDataItem) SetTime(val time.Time) {
	s.Time = val
}

// SetAccountSid sets the value of AccountSid.
func (s *ListAlertsByAccountOKDataItem) SetAccountSid(val uuid.UUID) {
	s.AccountSid = val
}

// SetAlertType sets the value of AlertType.
func (s *ListAlertsByAccountOKDataItem) SetAlertType(val string) {
	s.AlertType = val
}

// SetMessage sets the value of Message.
func (s *ListAlertsByAccountOKDataItem) SetMessage(val string) {
	s.Message = val
}

// SetDetail sets the value of Detail.
func (s *ListAlertsByAccountOKDataItem) SetDetail(val OptString) {
	s.Detail = val
}

// ListAlertsNotFound is response for ListAlerts operation.
type ListAlertsNotFound struct{}

func (*ListAlertsNotFound) listAlertsRes() {}

type ListAlertsOK struct {
	// Total number of records in that database that match the filter criteria.
	Total OptFloat64 `json:"total"`
	// Total number of records returned in this page set.
	Batch OptFloat64 `json:"batch"`
	// Page number that was requested, and is being returned.
	Page OptFloat64             `json:"page"`
	Data []ListAlertsOKDataItem `json:"data"`
}

// GetTotal returns the value of Total.
func (s *ListAlertsOK) GetTotal() OptFloat64 {
	return s.Total
}

// GetBatch returns the value of Batch.
func (s *ListAlertsOK) GetBatch() OptFloat64 {
	return s.Batch
}

// GetPage returns the value of Page.
func (s *ListAlertsOK) GetPage() OptFloat64 {
	return s.Page
}

// GetData returns the value of Data.
func (s *ListAlertsOK) GetData() []ListAlertsOKDataItem {
	return s.Data
}

// SetTotal sets the value of Total.
func (s *ListAlertsOK) SetTotal(val OptFloat64) {
	s.Total = val
}

// SetBatch sets the value of Batch.
func (s *ListAlertsOK) SetBatch(val OptFloat64) {
	s.Batch = val
}

// SetPage sets the value of Page.
func (s *ListAlertsOK) SetPage(val OptFloat64) {
	s.Page = val
}

// SetData sets the value of Data.
func (s *ListAlertsOK) SetData(val []ListAlertsOKDataItem) {
	s.Data = val
}

func (*ListAlertsOK) listAlertsRes() {}

type ListAlertsOKDataItem struct {
	Time               time.Time `json:"time"`
	ServiceProviderSid OptUUID   `json:"service_provider_sid"`
	AccountSid         uuid.UUID `json:"account_sid"`
	AlertType          string    `json:"alert_type"`
	Message            string    `json:"message"`
	Detail             OptString `json:"detail"`
}

// GetTime returns the value of Time.
func (s *ListAlertsOKDataItem) GetTime() time.Time {
	return s.Time
}

// GetServiceProviderSid returns the value of ServiceProviderSid.
func (s *ListAlertsOKDataItem) GetServiceProviderSid() OptUUID {
	return s.ServiceProviderSid
}

// GetAccountSid returns the value of AccountSid.
func (s *ListAlertsOKDataItem) GetAccountSid() uuid.UUID {
	return s.AccountSid
}

// GetAlertType returns the value of AlertType.
func (s *ListAlertsOKDataItem) GetAlertType() string {
	return s.AlertType
}

// GetMessage returns the value of Message.
func (s *ListAlertsOKDataItem) GetMessage() string {
	return s.Message
}

// GetDetail returns the value of Detail.
func (s *ListAlertsOKDataItem) GetDetail() OptString {
	return s.Detail
}

// SetTime sets the value of Time.
func (s *ListAlertsOKDataItem) SetTime(val time.Time) {
	s.Time = val
}

// SetServiceProviderSid sets the value of ServiceProviderSid.
func (s *ListAlertsOKDataItem) SetServiceProviderSid(val OptUUID) {
	s.ServiceProviderSid = val
}

// SetAccountSid sets the value of AccountSid.
func (s *ListAlertsOKDataItem) SetAccountSid(val uuid.UUID) {
	s.AccountSid = val
}

// SetAlertType sets the value of AlertType.
func (s *ListAlertsOKDataItem) SetAlertType(val string) {
	s.AlertType = val
}

// SetMessage sets the value of Message.
func (s *ListAlertsOKDataItem) SetMessage(val string) {
	s.Message = val
}

// SetDetail sets the value of Detail.
func (s *ListAlertsOKDataItem) SetDetail(val OptString) {
	s.Detail = val
}

type ListApplicationsOKApplicationJSON []Application

func (*ListApplicationsOKApplicationJSON) listApplicationsRes() {}

type ListCallsCallStatus string

const (
	ListCallsCallStatusTrying     ListCallsCallStatus = "trying"
	ListCallsCallStatusRinging    ListCallsCallStatus = "ringing"
	ListCallsCallStatusEarlyMedia ListCallsCallStatus = "early-media"
	ListCallsCallStatusInProgress ListCallsCallStatus = "in-progress"
	ListCallsCallStatusCompleted  ListCallsCallStatus = "completed"
	ListCallsCallStatusFailed     ListCallsCallStatus = "failed"
	ListCallsCallStatusBusy       ListCallsCallStatus = "busy"
	ListCallsCallStatusNoAnswer   ListCallsCallStatus = "no-answer"
	ListCallsCallStatusQueued     ListCallsCallStatus = "queued"
)

// AllValues returns all ListCallsCallStatus values.
func (ListCallsCallStatus) AllValues() []ListCallsCallStatus {
	return []ListCallsCallStatus{
		ListCallsCallStatusTrying,
		ListCallsCallStatusRinging,
		ListCallsCallStatusEarlyMedia,
		ListCallsCallStatusInProgress,
		ListCallsCallStatusCompleted,
		ListCallsCallStatusFailed,
		ListCallsCallStatusBusy,
		ListCallsCallStatusNoAnswer,
		ListCallsCallStatusQueued,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ListCallsCallStatus) MarshalText() ([]byte, error) {
	switch s {
	case ListCallsCallStatusTrying:
		return []byte(s), nil
	case ListCallsCallStatusRinging:
		return []byte(s), nil
	case ListCallsCallStatusEarlyMedia:
		return []byte(s), nil
	case ListCallsCallStatusInProgress:
		return []byte(s), nil
	case ListCallsCallStatusCompleted:
		return []byte(s), nil
	case ListCallsCallStatusFailed:
		return []byte(s), nil
	case ListCallsCallStatusBusy:
		return []byte(s), nil
	case ListCallsCallStatusNoAnswer:
		return []byte(s), nil
	case ListCallsCallStatusQueued:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ListCallsCallStatus) UnmarshalText(data []byte) error {
	switch ListCallsCallStatus(data) {
	case ListCallsCallStatusTrying:
		*s = ListCallsCallStatusTrying
		return nil
	case ListCallsCallStatusRinging:
		*s = ListCallsCallStatusRinging
		return nil
	case ListCallsCallStatusEarlyMedia:
		*s = ListCallsCallStatusEarlyMedia
		return nil
	case ListCallsCallStatusInProgress:
		*s = ListCallsCallStatusInProgress
		return nil
	case ListCallsCallStatusCompleted:
		*s = ListCallsCallStatusCompleted
		return nil
	case ListCallsCallStatusFailed:
		*s = ListCallsCallStatusFailed
		return nil
	case ListCallsCallStatusBusy:
		*s = ListCallsCallStatusBusy
		return nil
	case ListCallsCallStatusNoAnswer:
		*s = ListCallsCallStatusNoAnswer
		return nil
	case ListCallsCallStatusQueued:
		*s = ListCallsCallStatusQueued
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ListCallsDirection string

const (
	ListCallsDirectionInbound  ListCallsDirection = "inbound"
	ListCallsDirectionOutbound ListCallsDirection = "outbound"
)

// AllValues returns all ListCallsDirection values.
func (ListCallsDirection) AllValues() []ListCallsDirection {
	return []ListCallsDirection{
		ListCallsDirectionInbound,
		ListCallsDirectionOutbound,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ListCallsDirection) MarshalText() ([]byte, error) {
	switch s {
	case ListCallsDirectionInbound:
		return []byte(s), nil
	case ListCallsDirectionOutbound:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ListCallsDirection) UnmarshalText(data []byte) error {
	switch ListCallsDirection(data) {
	case ListCallsDirectionInbound:
		*s = ListCallsDirectionInbound
		return nil
	case ListCallsDirectionOutbound:
		*s = ListCallsDirectionOutbound
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ListCallsOKApplicationJSON []Call

func (*ListCallsOKApplicationJSON) listCallsRes() {}

type ListConferencesOKApplicationJSON []string

func (*ListConferencesOKApplicationJSON) listConferencesRes() {}

type ListGoogleCustomVoicesOKApplicationJSON []GoogleCustomVoice

func (*ListGoogleCustomVoicesOKApplicationJSON) listGoogleCustomVoicesRes() {}

type ListLeastCostRoutingCarrierSetEntriesOKApplicationJSON []LcrCarrierSetEntry

func (*ListLeastCostRoutingCarrierSetEntriesOKApplicationJSON) listLeastCostRoutingCarrierSetEntriesRes() {
}

type ListLeastCostRoutingRoutesOKApplicationJSON []LcrRoute

func (*ListLeastCostRoutingRoutesOKApplicationJSON) listLeastCostRoutingRoutesRes() {}

type ListLeastCostRoutingsOKApplicationJSON []Lcr

func (*ListLeastCostRoutingsOKApplicationJSON) listLeastCostRoutingsRes() {}

type ListMsTeamsTenantsOKApplicationJSON []MsTeamsTenant

func (*ListMsTeamsTenantsOKApplicationJSON) listMsTeamsTenantsRes() {}

type ListProvisionedPhoneNumbersOKApplicationJSON []PhoneNumber

func (*ListProvisionedPhoneNumbersOKApplicationJSON) listProvisionedPhoneNumbersRes() {}

type ListQueuesOKItem struct {
	Name   OptString `json:"name"`
	Length OptString `json:"length"`
}

// GetName returns the value of Name.
func (s *ListQueuesOKItem) GetName() OptString {
	return s.Name
}

// GetLength returns the value of Length.
func (s *ListQueuesOKItem) GetLength() OptString {
	return s.Length
}

// SetName sets the value of Name.
func (s *ListQueuesOKItem) SetName(val OptString) {
	s.Name = val
}

// SetLength sets the value of Length.
func (s *ListQueuesOKItem) SetLength(val OptString) {
	s.Length = val
}

type ListRecentCallsBySPDirection string

const (
	ListRecentCallsBySPDirectionInbound  ListRecentCallsBySPDirection = "inbound"
	ListRecentCallsBySPDirectionOutbound ListRecentCallsBySPDirection = "outbound"
)

// AllValues returns all ListRecentCallsBySPDirection values.
func (ListRecentCallsBySPDirection) AllValues() []ListRecentCallsBySPDirection {
	return []ListRecentCallsBySPDirection{
		ListRecentCallsBySPDirectionInbound,
		ListRecentCallsBySPDirectionOutbound,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ListRecentCallsBySPDirection) MarshalText() ([]byte, error) {
	switch s {
	case ListRecentCallsBySPDirectionInbound:
		return []byte(s), nil
	case ListRecentCallsBySPDirectionOutbound:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ListRecentCallsBySPDirection) UnmarshalText(data []byte) error {
	switch ListRecentCallsBySPDirection(data) {
	case ListRecentCallsBySPDirectionInbound:
		*s = ListRecentCallsBySPDirectionInbound
		return nil
	case ListRecentCallsBySPDirectionOutbound:
		*s = ListRecentCallsBySPDirectionOutbound
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// ListRecentCallsBySPNotFound is response for ListRecentCallsBySP operation.
type ListRecentCallsBySPNotFound struct{}

func (*ListRecentCallsBySPNotFound) listRecentCallsBySPRes() {}

type ListRecentCallsBySPOK struct {
	// Total number of records in that database that match the filter criteria.
	Total OptFloat64 `json:"total"`
	// Total number of records returned in this page set.
	Batch OptFloat64 `json:"batch"`
	// Page number that was requested, and is being returned.
	Page OptFloat64                      `json:"page"`
	Data []ListRecentCallsBySPOKDataItem `json:"data"`
}

// GetTotal returns the value of Total.
func (s *ListRecentCallsBySPOK) GetTotal() OptFloat64 {
	return s.Total
}

// GetBatch returns the value of Batch.
func (s *ListRecentCallsBySPOK) GetBatch() OptFloat64 {
	return s.Batch
}

// GetPage returns the value of Page.
func (s *ListRecentCallsBySPOK) GetPage() OptFloat64 {
	return s.Page
}

// GetData returns the value of Data.
func (s *ListRecentCallsBySPOK) GetData() []ListRecentCallsBySPOKDataItem {
	return s.Data
}

// SetTotal sets the value of Total.
func (s *ListRecentCallsBySPOK) SetTotal(val OptFloat64) {
	s.Total = val
}

// SetBatch sets the value of Batch.
func (s *ListRecentCallsBySPOK) SetBatch(val OptFloat64) {
	s.Batch = val
}

// SetPage sets the value of Page.
func (s *ListRecentCallsBySPOK) SetPage(val OptFloat64) {
	s.Page = val
}

// SetData sets the value of Data.
func (s *ListRecentCallsBySPOK) SetData(val []ListRecentCallsBySPOKDataItem) {
	s.Data = val
}

func (*ListRecentCallsBySPOK) listRecentCallsBySPRes() {}

type ListRecentCallsBySPOKDataItem struct {
	ServiceProviderSid OptUUID                                `json:"service_provider_sid"`
	AccountSid         uuid.UUID                              `json:"account_sid"`
	CallSid            uuid.UUID                              `json:"call_sid"`
	From               string                                 `json:"from"`
	To                 string                                 `json:"to"`
	Answered           bool                                   `json:"answered"`
	SipCallID          OptString                              `json:"sip_call_id"`
	SipStatus          float64                                `json:"sip_status"`
	Duration           float64                                `json:"duration"`
	AttemptedAt        float64                                `json:"attempted_at"`
	AnsweredAt         OptFloat64                             `json:"answered_at"`
	TerminatedAt       float64                                `json:"terminated_at"`
	TerminationReason  OptString                              `json:"termination_reason"`
	Host               OptString                              `json:"host"`
	RemoteHost         OptString                              `json:"remote_host"`
	Direction          ListRecentCallsBySPOKDataItemDirection `json:"direction"`
	Trunk              OptString                              `json:"trunk"`
}

// GetServiceProviderSid returns the value of ServiceProviderSid.
func (s *ListRecentCallsBySPOKDataItem) GetServiceProviderSid() OptUUID {
	return s.ServiceProviderSid
}

// GetAccountSid returns the value of AccountSid.
func (s *ListRecentCallsBySPOKDataItem) GetAccountSid() uuid.UUID {
	return s.AccountSid
}

// GetCallSid returns the value of CallSid.
func (s *ListRecentCallsBySPOKDataItem) GetCallSid() uuid.UUID {
	return s.CallSid
}

// GetFrom returns the value of From.
func (s *ListRecentCallsBySPOKDataItem) GetFrom() string {
	return s.From
}

// GetTo returns the value of To.
func (s *ListRecentCallsBySPOKDataItem) GetTo() string {
	return s.To
}

// GetAnswered returns the value of Answered.
func (s *ListRecentCallsBySPOKDataItem) GetAnswered() bool {
	return s.Answered
}

// GetSipCallID returns the value of SipCallID.
func (s *ListRecentCallsBySPOKDataItem) GetSipCallID() OptString {
	return s.SipCallID
}

// GetSipStatus returns the value of SipStatus.
func (s *ListRecentCallsBySPOKDataItem) GetSipStatus() float64 {
	return s.SipStatus
}

// GetDuration returns the value of Duration.
func (s *ListRecentCallsBySPOKDataItem) GetDuration() float64 {
	return s.Duration
}

// GetAttemptedAt returns the value of AttemptedAt.
func (s *ListRecentCallsBySPOKDataItem) GetAttemptedAt() float64 {
	return s.AttemptedAt
}

// GetAnsweredAt returns the value of AnsweredAt.
func (s *ListRecentCallsBySPOKDataItem) GetAnsweredAt() OptFloat64 {
	return s.AnsweredAt
}

// GetTerminatedAt returns the value of TerminatedAt.
func (s *ListRecentCallsBySPOKDataItem) GetTerminatedAt() float64 {
	return s.TerminatedAt
}

// GetTerminationReason returns the value of TerminationReason.
func (s *ListRecentCallsBySPOKDataItem) GetTerminationReason() OptString {
	return s.TerminationReason
}

// GetHost returns the value of Host.
func (s *ListRecentCallsBySPOKDataItem) GetHost() OptString {
	return s.Host
}

// GetRemoteHost returns the value of RemoteHost.
func (s *ListRecentCallsBySPOKDataItem) GetRemoteHost() OptString {
	return s.RemoteHost
}

// GetDirection returns the value of Direction.
func (s *ListRecentCallsBySPOKDataItem) GetDirection() ListRecentCallsBySPOKDataItemDirection {
	return s.Direction
}

// GetTrunk returns the value of Trunk.
func (s *ListRecentCallsBySPOKDataItem) GetTrunk() OptString {
	return s.Trunk
}

// SetServiceProviderSid sets the value of ServiceProviderSid.
func (s *ListRecentCallsBySPOKDataItem) SetServiceProviderSid(val OptUUID) {
	s.ServiceProviderSid = val
}

// SetAccountSid sets the value of AccountSid.
func (s *ListRecentCallsBySPOKDataItem) SetAccountSid(val uuid.UUID) {
	s.AccountSid = val
}

// SetCallSid sets the value of CallSid.
func (s *ListRecentCallsBySPOKDataItem) SetCallSid(val uuid.UUID) {
	s.CallSid = val
}

// SetFrom sets the value of From.
func (s *ListRecentCallsBySPOKDataItem) SetFrom(val string) {
	s.From = val
}

// SetTo sets the value of To.
func (s *ListRecentCallsBySPOKDataItem) SetTo(val string) {
	s.To = val
}

// SetAnswered sets the value of Answered.
func (s *ListRecentCallsBySPOKDataItem) SetAnswered(val bool) {
	s.Answered = val
}

// SetSipCallID sets the value of SipCallID.
func (s *ListRecentCallsBySPOKDataItem) SetSipCallID(val OptString) {
	s.SipCallID = val
}

// SetSipStatus sets the value of SipStatus.
func (s *ListRecentCallsBySPOKDataItem) SetSipStatus(val float64) {
	s.SipStatus = val
}

// SetDuration sets the value of Duration.
func (s *ListRecentCallsBySPOKDataItem) SetDuration(val float64) {
	s.Duration = val
}

// SetAttemptedAt sets the value of AttemptedAt.
func (s *ListRecentCallsBySPOKDataItem) SetAttemptedAt(val float64) {
	s.AttemptedAt = val
}

// SetAnsweredAt sets the value of AnsweredAt.
func (s *ListRecentCallsBySPOKDataItem) SetAnsweredAt(val OptFloat64) {
	s.AnsweredAt = val
}

// SetTerminatedAt sets the value of TerminatedAt.
func (s *ListRecentCallsBySPOKDataItem) SetTerminatedAt(val float64) {
	s.TerminatedAt = val
}

// SetTerminationReason sets the value of TerminationReason.
func (s *ListRecentCallsBySPOKDataItem) SetTerminationReason(val OptString) {
	s.TerminationReason = val
}

// SetHost sets the value of Host.
func (s *ListRecentCallsBySPOKDataItem) SetHost(val OptString) {
	s.Host = val
}

// SetRemoteHost sets the value of RemoteHost.
func (s *ListRecentCallsBySPOKDataItem) SetRemoteHost(val OptString) {
	s.RemoteHost = val
}

// SetDirection sets the value of Direction.
func (s *ListRecentCallsBySPOKDataItem) SetDirection(val ListRecentCallsBySPOKDataItemDirection) {
	s.Direction = val
}

// SetTrunk sets the value of Trunk.
func (s *ListRecentCallsBySPOKDataItem) SetTrunk(val OptString) {
	s.Trunk = val
}

type ListRecentCallsBySPOKDataItemDirection string

const (
	ListRecentCallsBySPOKDataItemDirectionInbound  ListRecentCallsBySPOKDataItemDirection = "inbound"
	ListRecentCallsBySPOKDataItemDirectionOutbound ListRecentCallsBySPOKDataItemDirection = "outbound"
)

// AllValues returns all ListRecentCallsBySPOKDataItemDirection values.
func (ListRecentCallsBySPOKDataItemDirection) AllValues() []ListRecentCallsBySPOKDataItemDirection {
	return []ListRecentCallsBySPOKDataItemDirection{
		ListRecentCallsBySPOKDataItemDirectionInbound,
		ListRecentCallsBySPOKDataItemDirectionOutbound,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ListRecentCallsBySPOKDataItemDirection) MarshalText() ([]byte, error) {
	switch s {
	case ListRecentCallsBySPOKDataItemDirectionInbound:
		return []byte(s), nil
	case ListRecentCallsBySPOKDataItemDirectionOutbound:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ListRecentCallsBySPOKDataItemDirection) UnmarshalText(data []byte) error {
	switch ListRecentCallsBySPOKDataItemDirection(data) {
	case ListRecentCallsBySPOKDataItemDirectionInbound:
		*s = ListRecentCallsBySPOKDataItemDirectionInbound
		return nil
	case ListRecentCallsBySPOKDataItemDirectionOutbound:
		*s = ListRecentCallsBySPOKDataItemDirectionOutbound
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ListRecentCallsDirection string

const (
	ListRecentCallsDirectionInbound  ListRecentCallsDirection = "inbound"
	ListRecentCallsDirectionOutbound ListRecentCallsDirection = "outbound"
)

// AllValues returns all ListRecentCallsDirection values.
func (ListRecentCallsDirection) AllValues() []ListRecentCallsDirection {
	return []ListRecentCallsDirection{
		ListRecentCallsDirectionInbound,
		ListRecentCallsDirectionOutbound,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ListRecentCallsDirection) MarshalText() ([]byte, error) {
	switch s {
	case ListRecentCallsDirectionInbound:
		return []byte(s), nil
	case ListRecentCallsDirectionOutbound:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ListRecentCallsDirection) UnmarshalText(data []byte) error {
	switch ListRecentCallsDirection(data) {
	case ListRecentCallsDirectionInbound:
		*s = ListRecentCallsDirectionInbound
		return nil
	case ListRecentCallsDirectionOutbound:
		*s = ListRecentCallsDirectionOutbound
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// ListRecentCallsNotFound is response for ListRecentCalls operation.
type ListRecentCallsNotFound struct{}

func (*ListRecentCallsNotFound) listRecentCallsRes() {}

type ListRecentCallsOK struct {
	// Total number of records in that database that match the filter criteria.
	Total OptFloat64 `json:"total"`
	// Total number of records returned in this page set.
	Batch OptFloat64 `json:"batch"`
	// Page number that was requested, and is being returned.
	Page OptFloat64                  `json:"page"`
	Data []ListRecentCallsOKDataItem `json:"data"`
}

// GetTotal returns the value of Total.
func (s *ListRecentCallsOK) GetTotal() OptFloat64 {
	return s.Total
}

// GetBatch returns the value of Batch.
func (s *ListRecentCallsOK) GetBatch() OptFloat64 {
	return s.Batch
}

// GetPage returns the value of Page.
func (s *ListRecentCallsOK) GetPage() OptFloat64 {
	return s.Page
}

// GetData returns the value of Data.
func (s *ListRecentCallsOK) GetData() []ListRecentCallsOKDataItem {
	return s.Data
}

// SetTotal sets the value of Total.
func (s *ListRecentCallsOK) SetTotal(val OptFloat64) {
	s.Total = val
}

// SetBatch sets the value of Batch.
func (s *ListRecentCallsOK) SetBatch(val OptFloat64) {
	s.Batch = val
}

// SetPage sets the value of Page.
func (s *ListRecentCallsOK) SetPage(val OptFloat64) {
	s.Page = val
}

// SetData sets the value of Data.
func (s *ListRecentCallsOK) SetData(val []ListRecentCallsOKDataItem) {
	s.Data = val
}

func (*ListRecentCallsOK) listRecentCallsRes() {}

type ListRecentCallsOKDataItem struct {
	AccountSid        uuid.UUID                          `json:"account_sid"`
	CallSid           uuid.UUID                          `json:"call_sid"`
	From              string                             `json:"from"`
	To                string                             `json:"to"`
	Answered          bool                               `json:"answered"`
	SipCallID         OptString                          `json:"sip_call_id"`
	SipStatus         float64                            `json:"sip_status"`
	Duration          float64                            `json:"duration"`
	AttemptedAt       float64                            `json:"attempted_at"`
	AnsweredAt        OptFloat64                         `json:"answered_at"`
	TerminatedAt      float64                            `json:"terminated_at"`
	TerminationReason OptString                          `json:"termination_reason"`
	Host              OptString                          `json:"host"`
	RemoteHost        OptString                          `json:"remote_host"`
	Direction         ListRecentCallsOKDataItemDirection `json:"direction"`
	Trunk             OptString                          `json:"trunk"`
}

// GetAccountSid returns the value of AccountSid.
func (s *ListRecentCallsOKDataItem) GetAccountSid() uuid.UUID {
	return s.AccountSid
}

// GetCallSid returns the value of CallSid.
func (s *ListRecentCallsOKDataItem) GetCallSid() uuid.UUID {
	return s.CallSid
}

// GetFrom returns the value of From.
func (s *ListRecentCallsOKDataItem) GetFrom() string {
	return s.From
}

// GetTo returns the value of To.
func (s *ListRecentCallsOKDataItem) GetTo() string {
	return s.To
}

// GetAnswered returns the value of Answered.
func (s *ListRecentCallsOKDataItem) GetAnswered() bool {
	return s.Answered
}

// GetSipCallID returns the value of SipCallID.
func (s *ListRecentCallsOKDataItem) GetSipCallID() OptString {
	return s.SipCallID
}

// GetSipStatus returns the value of SipStatus.
func (s *ListRecentCallsOKDataItem) GetSipStatus() float64 {
	return s.SipStatus
}

// GetDuration returns the value of Duration.
func (s *ListRecentCallsOKDataItem) GetDuration() float64 {
	return s.Duration
}

// GetAttemptedAt returns the value of AttemptedAt.
func (s *ListRecentCallsOKDataItem) GetAttemptedAt() float64 {
	return s.AttemptedAt
}

// GetAnsweredAt returns the value of AnsweredAt.
func (s *ListRecentCallsOKDataItem) GetAnsweredAt() OptFloat64 {
	return s.AnsweredAt
}

// GetTerminatedAt returns the value of TerminatedAt.
func (s *ListRecentCallsOKDataItem) GetTerminatedAt() float64 {
	return s.TerminatedAt
}

// GetTerminationReason returns the value of TerminationReason.
func (s *ListRecentCallsOKDataItem) GetTerminationReason() OptString {
	return s.TerminationReason
}

// GetHost returns the value of Host.
func (s *ListRecentCallsOKDataItem) GetHost() OptString {
	return s.Host
}

// GetRemoteHost returns the value of RemoteHost.
func (s *ListRecentCallsOKDataItem) GetRemoteHost() OptString {
	return s.RemoteHost
}

// GetDirection returns the value of Direction.
func (s *ListRecentCallsOKDataItem) GetDirection() ListRecentCallsOKDataItemDirection {
	return s.Direction
}

// GetTrunk returns the value of Trunk.
func (s *ListRecentCallsOKDataItem) GetTrunk() OptString {
	return s.Trunk
}

// SetAccountSid sets the value of AccountSid.
func (s *ListRecentCallsOKDataItem) SetAccountSid(val uuid.UUID) {
	s.AccountSid = val
}

// SetCallSid sets the value of CallSid.
func (s *ListRecentCallsOKDataItem) SetCallSid(val uuid.UUID) {
	s.CallSid = val
}

// SetFrom sets the value of From.
func (s *ListRecentCallsOKDataItem) SetFrom(val string) {
	s.From = val
}

// SetTo sets the value of To.
func (s *ListRecentCallsOKDataItem) SetTo(val string) {
	s.To = val
}

// SetAnswered sets the value of Answered.
func (s *ListRecentCallsOKDataItem) SetAnswered(val bool) {
	s.Answered = val
}

// SetSipCallID sets the value of SipCallID.
func (s *ListRecentCallsOKDataItem) SetSipCallID(val OptString) {
	s.SipCallID = val
}

// SetSipStatus sets the value of SipStatus.
func (s *ListRecentCallsOKDataItem) SetSipStatus(val float64) {
	s.SipStatus = val
}

// SetDuration sets the value of Duration.
func (s *ListRecentCallsOKDataItem) SetDuration(val float64) {
	s.Duration = val
}

// SetAttemptedAt sets the value of AttemptedAt.
func (s *ListRecentCallsOKDataItem) SetAttemptedAt(val float64) {
	s.AttemptedAt = val
}

// SetAnsweredAt sets the value of AnsweredAt.
func (s *ListRecentCallsOKDataItem) SetAnsweredAt(val OptFloat64) {
	s.AnsweredAt = val
}

// SetTerminatedAt sets the value of TerminatedAt.
func (s *ListRecentCallsOKDataItem) SetTerminatedAt(val float64) {
	s.TerminatedAt = val
}

// SetTerminationReason sets the value of TerminationReason.
func (s *ListRecentCallsOKDataItem) SetTerminationReason(val OptString) {
	s.TerminationReason = val
}

// SetHost sets the value of Host.
func (s *ListRecentCallsOKDataItem) SetHost(val OptString) {
	s.Host = val
}

// SetRemoteHost sets the value of RemoteHost.
func (s *ListRecentCallsOKDataItem) SetRemoteHost(val OptString) {
	s.RemoteHost = val
}

// SetDirection sets the value of Direction.
func (s *ListRecentCallsOKDataItem) SetDirection(val ListRecentCallsOKDataItemDirection) {
	s.Direction = val
}

// SetTrunk sets the value of Trunk.
func (s *ListRecentCallsOKDataItem) SetTrunk(val OptString) {
	s.Trunk = val
}

type ListRecentCallsOKDataItemDirection string

const (
	ListRecentCallsOKDataItemDirectionInbound  ListRecentCallsOKDataItemDirection = "inbound"
	ListRecentCallsOKDataItemDirectionOutbound ListRecentCallsOKDataItemDirection = "outbound"
)

// AllValues returns all ListRecentCallsOKDataItemDirection values.
func (ListRecentCallsOKDataItemDirection) AllValues() []ListRecentCallsOKDataItemDirection {
	return []ListRecentCallsOKDataItemDirection{
		ListRecentCallsOKDataItemDirectionInbound,
		ListRecentCallsOKDataItemDirectionOutbound,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ListRecentCallsOKDataItemDirection) MarshalText() ([]byte, error) {
	switch s {
	case ListRecentCallsOKDataItemDirectionInbound:
		return []byte(s), nil
	case ListRecentCallsOKDataItemDirectionOutbound:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ListRecentCallsOKDataItemDirection) UnmarshalText(data []byte) error {
	switch ListRecentCallsOKDataItemDirection(data) {
	case ListRecentCallsOKDataItemDirectionInbound:
		*s = ListRecentCallsOKDataItemDirectionInbound
		return nil
	case ListRecentCallsOKDataItemDirectionOutbound:
		*s = ListRecentCallsOKDataItemDirectionOutbound
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ListSbcsOKApplicationJSON []ListSbcsOKItem

func (*ListSbcsOKApplicationJSON) listSbcsRes() {}

type ListSbcsOKItem struct {
	// Ip address of one of our Sbcs.
	Ipv4 string `json:"ipv4"`
}

// GetIpv4 returns the value of Ipv4.
func (s *ListSbcsOKItem) GetIpv4() string {
	return s.Ipv4
}

// SetIpv4 sets the value of Ipv4.
func (s *ListSbcsOKItem) SetIpv4(val string) {
	s.Ipv4 = val
}

type ListServiceProvidersOKApplicationJSON []ServiceProvider

func (*ListServiceProvidersOKApplicationJSON) listServiceProvidersRes() {}

type ListSipGatewaysOKApplicationJSON []SipGateway

func (*ListSipGatewaysOKApplicationJSON) listSipGatewaysRes() {}

type ListSmppGatewaysOKApplicationJSON []SmppGateway

func (*ListSmppGatewaysOKApplicationJSON) listSmppGatewaysRes() {}

type ListSmppsOKApplicationJSON []ListSmppsOKItem

func (*ListSmppsOKApplicationJSON) listSmppsRes() {}

type ListSmppsOKItem struct {
	// Ip address of one of our Sbcs.
	Ipv4      string  `json:"ipv4"`
	Port      float64 `json:"port"`
	UseTLS    bool    `json:"use_tls"`
	IsPrimary bool    `json:"is_primary"`
}

// GetIpv4 returns the value of Ipv4.
func (s *ListSmppsOKItem) GetIpv4() string {
	return s.Ipv4
}

// GetPort returns the value of Port.
func (s *ListSmppsOKItem) GetPort() float64 {
	return s.Port
}

// GetUseTLS returns the value of UseTLS.
func (s *ListSmppsOKItem) GetUseTLS() bool {
	return s.UseTLS
}

// GetIsPrimary returns the value of IsPrimary.
func (s *ListSmppsOKItem) GetIsPrimary() bool {
	return s.IsPrimary
}

// SetIpv4 sets the value of Ipv4.
func (s *ListSmppsOKItem) SetIpv4(val string) {
	s.Ipv4 = val
}

// SetPort sets the value of Port.
func (s *ListSmppsOKItem) SetPort(val float64) {
	s.Port = val
}

// SetUseTLS sets the value of UseTLS.
func (s *ListSmppsOKItem) SetUseTLS(val bool) {
	s.UseTLS = val
}

// SetIsPrimary sets the value of IsPrimary.
func (s *ListSmppsOKItem) SetIsPrimary(val bool) {
	s.IsPrimary = val
}

// ListSpeechCredentialsNotFound is response for ListSpeechCredentials operation.
type ListSpeechCredentialsNotFound struct{}

func (*ListSpeechCredentialsNotFound) listSpeechCredentialsRes() {}

type ListSpeechCredentialsOKApplicationJSON []SpeechCredential

func (*ListSpeechCredentialsOKApplicationJSON) listSpeechCredentialsRes() {}

// ListUsersForbidden is response for ListUsers operation.
type ListUsersForbidden struct{}

func (*ListUsersForbidden) listUsersRes() {}

type ListUsersOKApplicationJSON []UserList

func (*ListUsersOKApplicationJSON) listUsersRes() {}

type ListVoipCarriersOKApplicationJSON []VoipCarrier

func (*ListVoipCarriersOKApplicationJSON) listVoipCarriersRes() {}

// Ref: #/components/schemas/Login
type Login struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

// GetUsername returns the value of Username.
func (s *Login) GetUsername() string {
	return s.Username
}

// GetPassword returns the value of Password.
func (s *Login) GetPassword() string {
	return s.Password
}

// SetUsername sets the value of Username.
func (s *Login) SetUsername(val string) {
	s.Username = val
}

// SetPassword sets the value of Password.
func (s *Login) SetPassword(val string) {
	s.Password = val
}

// LoginUserForbidden is response for LoginUser operation.
type LoginUserForbidden struct{}

func (*LoginUserForbidden) loginUserRes() {}

// LoginUserNotFound is response for LoginUser operation.
type LoginUserNotFound struct{}

func (*LoginUserNotFound) loginUserRes() {}

type LoginUserReq struct {
	Email    OptString `json:"email"`
	Password OptString `json:"password"`
}

// GetEmail returns the value of Email.
func (s *LoginUserReq) GetEmail() OptString {
	return s.Email
}

// GetPassword returns the value of Password.
func (s *LoginUserReq) GetPassword() OptString {
	return s.Password
}

// SetEmail sets the value of Email.
func (s *LoginUserReq) SetEmail(val OptString) {
	s.Email = val
}

// SetPassword sets the value of Password.
func (s *LoginUserReq) SetPassword(val OptString) {
	s.Password = val
}

// LogoutUserNoContent is response for LogoutUser operation.
type LogoutUserNoContent struct{}

func (*LogoutUserNoContent) logoutUserRes() {}

// ManageSubscriptionBadRequest is response for ManageSubscription operation.
type ManageSubscriptionBadRequest struct{}

func (*ManageSubscriptionBadRequest) manageSubscriptionRes() {}

type ManageSubscriptionCreated struct {
	Status       ManageSubscriptionCreatedStatus `json:"status"`
	CustomerID   string                          `json:"customer_id"`
	ClientSecret OptString                       `json:"client_secret"`
}

// GetStatus returns the value of Status.
func (s *ManageSubscriptionCreated) GetStatus() ManageSubscriptionCreatedStatus {
	return s.Status
}

// GetCustomerID returns the value of CustomerID.
func (s *ManageSubscriptionCreated) GetCustomerID() string {
	return s.CustomerID
}

// GetClientSecret returns the value of ClientSecret.
func (s *ManageSubscriptionCreated) GetClientSecret() OptString {
	return s.ClientSecret
}

// SetStatus sets the value of Status.
func (s *ManageSubscriptionCreated) SetStatus(val ManageSubscriptionCreatedStatus) {
	s.Status = val
}

// SetCustomerID sets the value of CustomerID.
func (s *ManageSubscriptionCreated) SetCustomerID(val string) {
	s.CustomerID = val
}

// SetClientSecret sets the value of ClientSecret.
func (s *ManageSubscriptionCreated) SetClientSecret(val OptString) {
	s.ClientSecret = val
}

func (*ManageSubscriptionCreated) manageSubscriptionRes() {}

type ManageSubscriptionCreatedStatus string

const (
	ManageSubscriptionCreatedStatusSuccess        ManageSubscriptionCreatedStatus = "success"
	ManageSubscriptionCreatedStatusCardError      ManageSubscriptionCreatedStatus = "card error"
	ManageSubscriptionCreatedStatusActionRequired ManageSubscriptionCreatedStatus = "action required"
)

// AllValues returns all ManageSubscriptionCreatedStatus values.
func (ManageSubscriptionCreatedStatus) AllValues() []ManageSubscriptionCreatedStatus {
	return []ManageSubscriptionCreatedStatus{
		ManageSubscriptionCreatedStatusSuccess,
		ManageSubscriptionCreatedStatusCardError,
		ManageSubscriptionCreatedStatusActionRequired,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ManageSubscriptionCreatedStatus) MarshalText() ([]byte, error) {
	switch s {
	case ManageSubscriptionCreatedStatusSuccess:
		return []byte(s), nil
	case ManageSubscriptionCreatedStatusCardError:
		return []byte(s), nil
	case ManageSubscriptionCreatedStatusActionRequired:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ManageSubscriptionCreatedStatus) UnmarshalText(data []byte) error {
	switch ManageSubscriptionCreatedStatus(data) {
	case ManageSubscriptionCreatedStatusSuccess:
		*s = ManageSubscriptionCreatedStatusSuccess
		return nil
	case ManageSubscriptionCreatedStatusCardError:
		*s = ManageSubscriptionCreatedStatusCardError
		return nil
	case ManageSubscriptionCreatedStatusActionRequired:
		*s = ManageSubscriptionCreatedStatusActionRequired
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ManageSubscriptionReq struct {
	Action          ManageSubscriptionReqAction         `json:"action"`
	PaymentMethodID OptString                           `json:"payment_method_id"`
	DryRun          OptBool                             `json:"dry_run"`
	Products        []ManageSubscriptionReqProductsItem `json:"products"`
}

// GetAction returns the value of Action.
func (s *ManageSubscriptionReq) GetAction() ManageSubscriptionReqAction {
	return s.Action
}

// GetPaymentMethodID returns the value of PaymentMethodID.
func (s *ManageSubscriptionReq) GetPaymentMethodID() OptString {
	return s.PaymentMethodID
}

// GetDryRun returns the value of DryRun.
func (s *ManageSubscriptionReq) GetDryRun() OptBool {
	return s.DryRun
}

// GetProducts returns the value of Products.
func (s *ManageSubscriptionReq) GetProducts() []ManageSubscriptionReqProductsItem {
	return s.Products
}

// SetAction sets the value of Action.
func (s *ManageSubscriptionReq) SetAction(val ManageSubscriptionReqAction) {
	s.Action = val
}

// SetPaymentMethodID sets the value of PaymentMethodID.
func (s *ManageSubscriptionReq) SetPaymentMethodID(val OptString) {
	s.PaymentMethodID = val
}

// SetDryRun sets the value of DryRun.
func (s *ManageSubscriptionReq) SetDryRun(val OptBool) {
	s.DryRun = val
}

// SetProducts sets the value of Products.
func (s *ManageSubscriptionReq) SetProducts(val []ManageSubscriptionReqProductsItem) {
	s.Products = val
}

type ManageSubscriptionReqAction string

const (
	ManageSubscriptionReqActionUpgradeToPaid       ManageSubscriptionReqAction = "upgrade-to-paid"
	ManageSubscriptionReqActionDowngradeToFree     ManageSubscriptionReqAction = "downgrade-to-free"
	ManageSubscriptionReqActionUpdatePaymentMethod ManageSubscriptionReqAction = "update-payment-method"
	ManageSubscriptionReqActionUpdateQuantities    ManageSubscriptionReqAction = "update-quantities"
)

// AllValues returns all ManageSubscriptionReqAction values.
func (ManageSubscriptionReqAction) AllValues() []ManageSubscriptionReqAction {
	return []ManageSubscriptionReqAction{
		ManageSubscriptionReqActionUpgradeToPaid,
		ManageSubscriptionReqActionDowngradeToFree,
		ManageSubscriptionReqActionUpdatePaymentMethod,
		ManageSubscriptionReqActionUpdateQuantities,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ManageSubscriptionReqAction) MarshalText() ([]byte, error) {
	switch s {
	case ManageSubscriptionReqActionUpgradeToPaid:
		return []byte(s), nil
	case ManageSubscriptionReqActionDowngradeToFree:
		return []byte(s), nil
	case ManageSubscriptionReqActionUpdatePaymentMethod:
		return []byte(s), nil
	case ManageSubscriptionReqActionUpdateQuantities:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ManageSubscriptionReqAction) UnmarshalText(data []byte) error {
	switch ManageSubscriptionReqAction(data) {
	case ManageSubscriptionReqActionUpgradeToPaid:
		*s = ManageSubscriptionReqActionUpgradeToPaid
		return nil
	case ManageSubscriptionReqActionDowngradeToFree:
		*s = ManageSubscriptionReqActionDowngradeToFree
		return nil
	case ManageSubscriptionReqActionUpdatePaymentMethod:
		*s = ManageSubscriptionReqActionUpdatePaymentMethod
		return nil
	case ManageSubscriptionReqActionUpdateQuantities:
		*s = ManageSubscriptionReqActionUpdateQuantities
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ManageSubscriptionReqProductsItem struct {
	ProductSid OptString  `json:"product_sid"`
	PriceID    OptString  `json:"price_id"`
	Quantity   OptFloat64 `json:"quantity"`
}

// GetProductSid returns the value of ProductSid.
func (s *ManageSubscriptionReqProductsItem) GetProductSid() OptString {
	return s.ProductSid
}

// GetPriceID returns the value of PriceID.
func (s *ManageSubscriptionReqProductsItem) GetPriceID() OptString {
	return s.PriceID
}

// GetQuantity returns the value of Quantity.
func (s *ManageSubscriptionReqProductsItem) GetQuantity() OptFloat64 {
	return s.Quantity
}

// SetProductSid sets the value of ProductSid.
func (s *ManageSubscriptionReqProductsItem) SetProductSid(val OptString) {
	s.ProductSid = val
}

// SetPriceID sets the value of PriceID.
func (s *ManageSubscriptionReqProductsItem) SetPriceID(val OptString) {
	s.PriceID = val
}

// SetQuantity sets the value of Quantity.
func (s *ManageSubscriptionReqProductsItem) SetQuantity(val OptFloat64) {
	s.Quantity = val
}

// Ref: #/components/schemas/Message
type Message struct {
	Provider OptString `json:"provider"`
	From     string    `json:"from"`
	To       string    `json:"to"`
	Text     OptString `json:"text"`
	Media    OptString `json:"media"`
}

// GetProvider returns the value of Provider.
func (s *Message) GetProvider() OptString {
	return s.Provider
}

// GetFrom returns the value of From.
func (s *Message) GetFrom() string {
	return s.From
}

// GetTo returns the value of To.
func (s *Message) GetTo() string {
	return s.To
}

// GetText returns the value of Text.
func (s *Message) GetText() OptString {
	return s.Text
}

// GetMedia returns the value of Media.
func (s *Message) GetMedia() OptString {
	return s.Media
}

// SetProvider sets the value of Provider.
func (s *Message) SetProvider(val OptString) {
	s.Provider = val
}

// SetFrom sets the value of From.
func (s *Message) SetFrom(val string) {
	s.From = val
}

// SetTo sets the value of To.
func (s *Message) SetTo(val string) {
	s.To = val
}

// SetText sets the value of Text.
func (s *Message) SetText(val OptString) {
	s.Text = val
}

// SetMedia sets the value of Media.
func (s *Message) SetMedia(val OptString) {
	s.Media = val
}

// Ref: #/components/schemas/MsTeamsTenant
type MsTeamsTenant struct {
	ServiceProviderSid uuid.UUID `json:"service_provider_sid"`
	AccountSid         OptUUID   `json:"account_sid"`
	ApplicationSid     OptUUID   `json:"application_sid"`
	TenantFqdn         string    `json:"tenant_fqdn"`
}

// GetServiceProviderSid returns the value of ServiceProviderSid.
func (s *MsTeamsTenant) GetServiceProviderSid() uuid.UUID {
	return s.ServiceProviderSid
}

// GetAccountSid returns the value of AccountSid.
func (s *MsTeamsTenant) GetAccountSid() OptUUID {
	return s.AccountSid
}

// GetApplicationSid returns the value of ApplicationSid.
func (s *MsTeamsTenant) GetApplicationSid() OptUUID {
	return s.ApplicationSid
}

// GetTenantFqdn returns the value of TenantFqdn.
func (s *MsTeamsTenant) GetTenantFqdn() string {
	return s.TenantFqdn
}

// SetServiceProviderSid sets the value of ServiceProviderSid.
func (s *MsTeamsTenant) SetServiceProviderSid(val uuid.UUID) {
	s.ServiceProviderSid = val
}

// SetAccountSid sets the value of AccountSid.
func (s *MsTeamsTenant) SetAccountSid(val OptUUID) {
	s.AccountSid = val
}

// SetApplicationSid sets the value of ApplicationSid.
func (s *MsTeamsTenant) SetApplicationSid(val OptUUID) {
	s.ApplicationSid = val
}

// SetTenantFqdn sets the value of TenantFqdn.
func (s *MsTeamsTenant) SetTenantFqdn(val string) {
	s.TenantFqdn = val
}

func (*MsTeamsTenant) getTenantRes() {}

// NewNilString returns new NilString with value set to v.
func NewNilString(v string) NilString {
	return NilString{
		Value: v,
	}
}

// NilString is nullable string.
type NilString struct {
	Value string
	Null  bool
}

// SetTo sets value to v.
func (o *NilString) SetTo(v string) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilString) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilString) SetToNull() {
	o.Null = true
	var v string
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilString) Get() (v string, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilUUID returns new NilUUID with value set to v.
func NewNilUUID(v uuid.UUID) NilUUID {
	return NilUUID{
		Value: v,
	}
}

// NilUUID is nullable uuid.UUID.
type NilUUID struct {
	Value uuid.UUID
	Null  bool
}

// SetTo sets value to v.
func (o *NilUUID) SetTo(v uuid.UUID) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilUUID) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilUUID) SetToNull() {
	o.Null = true
	var v uuid.UUID
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilUUID) Get() (v uuid.UUID, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilUUID) Or(d uuid.UUID) uuid.UUID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAccount returns new OptAccount with value set to v.
func NewOptAccount(v Account) OptAccount {
	return OptAccount{
		Value: v,
		Set:   true,
	}
}

// OptAccount is optional Account.
type OptAccount struct {
	Value Account
	Set   bool
}

// IsSet returns true if OptAccount was set.
func (o OptAccount) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAccount) Reset() {
	var v Account
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAccount) SetTo(v Account) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAccount) Get() (v Account, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAccount) Or(d Account) Account {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptChangePasswordReq returns new OptChangePasswordReq with value set to v.
func NewOptChangePasswordReq(v ChangePasswordReq) OptChangePasswordReq {
	return OptChangePasswordReq{
		Value: v,
		Set:   true,
	}
}

// OptChangePasswordReq is optional ChangePasswordReq.
type OptChangePasswordReq struct {
	Value ChangePasswordReq
	Set   bool
}

// IsSet returns true if OptChangePasswordReq was set.
func (o OptChangePasswordReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptChangePasswordReq) Reset() {
	var v ChangePasswordReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptChangePasswordReq) SetTo(v ChangePasswordReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptChangePasswordReq) Get() (v ChangePasswordReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptChangePasswordReq) Or(d ChangePasswordReq) ChangePasswordReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateAccountReq returns new OptCreateAccountReq with value set to v.
func NewOptCreateAccountReq(v CreateAccountReq) OptCreateAccountReq {
	return OptCreateAccountReq{
		Value: v,
		Set:   true,
	}
}

// OptCreateAccountReq is optional CreateAccountReq.
type OptCreateAccountReq struct {
	Value CreateAccountReq
	Set   bool
}

// IsSet returns true if OptCreateAccountReq was set.
func (o OptCreateAccountReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateAccountReq) Reset() {
	var v CreateAccountReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateAccountReq) SetTo(v CreateAccountReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateAccountReq) Get() (v CreateAccountReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateAccountReq) Or(d CreateAccountReq) CreateAccountReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateApikeyReq returns new OptCreateApikeyReq with value set to v.
func NewOptCreateApikeyReq(v CreateApikeyReq) OptCreateApikeyReq {
	return OptCreateApikeyReq{
		Value: v,
		Set:   true,
	}
}

// OptCreateApikeyReq is optional CreateApikeyReq.
type OptCreateApikeyReq struct {
	Value CreateApikeyReq
	Set   bool
}

// IsSet returns true if OptCreateApikeyReq was set.
func (o OptCreateApikeyReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateApikeyReq) Reset() {
	var v CreateApikeyReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateApikeyReq) SetTo(v CreateApikeyReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateApikeyReq) Get() (v CreateApikeyReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateApikeyReq) Or(d CreateApikeyReq) CreateApikeyReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateCallReq returns new OptCreateCallReq with value set to v.
func NewOptCreateCallReq(v CreateCallReq) OptCreateCallReq {
	return OptCreateCallReq{
		Value: v,
		Set:   true,
	}
}

// OptCreateCallReq is optional CreateCallReq.
type OptCreateCallReq struct {
	Value CreateCallReq
	Set   bool
}

// IsSet returns true if OptCreateCallReq was set.
func (o OptCreateCallReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateCallReq) Reset() {
	var v CreateCallReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateCallReq) SetTo(v CreateCallReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateCallReq) Get() (v CreateCallReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateCallReq) Or(d CreateCallReq) CreateCallReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateLcrForServiceProviderReq returns new OptCreateLcrForServiceProviderReq with value set to v.
func NewOptCreateLcrForServiceProviderReq(v CreateLcrForServiceProviderReq) OptCreateLcrForServiceProviderReq {
	return OptCreateLcrForServiceProviderReq{
		Value: v,
		Set:   true,
	}
}

// OptCreateLcrForServiceProviderReq is optional CreateLcrForServiceProviderReq.
type OptCreateLcrForServiceProviderReq struct {
	Value CreateLcrForServiceProviderReq
	Set   bool
}

// IsSet returns true if OptCreateLcrForServiceProviderReq was set.
func (o OptCreateLcrForServiceProviderReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateLcrForServiceProviderReq) Reset() {
	var v CreateLcrForServiceProviderReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateLcrForServiceProviderReq) SetTo(v CreateLcrForServiceProviderReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateLcrForServiceProviderReq) Get() (v CreateLcrForServiceProviderReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateLcrForServiceProviderReq) Or(d CreateLcrForServiceProviderReq) CreateLcrForServiceProviderReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateLcrReq returns new OptCreateLcrReq with value set to v.
func NewOptCreateLcrReq(v CreateLcrReq) OptCreateLcrReq {
	return OptCreateLcrReq{
		Value: v,
		Set:   true,
	}
}

// OptCreateLcrReq is optional CreateLcrReq.
type OptCreateLcrReq struct {
	Value CreateLcrReq
	Set   bool
}

// IsSet returns true if OptCreateLcrReq was set.
func (o OptCreateLcrReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateLcrReq) Reset() {
	var v CreateLcrReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateLcrReq) SetTo(v CreateLcrReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateLcrReq) Get() (v CreateLcrReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateLcrReq) Or(d CreateLcrReq) CreateLcrReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateMsTeamsTenantReq returns new OptCreateMsTeamsTenantReq with value set to v.
func NewOptCreateMsTeamsTenantReq(v CreateMsTeamsTenantReq) OptCreateMsTeamsTenantReq {
	return OptCreateMsTeamsTenantReq{
		Value: v,
		Set:   true,
	}
}

// OptCreateMsTeamsTenantReq is optional CreateMsTeamsTenantReq.
type OptCreateMsTeamsTenantReq struct {
	Value CreateMsTeamsTenantReq
	Set   bool
}

// IsSet returns true if OptCreateMsTeamsTenantReq was set.
func (o OptCreateMsTeamsTenantReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateMsTeamsTenantReq) Reset() {
	var v CreateMsTeamsTenantReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateMsTeamsTenantReq) SetTo(v CreateMsTeamsTenantReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateMsTeamsTenantReq) Get() (v CreateMsTeamsTenantReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateMsTeamsTenantReq) Or(d CreateMsTeamsTenantReq) CreateMsTeamsTenantReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateSbcReq returns new OptCreateSbcReq with value set to v.
func NewOptCreateSbcReq(v CreateSbcReq) OptCreateSbcReq {
	return OptCreateSbcReq{
		Value: v,
		Set:   true,
	}
}

// OptCreateSbcReq is optional CreateSbcReq.
type OptCreateSbcReq struct {
	Value CreateSbcReq
	Set   bool
}

// IsSet returns true if OptCreateSbcReq was set.
func (o OptCreateSbcReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateSbcReq) Reset() {
	var v CreateSbcReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateSbcReq) SetTo(v CreateSbcReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateSbcReq) Get() (v CreateSbcReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateSbcReq) Or(d CreateSbcReq) CreateSbcReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateServiceProviderReq returns new OptCreateServiceProviderReq with value set to v.
func NewOptCreateServiceProviderReq(v CreateServiceProviderReq) OptCreateServiceProviderReq {
	return OptCreateServiceProviderReq{
		Value: v,
		Set:   true,
	}
}

// OptCreateServiceProviderReq is optional CreateServiceProviderReq.
type OptCreateServiceProviderReq struct {
	Value CreateServiceProviderReq
	Set   bool
}

// IsSet returns true if OptCreateServiceProviderReq was set.
func (o OptCreateServiceProviderReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateServiceProviderReq) Reset() {
	var v CreateServiceProviderReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateServiceProviderReq) SetTo(v CreateServiceProviderReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateServiceProviderReq) Get() (v CreateServiceProviderReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateServiceProviderReq) Or(d CreateServiceProviderReq) CreateServiceProviderReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateSipGatewayReq returns new OptCreateSipGatewayReq with value set to v.
func NewOptCreateSipGatewayReq(v CreateSipGatewayReq) OptCreateSipGatewayReq {
	return OptCreateSipGatewayReq{
		Value: v,
		Set:   true,
	}
}

// OptCreateSipGatewayReq is optional CreateSipGatewayReq.
type OptCreateSipGatewayReq struct {
	Value CreateSipGatewayReq
	Set   bool
}

// IsSet returns true if OptCreateSipGatewayReq was set.
func (o OptCreateSipGatewayReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateSipGatewayReq) Reset() {
	var v CreateSipGatewayReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateSipGatewayReq) SetTo(v CreateSipGatewayReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateSipGatewayReq) Get() (v CreateSipGatewayReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateSipGatewayReq) Or(d CreateSipGatewayReq) CreateSipGatewayReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateSmppGatewayReq returns new OptCreateSmppGatewayReq with value set to v.
func NewOptCreateSmppGatewayReq(v CreateSmppGatewayReq) OptCreateSmppGatewayReq {
	return OptCreateSmppGatewayReq{
		Value: v,
		Set:   true,
	}
}

// OptCreateSmppGatewayReq is optional CreateSmppGatewayReq.
type OptCreateSmppGatewayReq struct {
	Value CreateSmppGatewayReq
	Set   bool
}

// IsSet returns true if OptCreateSmppGatewayReq was set.
func (o OptCreateSmppGatewayReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateSmppGatewayReq) Reset() {
	var v CreateSmppGatewayReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateSmppGatewayReq) SetTo(v CreateSmppGatewayReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateSmppGatewayReq) Get() (v CreateSmppGatewayReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateSmppGatewayReq) Or(d CreateSmppGatewayReq) CreateSmppGatewayReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateUserReq returns new OptCreateUserReq with value set to v.
func NewOptCreateUserReq(v CreateUserReq) OptCreateUserReq {
	return OptCreateUserReq{
		Value: v,
		Set:   true,
	}
}

// OptCreateUserReq is optional CreateUserReq.
type OptCreateUserReq struct {
	Value CreateUserReq
	Set   bool
}

// IsSet returns true if OptCreateUserReq was set.
func (o OptCreateUserReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateUserReq) Reset() {
	var v CreateUserReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateUserReq) SetTo(v CreateUserReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateUserReq) Get() (v CreateUserReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateUserReq) Or(d CreateUserReq) CreateUserReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateVoipCarrierReq returns new OptCreateVoipCarrierReq with value set to v.
func NewOptCreateVoipCarrierReq(v CreateVoipCarrierReq) OptCreateVoipCarrierReq {
	return OptCreateVoipCarrierReq{
		Value: v,
		Set:   true,
	}
}

// OptCreateVoipCarrierReq is optional CreateVoipCarrierReq.
type OptCreateVoipCarrierReq struct {
	Value CreateVoipCarrierReq
	Set   bool
}

// IsSet returns true if OptCreateVoipCarrierReq was set.
func (o OptCreateVoipCarrierReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateVoipCarrierReq) Reset() {
	var v CreateVoipCarrierReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateVoipCarrierReq) SetTo(v CreateVoipCarrierReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateVoipCarrierReq) Get() (v CreateVoipCarrierReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateVoipCarrierReq) Or(d CreateVoipCarrierReq) CreateVoipCarrierReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFloat64 returns new OptFloat64 with value set to v.
func NewOptFloat64(v float64) OptFloat64 {
	return OptFloat64{
		Value: v,
		Set:   true,
	}
}

// OptFloat64 is optional float64.
type OptFloat64 struct {
	Value float64
	Set   bool
}

// IsSet returns true if OptFloat64 was set.
func (o OptFloat64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFloat64) Reset() {
	var v float64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFloat64) SetTo(v float64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFloat64) Get() (v float64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFloat64) Or(d float64) float64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptForgotPasswordReq returns new OptForgotPasswordReq with value set to v.
func NewOptForgotPasswordReq(v ForgotPasswordReq) OptForgotPasswordReq {
	return OptForgotPasswordReq{
		Value: v,
		Set:   true,
	}
}

// OptForgotPasswordReq is optional ForgotPasswordReq.
type OptForgotPasswordReq struct {
	Value ForgotPasswordReq
	Set   bool
}

// IsSet returns true if OptForgotPasswordReq was set.
func (o OptForgotPasswordReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptForgotPasswordReq) Reset() {
	var v ForgotPasswordReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptForgotPasswordReq) SetTo(v ForgotPasswordReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptForgotPasswordReq) Get() (v ForgotPasswordReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptForgotPasswordReq) Or(d ForgotPasswordReq) ForgotPasswordReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGenerateInviteCodeReq returns new OptGenerateInviteCodeReq with value set to v.
func NewOptGenerateInviteCodeReq(v GenerateInviteCodeReq) OptGenerateInviteCodeReq {
	return OptGenerateInviteCodeReq{
		Value: v,
		Set:   true,
	}
}

// OptGenerateInviteCodeReq is optional GenerateInviteCodeReq.
type OptGenerateInviteCodeReq struct {
	Value GenerateInviteCodeReq
	Set   bool
}

// IsSet returns true if OptGenerateInviteCodeReq was set.
func (o OptGenerateInviteCodeReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGenerateInviteCodeReq) Reset() {
	var v GenerateInviteCodeReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGenerateInviteCodeReq) SetTo(v GenerateInviteCodeReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGenerateInviteCodeReq) Get() (v GenerateInviteCodeReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGenerateInviteCodeReq) Or(d GenerateInviteCodeReq) GenerateInviteCodeReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGoogleCustomVoice returns new OptGoogleCustomVoice with value set to v.
func NewOptGoogleCustomVoice(v GoogleCustomVoice) OptGoogleCustomVoice {
	return OptGoogleCustomVoice{
		Value: v,
		Set:   true,
	}
}

// OptGoogleCustomVoice is optional GoogleCustomVoice.
type OptGoogleCustomVoice struct {
	Value GoogleCustomVoice
	Set   bool
}

// IsSet returns true if OptGoogleCustomVoice was set.
func (o OptGoogleCustomVoice) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGoogleCustomVoice) Reset() {
	var v GoogleCustomVoice
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGoogleCustomVoice) SetTo(v GoogleCustomVoice) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGoogleCustomVoice) Get() (v GoogleCustomVoice, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGoogleCustomVoice) Or(d GoogleCustomVoice) GoogleCustomVoice {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptLcr returns new OptLcr with value set to v.
func NewOptLcr(v Lcr) OptLcr {
	return OptLcr{
		Value: v,
		Set:   true,
	}
}

// OptLcr is optional Lcr.
type OptLcr struct {
	Value Lcr
	Set   bool
}

// IsSet returns true if OptLcr was set.
func (o OptLcr) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptLcr) Reset() {
	var v Lcr
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptLcr) SetTo(v Lcr) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptLcr) Get() (v Lcr, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptLcr) Or(d Lcr) Lcr {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptLcrCarrierSetEntry returns new OptLcrCarrierSetEntry with value set to v.
func NewOptLcrCarrierSetEntry(v LcrCarrierSetEntry) OptLcrCarrierSetEntry {
	return OptLcrCarrierSetEntry{
		Value: v,
		Set:   true,
	}
}

// OptLcrCarrierSetEntry is optional LcrCarrierSetEntry.
type OptLcrCarrierSetEntry struct {
	Value LcrCarrierSetEntry
	Set   bool
}

// IsSet returns true if OptLcrCarrierSetEntry was set.
func (o OptLcrCarrierSetEntry) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptLcrCarrierSetEntry) Reset() {
	var v LcrCarrierSetEntry
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptLcrCarrierSetEntry) SetTo(v LcrCarrierSetEntry) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptLcrCarrierSetEntry) Get() (v LcrCarrierSetEntry, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptLcrCarrierSetEntry) Or(d LcrCarrierSetEntry) LcrCarrierSetEntry {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptLcrRoute returns new OptLcrRoute with value set to v.
func NewOptLcrRoute(v LcrRoute) OptLcrRoute {
	return OptLcrRoute{
		Value: v,
		Set:   true,
	}
}

// OptLcrRoute is optional LcrRoute.
type OptLcrRoute struct {
	Value LcrRoute
	Set   bool
}

// IsSet returns true if OptLcrRoute was set.
func (o OptLcrRoute) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptLcrRoute) Reset() {
	var v LcrRoute
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptLcrRoute) SetTo(v LcrRoute) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptLcrRoute) Get() (v LcrRoute, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptLcrRoute) Or(d LcrRoute) LcrRoute {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptLimits returns new OptLimits with value set to v.
func NewOptLimits(v Limits) OptLimits {
	return OptLimits{
		Value: v,
		Set:   true,
	}
}

// OptLimits is optional Limits.
type OptLimits struct {
	Value Limits
	Set   bool
}

// IsSet returns true if OptLimits was set.
func (o OptLimits) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptLimits) Reset() {
	var v Limits
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptLimits) SetTo(v Limits) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptLimits) Get() (v Limits, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptLimits) Or(d Limits) Limits {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptLimitsCategory returns new OptLimitsCategory with value set to v.
func NewOptLimitsCategory(v LimitsCategory) OptLimitsCategory {
	return OptLimitsCategory{
		Value: v,
		Set:   true,
	}
}

// OptLimitsCategory is optional LimitsCategory.
type OptLimitsCategory struct {
	Value LimitsCategory
	Set   bool
}

// IsSet returns true if OptLimitsCategory was set.
func (o OptLimitsCategory) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptLimitsCategory) Reset() {
	var v LimitsCategory
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptLimitsCategory) SetTo(v LimitsCategory) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptLimitsCategory) Get() (v LimitsCategory, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptLimitsCategory) Or(d LimitsCategory) LimitsCategory {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptListAlertsAlertType returns new OptListAlertsAlertType with value set to v.
func NewOptListAlertsAlertType(v ListAlertsAlertType) OptListAlertsAlertType {
	return OptListAlertsAlertType{
		Value: v,
		Set:   true,
	}
}

// OptListAlertsAlertType is optional ListAlertsAlertType.
type OptListAlertsAlertType struct {
	Value ListAlertsAlertType
	Set   bool
}

// IsSet returns true if OptListAlertsAlertType was set.
func (o OptListAlertsAlertType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptListAlertsAlertType) Reset() {
	var v ListAlertsAlertType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptListAlertsAlertType) SetTo(v ListAlertsAlertType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptListAlertsAlertType) Get() (v ListAlertsAlertType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptListAlertsAlertType) Or(d ListAlertsAlertType) ListAlertsAlertType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptListAlertsByAccountAlertType returns new OptListAlertsByAccountAlertType with value set to v.
func NewOptListAlertsByAccountAlertType(v ListAlertsByAccountAlertType) OptListAlertsByAccountAlertType {
	return OptListAlertsByAccountAlertType{
		Value: v,
		Set:   true,
	}
}

// OptListAlertsByAccountAlertType is optional ListAlertsByAccountAlertType.
type OptListAlertsByAccountAlertType struct {
	Value ListAlertsByAccountAlertType
	Set   bool
}

// IsSet returns true if OptListAlertsByAccountAlertType was set.
func (o OptListAlertsByAccountAlertType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptListAlertsByAccountAlertType) Reset() {
	var v ListAlertsByAccountAlertType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptListAlertsByAccountAlertType) SetTo(v ListAlertsByAccountAlertType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptListAlertsByAccountAlertType) Get() (v ListAlertsByAccountAlertType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptListAlertsByAccountAlertType) Or(d ListAlertsByAccountAlertType) ListAlertsByAccountAlertType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptListCallsCallStatus returns new OptListCallsCallStatus with value set to v.
func NewOptListCallsCallStatus(v ListCallsCallStatus) OptListCallsCallStatus {
	return OptListCallsCallStatus{
		Value: v,
		Set:   true,
	}
}

// OptListCallsCallStatus is optional ListCallsCallStatus.
type OptListCallsCallStatus struct {
	Value ListCallsCallStatus
	Set   bool
}

// IsSet returns true if OptListCallsCallStatus was set.
func (o OptListCallsCallStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptListCallsCallStatus) Reset() {
	var v ListCallsCallStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptListCallsCallStatus) SetTo(v ListCallsCallStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptListCallsCallStatus) Get() (v ListCallsCallStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptListCallsCallStatus) Or(d ListCallsCallStatus) ListCallsCallStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptListCallsDirection returns new OptListCallsDirection with value set to v.
func NewOptListCallsDirection(v ListCallsDirection) OptListCallsDirection {
	return OptListCallsDirection{
		Value: v,
		Set:   true,
	}
}

// OptListCallsDirection is optional ListCallsDirection.
type OptListCallsDirection struct {
	Value ListCallsDirection
	Set   bool
}

// IsSet returns true if OptListCallsDirection was set.
func (o OptListCallsDirection) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptListCallsDirection) Reset() {
	var v ListCallsDirection
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptListCallsDirection) SetTo(v ListCallsDirection) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptListCallsDirection) Get() (v ListCallsDirection, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptListCallsDirection) Or(d ListCallsDirection) ListCallsDirection {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptListRecentCallsBySPDirection returns new OptListRecentCallsBySPDirection with value set to v.
func NewOptListRecentCallsBySPDirection(v ListRecentCallsBySPDirection) OptListRecentCallsBySPDirection {
	return OptListRecentCallsBySPDirection{
		Value: v,
		Set:   true,
	}
}

// OptListRecentCallsBySPDirection is optional ListRecentCallsBySPDirection.
type OptListRecentCallsBySPDirection struct {
	Value ListRecentCallsBySPDirection
	Set   bool
}

// IsSet returns true if OptListRecentCallsBySPDirection was set.
func (o OptListRecentCallsBySPDirection) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptListRecentCallsBySPDirection) Reset() {
	var v ListRecentCallsBySPDirection
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptListRecentCallsBySPDirection) SetTo(v ListRecentCallsBySPDirection) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptListRecentCallsBySPDirection) Get() (v ListRecentCallsBySPDirection, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptListRecentCallsBySPDirection) Or(d ListRecentCallsBySPDirection) ListRecentCallsBySPDirection {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptListRecentCallsDirection returns new OptListRecentCallsDirection with value set to v.
func NewOptListRecentCallsDirection(v ListRecentCallsDirection) OptListRecentCallsDirection {
	return OptListRecentCallsDirection{
		Value: v,
		Set:   true,
	}
}

// OptListRecentCallsDirection is optional ListRecentCallsDirection.
type OptListRecentCallsDirection struct {
	Value ListRecentCallsDirection
	Set   bool
}

// IsSet returns true if OptListRecentCallsDirection was set.
func (o OptListRecentCallsDirection) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptListRecentCallsDirection) Reset() {
	var v ListRecentCallsDirection
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptListRecentCallsDirection) SetTo(v ListRecentCallsDirection) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptListRecentCallsDirection) Get() (v ListRecentCallsDirection, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptListRecentCallsDirection) Or(d ListRecentCallsDirection) ListRecentCallsDirection {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptLogin returns new OptLogin with value set to v.
func NewOptLogin(v Login) OptLogin {
	return OptLogin{
		Value: v,
		Set:   true,
	}
}

// OptLogin is optional Login.
type OptLogin struct {
	Value Login
	Set   bool
}

// IsSet returns true if OptLogin was set.
func (o OptLogin) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptLogin) Reset() {
	var v Login
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptLogin) SetTo(v Login) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptLogin) Get() (v Login, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptLogin) Or(d Login) Login {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptLoginUserReq returns new OptLoginUserReq with value set to v.
func NewOptLoginUserReq(v LoginUserReq) OptLoginUserReq {
	return OptLoginUserReq{
		Value: v,
		Set:   true,
	}
}

// OptLoginUserReq is optional LoginUserReq.
type OptLoginUserReq struct {
	Value LoginUserReq
	Set   bool
}

// IsSet returns true if OptLoginUserReq was set.
func (o OptLoginUserReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptLoginUserReq) Reset() {
	var v LoginUserReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptLoginUserReq) SetTo(v LoginUserReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptLoginUserReq) Get() (v LoginUserReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptLoginUserReq) Or(d LoginUserReq) LoginUserReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptManageSubscriptionReq returns new OptManageSubscriptionReq with value set to v.
func NewOptManageSubscriptionReq(v ManageSubscriptionReq) OptManageSubscriptionReq {
	return OptManageSubscriptionReq{
		Value: v,
		Set:   true,
	}
}

// OptManageSubscriptionReq is optional ManageSubscriptionReq.
type OptManageSubscriptionReq struct {
	Value ManageSubscriptionReq
	Set   bool
}

// IsSet returns true if OptManageSubscriptionReq was set.
func (o OptManageSubscriptionReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptManageSubscriptionReq) Reset() {
	var v ManageSubscriptionReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptManageSubscriptionReq) SetTo(v ManageSubscriptionReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptManageSubscriptionReq) Get() (v ManageSubscriptionReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptManageSubscriptionReq) Or(d ManageSubscriptionReq) ManageSubscriptionReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMessage returns new OptMessage with value set to v.
func NewOptMessage(v Message) OptMessage {
	return OptMessage{
		Value: v,
		Set:   true,
	}
}

// OptMessage is optional Message.
type OptMessage struct {
	Value Message
	Set   bool
}

// IsSet returns true if OptMessage was set.
func (o OptMessage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMessage) Reset() {
	var v Message
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMessage) SetTo(v Message) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMessage) Get() (v Message, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMessage) Or(d Message) Message {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMsTeamsTenant returns new OptMsTeamsTenant with value set to v.
func NewOptMsTeamsTenant(v MsTeamsTenant) OptMsTeamsTenant {
	return OptMsTeamsTenant{
		Value: v,
		Set:   true,
	}
}

// OptMsTeamsTenant is optional MsTeamsTenant.
type OptMsTeamsTenant struct {
	Value MsTeamsTenant
	Set   bool
}

// IsSet returns true if OptMsTeamsTenant was set.
func (o OptMsTeamsTenant) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMsTeamsTenant) Reset() {
	var v MsTeamsTenant
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMsTeamsTenant) SetTo(v MsTeamsTenant) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMsTeamsTenant) Get() (v MsTeamsTenant, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMsTeamsTenant) Or(d MsTeamsTenant) MsTeamsTenant {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilAccountRegistrationHook returns new OptNilAccountRegistrationHook with value set to v.
func NewOptNilAccountRegistrationHook(v AccountRegistrationHook) OptNilAccountRegistrationHook {
	return OptNilAccountRegistrationHook{
		Value: v,
		Set:   true,
	}
}

// OptNilAccountRegistrationHook is optional nullable AccountRegistrationHook.
type OptNilAccountRegistrationHook struct {
	Value AccountRegistrationHook
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilAccountRegistrationHook was set.
func (o OptNilAccountRegistrationHook) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilAccountRegistrationHook) Reset() {
	var v AccountRegistrationHook
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilAccountRegistrationHook) SetTo(v AccountRegistrationHook) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilAccountRegistrationHook) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilAccountRegistrationHook) SetToNull() {
	o.Set = true
	o.Null = true
	var v AccountRegistrationHook
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilAccountRegistrationHook) Get() (v AccountRegistrationHook, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilAccountRegistrationHook) Or(d AccountRegistrationHook) AccountRegistrationHook {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilString returns new OptNilString with value set to v.
func NewOptNilString(v string) OptNilString {
	return OptNilString{
		Value: v,
		Set:   true,
	}
}

// OptNilString is optional nullable string.
type OptNilString struct {
	Value string
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilString was set.
func (o OptNilString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilString) Reset() {
	var v string
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilString) SetTo(v string) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilString) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilString) SetToNull() {
	o.Set = true
	o.Null = true
	var v string
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilString) Get() (v string, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilUUID returns new OptNilUUID with value set to v.
func NewOptNilUUID(v uuid.UUID) OptNilUUID {
	return OptNilUUID{
		Value: v,
		Set:   true,
	}
}

// OptNilUUID is optional nullable uuid.UUID.
type OptNilUUID struct {
	Value uuid.UUID
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilUUID was set.
func (o OptNilUUID) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilUUID) Reset() {
	var v uuid.UUID
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilUUID) SetTo(v uuid.UUID) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilUUID) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilUUID) SetToNull() {
	o.Set = true
	o.Null = true
	var v uuid.UUID
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilUUID) Get() (v uuid.UUID, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilUUID) Or(d uuid.UUID) uuid.UUID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRegisterUserReq returns new OptRegisterUserReq with value set to v.
func NewOptRegisterUserReq(v RegisterUserReq) OptRegisterUserReq {
	return OptRegisterUserReq{
		Value: v,
		Set:   true,
	}
}

// OptRegisterUserReq is optional RegisterUserReq.
type OptRegisterUserReq struct {
	Value RegisterUserReq
	Set   bool
}

// IsSet returns true if OptRegisterUserReq was set.
func (o OptRegisterUserReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRegisterUserReq) Reset() {
	var v RegisterUserReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRegisterUserReq) SetTo(v RegisterUserReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRegisterUserReq) Get() (v RegisterUserReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRegisterUserReq) Or(d RegisterUserReq) RegisterUserReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRegisteredClientRegisteredStatus returns new OptRegisteredClientRegisteredStatus with value set to v.
func NewOptRegisteredClientRegisteredStatus(v RegisteredClientRegisteredStatus) OptRegisteredClientRegisteredStatus {
	return OptRegisteredClientRegisteredStatus{
		Value: v,
		Set:   true,
	}
}

// OptRegisteredClientRegisteredStatus is optional RegisteredClientRegisteredStatus.
type OptRegisteredClientRegisteredStatus struct {
	Value RegisteredClientRegisteredStatus
	Set   bool
}

// IsSet returns true if OptRegisteredClientRegisteredStatus was set.
func (o OptRegisteredClientRegisteredStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRegisteredClientRegisteredStatus) Reset() {
	var v RegisteredClientRegisteredStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRegisteredClientRegisteredStatus) SetTo(v RegisteredClientRegisteredStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRegisteredClientRegisteredStatus) Get() (v RegisteredClientRegisteredStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRegisteredClientRegisteredStatus) Or(d RegisteredClientRegisteredStatus) RegisteredClientRegisteredStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSendActivationCodeReq returns new OptSendActivationCodeReq with value set to v.
func NewOptSendActivationCodeReq(v SendActivationCodeReq) OptSendActivationCodeReq {
	return OptSendActivationCodeReq{
		Value: v,
		Set:   true,
	}
}

// OptSendActivationCodeReq is optional SendActivationCodeReq.
type OptSendActivationCodeReq struct {
	Value SendActivationCodeReq
	Set   bool
}

// IsSet returns true if OptSendActivationCodeReq was set.
func (o OptSendActivationCodeReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSendActivationCodeReq) Reset() {
	var v SendActivationCodeReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSendActivationCodeReq) SetTo(v SendActivationCodeReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSendActivationCodeReq) Get() (v SendActivationCodeReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSendActivationCodeReq) Or(d SendActivationCodeReq) SendActivationCodeReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSendActivationCodeReqType returns new OptSendActivationCodeReqType with value set to v.
func NewOptSendActivationCodeReqType(v SendActivationCodeReqType) OptSendActivationCodeReqType {
	return OptSendActivationCodeReqType{
		Value: v,
		Set:   true,
	}
}

// OptSendActivationCodeReqType is optional SendActivationCodeReqType.
type OptSendActivationCodeReqType struct {
	Value SendActivationCodeReqType
	Set   bool
}

// IsSet returns true if OptSendActivationCodeReqType was set.
func (o OptSendActivationCodeReqType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSendActivationCodeReqType) Reset() {
	var v SendActivationCodeReqType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSendActivationCodeReqType) SetTo(v SendActivationCodeReqType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSendActivationCodeReqType) Get() (v SendActivationCodeReqType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSendActivationCodeReqType) Or(d SendActivationCodeReqType) SendActivationCodeReqType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptServiceProvider returns new OptServiceProvider with value set to v.
func NewOptServiceProvider(v ServiceProvider) OptServiceProvider {
	return OptServiceProvider{
		Value: v,
		Set:   true,
	}
}

// OptServiceProvider is optional ServiceProvider.
type OptServiceProvider struct {
	Value ServiceProvider
	Set   bool
}

// IsSet returns true if OptServiceProvider was set.
func (o OptServiceProvider) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptServiceProvider) Reset() {
	var v ServiceProvider
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptServiceProvider) SetTo(v ServiceProvider) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptServiceProvider) Get() (v ServiceProvider, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptServiceProvider) Or(d ServiceProvider) ServiceProvider {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSipGateway returns new OptSipGateway with value set to v.
func NewOptSipGateway(v SipGateway) OptSipGateway {
	return OptSipGateway{
		Value: v,
		Set:   true,
	}
}

// OptSipGateway is optional SipGateway.
type OptSipGateway struct {
	Value SipGateway
	Set   bool
}

// IsSet returns true if OptSipGateway was set.
func (o OptSipGateway) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSipGateway) Reset() {
	var v SipGateway
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSipGateway) SetTo(v SipGateway) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSipGateway) Get() (v SipGateway, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSipGateway) Or(d SipGateway) SipGateway {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSmppGateway returns new OptSmppGateway with value set to v.
func NewOptSmppGateway(v SmppGateway) OptSmppGateway {
	return OptSmppGateway{
		Value: v,
		Set:   true,
	}
}

// OptSmppGateway is optional SmppGateway.
type OptSmppGateway struct {
	Value SmppGateway
	Set   bool
}

// IsSet returns true if OptSmppGateway was set.
func (o OptSmppGateway) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSmppGateway) Reset() {
	var v SmppGateway
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSmppGateway) SetTo(v SmppGateway) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSmppGateway) Get() (v SmppGateway, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSmppGateway) Or(d SmppGateway) SmppGateway {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSpeechCredential returns new OptSpeechCredential with value set to v.
func NewOptSpeechCredential(v SpeechCredential) OptSpeechCredential {
	return OptSpeechCredential{
		Value: v,
		Set:   true,
	}
}

// OptSpeechCredential is optional SpeechCredential.
type OptSpeechCredential struct {
	Value SpeechCredential
	Set   bool
}

// IsSet returns true if OptSpeechCredential was set.
func (o OptSpeechCredential) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSpeechCredential) Reset() {
	var v SpeechCredential
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSpeechCredential) SetTo(v SpeechCredential) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSpeechCredential) Get() (v SpeechCredential, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSpeechCredential) Or(d SpeechCredential) SpeechCredential {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSpeechCredentialUpdate returns new OptSpeechCredentialUpdate with value set to v.
func NewOptSpeechCredentialUpdate(v SpeechCredentialUpdate) OptSpeechCredentialUpdate {
	return OptSpeechCredentialUpdate{
		Value: v,
		Set:   true,
	}
}

// OptSpeechCredentialUpdate is optional SpeechCredentialUpdate.
type OptSpeechCredentialUpdate struct {
	Value SpeechCredentialUpdate
	Set   bool
}

// IsSet returns true if OptSpeechCredentialUpdate was set.
func (o OptSpeechCredentialUpdate) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSpeechCredentialUpdate) Reset() {
	var v SpeechCredentialUpdate
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSpeechCredentialUpdate) SetTo(v SpeechCredentialUpdate) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSpeechCredentialUpdate) Get() (v SpeechCredentialUpdate, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSpeechCredentialUpdate) Or(d SpeechCredentialUpdate) SpeechCredentialUpdate {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSpeechCredentialVendor returns new OptSpeechCredentialVendor with value set to v.
func NewOptSpeechCredentialVendor(v SpeechCredentialVendor) OptSpeechCredentialVendor {
	return OptSpeechCredentialVendor{
		Value: v,
		Set:   true,
	}
}

// OptSpeechCredentialVendor is optional SpeechCredentialVendor.
type OptSpeechCredentialVendor struct {
	Value SpeechCredentialVendor
	Set   bool
}

// IsSet returns true if OptSpeechCredentialVendor was set.
func (o OptSpeechCredentialVendor) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSpeechCredentialVendor) Reset() {
	var v SpeechCredentialVendor
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSpeechCredentialVendor) SetTo(v SpeechCredentialVendor) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSpeechCredentialVendor) Get() (v SpeechCredentialVendor, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSpeechCredentialVendor) Or(d SpeechCredentialVendor) SpeechCredentialVendor {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSynthesizeReq returns new OptSynthesizeReq with value set to v.
func NewOptSynthesizeReq(v SynthesizeReq) OptSynthesizeReq {
	return OptSynthesizeReq{
		Value: v,
		Set:   true,
	}
}

// OptSynthesizeReq is optional SynthesizeReq.
type OptSynthesizeReq struct {
	Value SynthesizeReq
	Set   bool
}

// IsSet returns true if OptSynthesizeReq was set.
func (o OptSynthesizeReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSynthesizeReq) Reset() {
	var v SynthesizeReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSynthesizeReq) SetTo(v SynthesizeReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSynthesizeReq) Get() (v SynthesizeReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSynthesizeReq) Or(d SynthesizeReq) SynthesizeReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTargetAuth returns new OptTargetAuth with value set to v.
func NewOptTargetAuth(v TargetAuth) OptTargetAuth {
	return OptTargetAuth{
		Value: v,
		Set:   true,
	}
}

// OptTargetAuth is optional TargetAuth.
type OptTargetAuth struct {
	Value TargetAuth
	Set   bool
}

// IsSet returns true if OptTargetAuth was set.
func (o OptTargetAuth) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTargetAuth) Reset() {
	var v TargetAuth
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTargetAuth) SetTo(v TargetAuth) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTargetAuth) Get() (v TargetAuth, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTargetAuth) Or(d TargetAuth) TargetAuth {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTestSpeechCredentialByAccountOKStt returns new OptTestSpeechCredentialByAccountOKStt with value set to v.
func NewOptTestSpeechCredentialByAccountOKStt(v TestSpeechCredentialByAccountOKStt) OptTestSpeechCredentialByAccountOKStt {
	return OptTestSpeechCredentialByAccountOKStt{
		Value: v,
		Set:   true,
	}
}

// OptTestSpeechCredentialByAccountOKStt is optional TestSpeechCredentialByAccountOKStt.
type OptTestSpeechCredentialByAccountOKStt struct {
	Value TestSpeechCredentialByAccountOKStt
	Set   bool
}

// IsSet returns true if OptTestSpeechCredentialByAccountOKStt was set.
func (o OptTestSpeechCredentialByAccountOKStt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTestSpeechCredentialByAccountOKStt) Reset() {
	var v TestSpeechCredentialByAccountOKStt
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTestSpeechCredentialByAccountOKStt) SetTo(v TestSpeechCredentialByAccountOKStt) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTestSpeechCredentialByAccountOKStt) Get() (v TestSpeechCredentialByAccountOKStt, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTestSpeechCredentialByAccountOKStt) Or(d TestSpeechCredentialByAccountOKStt) TestSpeechCredentialByAccountOKStt {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTestSpeechCredentialByAccountOKSttStatus returns new OptTestSpeechCredentialByAccountOKSttStatus with value set to v.
func NewOptTestSpeechCredentialByAccountOKSttStatus(v TestSpeechCredentialByAccountOKSttStatus) OptTestSpeechCredentialByAccountOKSttStatus {
	return OptTestSpeechCredentialByAccountOKSttStatus{
		Value: v,
		Set:   true,
	}
}

// OptTestSpeechCredentialByAccountOKSttStatus is optional TestSpeechCredentialByAccountOKSttStatus.
type OptTestSpeechCredentialByAccountOKSttStatus struct {
	Value TestSpeechCredentialByAccountOKSttStatus
	Set   bool
}

// IsSet returns true if OptTestSpeechCredentialByAccountOKSttStatus was set.
func (o OptTestSpeechCredentialByAccountOKSttStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTestSpeechCredentialByAccountOKSttStatus) Reset() {
	var v TestSpeechCredentialByAccountOKSttStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTestSpeechCredentialByAccountOKSttStatus) SetTo(v TestSpeechCredentialByAccountOKSttStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTestSpeechCredentialByAccountOKSttStatus) Get() (v TestSpeechCredentialByAccountOKSttStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTestSpeechCredentialByAccountOKSttStatus) Or(d TestSpeechCredentialByAccountOKSttStatus) TestSpeechCredentialByAccountOKSttStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTestSpeechCredentialByAccountOKTts returns new OptTestSpeechCredentialByAccountOKTts with value set to v.
func NewOptTestSpeechCredentialByAccountOKTts(v TestSpeechCredentialByAccountOKTts) OptTestSpeechCredentialByAccountOKTts {
	return OptTestSpeechCredentialByAccountOKTts{
		Value: v,
		Set:   true,
	}
}

// OptTestSpeechCredentialByAccountOKTts is optional TestSpeechCredentialByAccountOKTts.
type OptTestSpeechCredentialByAccountOKTts struct {
	Value TestSpeechCredentialByAccountOKTts
	Set   bool
}

// IsSet returns true if OptTestSpeechCredentialByAccountOKTts was set.
func (o OptTestSpeechCredentialByAccountOKTts) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTestSpeechCredentialByAccountOKTts) Reset() {
	var v TestSpeechCredentialByAccountOKTts
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTestSpeechCredentialByAccountOKTts) SetTo(v TestSpeechCredentialByAccountOKTts) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTestSpeechCredentialByAccountOKTts) Get() (v TestSpeechCredentialByAccountOKTts, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTestSpeechCredentialByAccountOKTts) Or(d TestSpeechCredentialByAccountOKTts) TestSpeechCredentialByAccountOKTts {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTestSpeechCredentialByAccountOKTtsStatus returns new OptTestSpeechCredentialByAccountOKTtsStatus with value set to v.
func NewOptTestSpeechCredentialByAccountOKTtsStatus(v TestSpeechCredentialByAccountOKTtsStatus) OptTestSpeechCredentialByAccountOKTtsStatus {
	return OptTestSpeechCredentialByAccountOKTtsStatus{
		Value: v,
		Set:   true,
	}
}

// OptTestSpeechCredentialByAccountOKTtsStatus is optional TestSpeechCredentialByAccountOKTtsStatus.
type OptTestSpeechCredentialByAccountOKTtsStatus struct {
	Value TestSpeechCredentialByAccountOKTtsStatus
	Set   bool
}

// IsSet returns true if OptTestSpeechCredentialByAccountOKTtsStatus was set.
func (o OptTestSpeechCredentialByAccountOKTtsStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTestSpeechCredentialByAccountOKTtsStatus) Reset() {
	var v TestSpeechCredentialByAccountOKTtsStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTestSpeechCredentialByAccountOKTtsStatus) SetTo(v TestSpeechCredentialByAccountOKTtsStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTestSpeechCredentialByAccountOKTtsStatus) Get() (v TestSpeechCredentialByAccountOKTtsStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTestSpeechCredentialByAccountOKTtsStatus) Or(d TestSpeechCredentialByAccountOKTtsStatus) TestSpeechCredentialByAccountOKTtsStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTestSpeechCredentialOKStt returns new OptTestSpeechCredentialOKStt with value set to v.
func NewOptTestSpeechCredentialOKStt(v TestSpeechCredentialOKStt) OptTestSpeechCredentialOKStt {
	return OptTestSpeechCredentialOKStt{
		Value: v,
		Set:   true,
	}
}

// OptTestSpeechCredentialOKStt is optional TestSpeechCredentialOKStt.
type OptTestSpeechCredentialOKStt struct {
	Value TestSpeechCredentialOKStt
	Set   bool
}

// IsSet returns true if OptTestSpeechCredentialOKStt was set.
func (o OptTestSpeechCredentialOKStt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTestSpeechCredentialOKStt) Reset() {
	var v TestSpeechCredentialOKStt
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTestSpeechCredentialOKStt) SetTo(v TestSpeechCredentialOKStt) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTestSpeechCredentialOKStt) Get() (v TestSpeechCredentialOKStt, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTestSpeechCredentialOKStt) Or(d TestSpeechCredentialOKStt) TestSpeechCredentialOKStt {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTestSpeechCredentialOKSttStatus returns new OptTestSpeechCredentialOKSttStatus with value set to v.
func NewOptTestSpeechCredentialOKSttStatus(v TestSpeechCredentialOKSttStatus) OptTestSpeechCredentialOKSttStatus {
	return OptTestSpeechCredentialOKSttStatus{
		Value: v,
		Set:   true,
	}
}

// OptTestSpeechCredentialOKSttStatus is optional TestSpeechCredentialOKSttStatus.
type OptTestSpeechCredentialOKSttStatus struct {
	Value TestSpeechCredentialOKSttStatus
	Set   bool
}

// IsSet returns true if OptTestSpeechCredentialOKSttStatus was set.
func (o OptTestSpeechCredentialOKSttStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTestSpeechCredentialOKSttStatus) Reset() {
	var v TestSpeechCredentialOKSttStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTestSpeechCredentialOKSttStatus) SetTo(v TestSpeechCredentialOKSttStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTestSpeechCredentialOKSttStatus) Get() (v TestSpeechCredentialOKSttStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTestSpeechCredentialOKSttStatus) Or(d TestSpeechCredentialOKSttStatus) TestSpeechCredentialOKSttStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTestSpeechCredentialOKTts returns new OptTestSpeechCredentialOKTts with value set to v.
func NewOptTestSpeechCredentialOKTts(v TestSpeechCredentialOKTts) OptTestSpeechCredentialOKTts {
	return OptTestSpeechCredentialOKTts{
		Value: v,
		Set:   true,
	}
}

// OptTestSpeechCredentialOKTts is optional TestSpeechCredentialOKTts.
type OptTestSpeechCredentialOKTts struct {
	Value TestSpeechCredentialOKTts
	Set   bool
}

// IsSet returns true if OptTestSpeechCredentialOKTts was set.
func (o OptTestSpeechCredentialOKTts) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTestSpeechCredentialOKTts) Reset() {
	var v TestSpeechCredentialOKTts
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTestSpeechCredentialOKTts) SetTo(v TestSpeechCredentialOKTts) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTestSpeechCredentialOKTts) Get() (v TestSpeechCredentialOKTts, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTestSpeechCredentialOKTts) Or(d TestSpeechCredentialOKTts) TestSpeechCredentialOKTts {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTestSpeechCredentialOKTtsStatus returns new OptTestSpeechCredentialOKTtsStatus with value set to v.
func NewOptTestSpeechCredentialOKTtsStatus(v TestSpeechCredentialOKTtsStatus) OptTestSpeechCredentialOKTtsStatus {
	return OptTestSpeechCredentialOKTtsStatus{
		Value: v,
		Set:   true,
	}
}

// OptTestSpeechCredentialOKTtsStatus is optional TestSpeechCredentialOKTtsStatus.
type OptTestSpeechCredentialOKTtsStatus struct {
	Value TestSpeechCredentialOKTtsStatus
	Set   bool
}

// IsSet returns true if OptTestSpeechCredentialOKTtsStatus was set.
func (o OptTestSpeechCredentialOKTtsStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTestSpeechCredentialOKTtsStatus) Reset() {
	var v TestSpeechCredentialOKTtsStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTestSpeechCredentialOKTtsStatus) SetTo(v TestSpeechCredentialOKTtsStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTestSpeechCredentialOKTtsStatus) Get() (v TestSpeechCredentialOKTtsStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTestSpeechCredentialOKTtsStatus) Or(d TestSpeechCredentialOKTtsStatus) TestSpeechCredentialOKTtsStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUUID returns new OptUUID with value set to v.
func NewOptUUID(v uuid.UUID) OptUUID {
	return OptUUID{
		Value: v,
		Set:   true,
	}
}

// OptUUID is optional uuid.UUID.
type OptUUID struct {
	Value uuid.UUID
	Set   bool
}

// IsSet returns true if OptUUID was set.
func (o OptUUID) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUUID) Reset() {
	var v uuid.UUID
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUUID) SetTo(v uuid.UUID) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUUID) Get() (v uuid.UUID, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUUID) Or(d uuid.UUID) uuid.UUID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateCallReq returns new OptUpdateCallReq with value set to v.
func NewOptUpdateCallReq(v UpdateCallReq) OptUpdateCallReq {
	return OptUpdateCallReq{
		Value: v,
		Set:   true,
	}
}

// OptUpdateCallReq is optional UpdateCallReq.
type OptUpdateCallReq struct {
	Value UpdateCallReq
	Set   bool
}

// IsSet returns true if OptUpdateCallReq was set.
func (o OptUpdateCallReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateCallReq) Reset() {
	var v UpdateCallReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateCallReq) SetTo(v UpdateCallReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateCallReq) Get() (v UpdateCallReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateCallReq) Or(d UpdateCallReq) UpdateCallReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateCallReqCallStatus returns new OptUpdateCallReqCallStatus with value set to v.
func NewOptUpdateCallReqCallStatus(v UpdateCallReqCallStatus) OptUpdateCallReqCallStatus {
	return OptUpdateCallReqCallStatus{
		Value: v,
		Set:   true,
	}
}

// OptUpdateCallReqCallStatus is optional UpdateCallReqCallStatus.
type OptUpdateCallReqCallStatus struct {
	Value UpdateCallReqCallStatus
	Set   bool
}

// IsSet returns true if OptUpdateCallReqCallStatus was set.
func (o OptUpdateCallReqCallStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateCallReqCallStatus) Reset() {
	var v UpdateCallReqCallStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateCallReqCallStatus) SetTo(v UpdateCallReqCallStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateCallReqCallStatus) Get() (v UpdateCallReqCallStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateCallReqCallStatus) Or(d UpdateCallReqCallStatus) UpdateCallReqCallStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateCallReqConfHoldStatus returns new OptUpdateCallReqConfHoldStatus with value set to v.
func NewOptUpdateCallReqConfHoldStatus(v UpdateCallReqConfHoldStatus) OptUpdateCallReqConfHoldStatus {
	return OptUpdateCallReqConfHoldStatus{
		Value: v,
		Set:   true,
	}
}

// OptUpdateCallReqConfHoldStatus is optional UpdateCallReqConfHoldStatus.
type OptUpdateCallReqConfHoldStatus struct {
	Value UpdateCallReqConfHoldStatus
	Set   bool
}

// IsSet returns true if OptUpdateCallReqConfHoldStatus was set.
func (o OptUpdateCallReqConfHoldStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateCallReqConfHoldStatus) Reset() {
	var v UpdateCallReqConfHoldStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateCallReqConfHoldStatus) SetTo(v UpdateCallReqConfHoldStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateCallReqConfHoldStatus) Get() (v UpdateCallReqConfHoldStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateCallReqConfHoldStatus) Or(d UpdateCallReqConfHoldStatus) UpdateCallReqConfHoldStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateCallReqConfMuteStatus returns new OptUpdateCallReqConfMuteStatus with value set to v.
func NewOptUpdateCallReqConfMuteStatus(v UpdateCallReqConfMuteStatus) OptUpdateCallReqConfMuteStatus {
	return OptUpdateCallReqConfMuteStatus{
		Value: v,
		Set:   true,
	}
}

// OptUpdateCallReqConfMuteStatus is optional UpdateCallReqConfMuteStatus.
type OptUpdateCallReqConfMuteStatus struct {
	Value UpdateCallReqConfMuteStatus
	Set   bool
}

// IsSet returns true if OptUpdateCallReqConfMuteStatus was set.
func (o OptUpdateCallReqConfMuteStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateCallReqConfMuteStatus) Reset() {
	var v UpdateCallReqConfMuteStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateCallReqConfMuteStatus) SetTo(v UpdateCallReqConfMuteStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateCallReqConfMuteStatus) Get() (v UpdateCallReqConfMuteStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateCallReqConfMuteStatus) Or(d UpdateCallReqConfMuteStatus) UpdateCallReqConfMuteStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateCallReqConferenceParticipantAction returns new OptUpdateCallReqConferenceParticipantAction with value set to v.
func NewOptUpdateCallReqConferenceParticipantAction(v UpdateCallReqConferenceParticipantAction) OptUpdateCallReqConferenceParticipantAction {
	return OptUpdateCallReqConferenceParticipantAction{
		Value: v,
		Set:   true,
	}
}

// OptUpdateCallReqConferenceParticipantAction is optional UpdateCallReqConferenceParticipantAction.
type OptUpdateCallReqConferenceParticipantAction struct {
	Value UpdateCallReqConferenceParticipantAction
	Set   bool
}

// IsSet returns true if OptUpdateCallReqConferenceParticipantAction was set.
func (o OptUpdateCallReqConferenceParticipantAction) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateCallReqConferenceParticipantAction) Reset() {
	var v UpdateCallReqConferenceParticipantAction
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateCallReqConferenceParticipantAction) SetTo(v UpdateCallReqConferenceParticipantAction) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateCallReqConferenceParticipantAction) Get() (v UpdateCallReqConferenceParticipantAction, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateCallReqConferenceParticipantAction) Or(d UpdateCallReqConferenceParticipantAction) UpdateCallReqConferenceParticipantAction {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateCallReqConferenceParticipantActionAction returns new OptUpdateCallReqConferenceParticipantActionAction with value set to v.
func NewOptUpdateCallReqConferenceParticipantActionAction(v UpdateCallReqConferenceParticipantActionAction) OptUpdateCallReqConferenceParticipantActionAction {
	return OptUpdateCallReqConferenceParticipantActionAction{
		Value: v,
		Set:   true,
	}
}

// OptUpdateCallReqConferenceParticipantActionAction is optional UpdateCallReqConferenceParticipantActionAction.
type OptUpdateCallReqConferenceParticipantActionAction struct {
	Value UpdateCallReqConferenceParticipantActionAction
	Set   bool
}

// IsSet returns true if OptUpdateCallReqConferenceParticipantActionAction was set.
func (o OptUpdateCallReqConferenceParticipantActionAction) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateCallReqConferenceParticipantActionAction) Reset() {
	var v UpdateCallReqConferenceParticipantActionAction
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateCallReqConferenceParticipantActionAction) SetTo(v UpdateCallReqConferenceParticipantActionAction) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateCallReqConferenceParticipantActionAction) Get() (v UpdateCallReqConferenceParticipantActionAction, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateCallReqConferenceParticipantActionAction) Or(d UpdateCallReqConferenceParticipantActionAction) UpdateCallReqConferenceParticipantActionAction {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateCallReqListenStatus returns new OptUpdateCallReqListenStatus with value set to v.
func NewOptUpdateCallReqListenStatus(v UpdateCallReqListenStatus) OptUpdateCallReqListenStatus {
	return OptUpdateCallReqListenStatus{
		Value: v,
		Set:   true,
	}
}

// OptUpdateCallReqListenStatus is optional UpdateCallReqListenStatus.
type OptUpdateCallReqListenStatus struct {
	Value UpdateCallReqListenStatus
	Set   bool
}

// IsSet returns true if OptUpdateCallReqListenStatus was set.
func (o OptUpdateCallReqListenStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateCallReqListenStatus) Reset() {
	var v UpdateCallReqListenStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateCallReqListenStatus) SetTo(v UpdateCallReqListenStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateCallReqListenStatus) Get() (v UpdateCallReqListenStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateCallReqListenStatus) Or(d UpdateCallReqListenStatus) UpdateCallReqListenStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateCallReqMuteStatus returns new OptUpdateCallReqMuteStatus with value set to v.
func NewOptUpdateCallReqMuteStatus(v UpdateCallReqMuteStatus) OptUpdateCallReqMuteStatus {
	return OptUpdateCallReqMuteStatus{
		Value: v,
		Set:   true,
	}
}

// OptUpdateCallReqMuteStatus is optional UpdateCallReqMuteStatus.
type OptUpdateCallReqMuteStatus struct {
	Value UpdateCallReqMuteStatus
	Set   bool
}

// IsSet returns true if OptUpdateCallReqMuteStatus was set.
func (o OptUpdateCallReqMuteStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateCallReqMuteStatus) Reset() {
	var v UpdateCallReqMuteStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateCallReqMuteStatus) SetTo(v UpdateCallReqMuteStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateCallReqMuteStatus) Get() (v UpdateCallReqMuteStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateCallReqMuteStatus) Or(d UpdateCallReqMuteStatus) UpdateCallReqMuteStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateCallReqRecord returns new OptUpdateCallReqRecord with value set to v.
func NewOptUpdateCallReqRecord(v UpdateCallReqRecord) OptUpdateCallReqRecord {
	return OptUpdateCallReqRecord{
		Value: v,
		Set:   true,
	}
}

// OptUpdateCallReqRecord is optional UpdateCallReqRecord.
type OptUpdateCallReqRecord struct {
	Value UpdateCallReqRecord
	Set   bool
}

// IsSet returns true if OptUpdateCallReqRecord was set.
func (o OptUpdateCallReqRecord) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateCallReqRecord) Reset() {
	var v UpdateCallReqRecord
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateCallReqRecord) SetTo(v UpdateCallReqRecord) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateCallReqRecord) Get() (v UpdateCallReqRecord, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateCallReqRecord) Or(d UpdateCallReqRecord) UpdateCallReqRecord {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateCallReqRecordAction returns new OptUpdateCallReqRecordAction with value set to v.
func NewOptUpdateCallReqRecordAction(v UpdateCallReqRecordAction) OptUpdateCallReqRecordAction {
	return OptUpdateCallReqRecordAction{
		Value: v,
		Set:   true,
	}
}

// OptUpdateCallReqRecordAction is optional UpdateCallReqRecordAction.
type OptUpdateCallReqRecordAction struct {
	Value UpdateCallReqRecordAction
	Set   bool
}

// IsSet returns true if OptUpdateCallReqRecordAction was set.
func (o OptUpdateCallReqRecordAction) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateCallReqRecordAction) Reset() {
	var v UpdateCallReqRecordAction
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateCallReqRecordAction) SetTo(v UpdateCallReqRecordAction) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateCallReqRecordAction) Get() (v UpdateCallReqRecordAction, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateCallReqRecordAction) Or(d UpdateCallReqRecordAction) UpdateCallReqRecordAction {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateCallReqSipRequest returns new OptUpdateCallReqSipRequest with value set to v.
func NewOptUpdateCallReqSipRequest(v UpdateCallReqSipRequest) OptUpdateCallReqSipRequest {
	return OptUpdateCallReqSipRequest{
		Value: v,
		Set:   true,
	}
}

// OptUpdateCallReqSipRequest is optional UpdateCallReqSipRequest.
type OptUpdateCallReqSipRequest struct {
	Value UpdateCallReqSipRequest
	Set   bool
}

// IsSet returns true if OptUpdateCallReqSipRequest was set.
func (o OptUpdateCallReqSipRequest) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateCallReqSipRequest) Reset() {
	var v UpdateCallReqSipRequest
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateCallReqSipRequest) SetTo(v UpdateCallReqSipRequest) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateCallReqSipRequest) Get() (v UpdateCallReqSipRequest, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateCallReqSipRequest) Or(d UpdateCallReqSipRequest) UpdateCallReqSipRequest {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateUserReq returns new OptUpdateUserReq with value set to v.
func NewOptUpdateUserReq(v UpdateUserReq) OptUpdateUserReq {
	return OptUpdateUserReq{
		Value: v,
		Set:   true,
	}
}

// OptUpdateUserReq is optional UpdateUserReq.
type OptUpdateUserReq struct {
	Value UpdateUserReq
	Set   bool
}

// IsSet returns true if OptUpdateUserReq was set.
func (o OptUpdateUserReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateUserReq) Reset() {
	var v UpdateUserReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateUserReq) SetTo(v UpdateUserReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateUserReq) Get() (v UpdateUserReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateUserReq) Or(d UpdateUserReq) UpdateUserReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserAndAccountDetailAccount returns new OptUserAndAccountDetailAccount with value set to v.
func NewOptUserAndAccountDetailAccount(v UserAndAccountDetailAccount) OptUserAndAccountDetailAccount {
	return OptUserAndAccountDetailAccount{
		Value: v,
		Set:   true,
	}
}

// OptUserAndAccountDetailAccount is optional UserAndAccountDetailAccount.
type OptUserAndAccountDetailAccount struct {
	Value UserAndAccountDetailAccount
	Set   bool
}

// IsSet returns true if OptUserAndAccountDetailAccount was set.
func (o OptUserAndAccountDetailAccount) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserAndAccountDetailAccount) Reset() {
	var v UserAndAccountDetailAccount
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserAndAccountDetailAccount) SetTo(v UserAndAccountDetailAccount) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserAndAccountDetailAccount) Get() (v UserAndAccountDetailAccount, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserAndAccountDetailAccount) Or(d UserAndAccountDetailAccount) UserAndAccountDetailAccount {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserAndAccountDetailBalance returns new OptUserAndAccountDetailBalance with value set to v.
func NewOptUserAndAccountDetailBalance(v UserAndAccountDetailBalance) OptUserAndAccountDetailBalance {
	return OptUserAndAccountDetailBalance{
		Value: v,
		Set:   true,
	}
}

// OptUserAndAccountDetailBalance is optional UserAndAccountDetailBalance.
type OptUserAndAccountDetailBalance struct {
	Value UserAndAccountDetailBalance
	Set   bool
}

// IsSet returns true if OptUserAndAccountDetailBalance was set.
func (o OptUserAndAccountDetailBalance) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserAndAccountDetailBalance) Reset() {
	var v UserAndAccountDetailBalance
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserAndAccountDetailBalance) SetTo(v UserAndAccountDetailBalance) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserAndAccountDetailBalance) Get() (v UserAndAccountDetailBalance, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserAndAccountDetailBalance) Or(d UserAndAccountDetailBalance) UserAndAccountDetailBalance {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserAndAccountDetailBalanceCurrency returns new OptUserAndAccountDetailBalanceCurrency with value set to v.
func NewOptUserAndAccountDetailBalanceCurrency(v UserAndAccountDetailBalanceCurrency) OptUserAndAccountDetailBalanceCurrency {
	return OptUserAndAccountDetailBalanceCurrency{
		Value: v,
		Set:   true,
	}
}

// OptUserAndAccountDetailBalanceCurrency is optional UserAndAccountDetailBalanceCurrency.
type OptUserAndAccountDetailBalanceCurrency struct {
	Value UserAndAccountDetailBalanceCurrency
	Set   bool
}

// IsSet returns true if OptUserAndAccountDetailBalanceCurrency was set.
func (o OptUserAndAccountDetailBalanceCurrency) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserAndAccountDetailBalanceCurrency) Reset() {
	var v UserAndAccountDetailBalanceCurrency
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserAndAccountDetailBalanceCurrency) SetTo(v UserAndAccountDetailBalanceCurrency) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserAndAccountDetailBalanceCurrency) Get() (v UserAndAccountDetailBalanceCurrency, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserAndAccountDetailBalanceCurrency) Or(d UserAndAccountDetailBalanceCurrency) UserAndAccountDetailBalanceCurrency {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserAndAccountDetailCapacities returns new OptUserAndAccountDetailCapacities with value set to v.
func NewOptUserAndAccountDetailCapacities(v UserAndAccountDetailCapacities) OptUserAndAccountDetailCapacities {
	return OptUserAndAccountDetailCapacities{
		Value: v,
		Set:   true,
	}
}

// OptUserAndAccountDetailCapacities is optional UserAndAccountDetailCapacities.
type OptUserAndAccountDetailCapacities struct {
	Value UserAndAccountDetailCapacities
	Set   bool
}

// IsSet returns true if OptUserAndAccountDetailCapacities was set.
func (o OptUserAndAccountDetailCapacities) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserAndAccountDetailCapacities) Reset() {
	var v UserAndAccountDetailCapacities
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserAndAccountDetailCapacities) SetTo(v UserAndAccountDetailCapacities) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserAndAccountDetailCapacities) Get() (v UserAndAccountDetailCapacities, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserAndAccountDetailCapacities) Or(d UserAndAccountDetailCapacities) UserAndAccountDetailCapacities {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserAndAccountDetailTestapp returns new OptUserAndAccountDetailTestapp with value set to v.
func NewOptUserAndAccountDetailTestapp(v UserAndAccountDetailTestapp) OptUserAndAccountDetailTestapp {
	return OptUserAndAccountDetailTestapp{
		Value: v,
		Set:   true,
	}
}

// OptUserAndAccountDetailTestapp is optional UserAndAccountDetailTestapp.
type OptUserAndAccountDetailTestapp struct {
	Value UserAndAccountDetailTestapp
	Set   bool
}

// IsSet returns true if OptUserAndAccountDetailTestapp was set.
func (o OptUserAndAccountDetailTestapp) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserAndAccountDetailTestapp) Reset() {
	var v UserAndAccountDetailTestapp
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserAndAccountDetailTestapp) SetTo(v UserAndAccountDetailTestapp) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserAndAccountDetailTestapp) Get() (v UserAndAccountDetailTestapp, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserAndAccountDetailTestapp) Or(d UserAndAccountDetailTestapp) UserAndAccountDetailTestapp {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserAndAccountDetailUser returns new OptUserAndAccountDetailUser with value set to v.
func NewOptUserAndAccountDetailUser(v UserAndAccountDetailUser) OptUserAndAccountDetailUser {
	return OptUserAndAccountDetailUser{
		Value: v,
		Set:   true,
	}
}

// OptUserAndAccountDetailUser is optional UserAndAccountDetailUser.
type OptUserAndAccountDetailUser struct {
	Value UserAndAccountDetailUser
	Set   bool
}

// IsSet returns true if OptUserAndAccountDetailUser was set.
func (o OptUserAndAccountDetailUser) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserAndAccountDetailUser) Reset() {
	var v UserAndAccountDetailUser
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserAndAccountDetailUser) SetTo(v UserAndAccountDetailUser) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserAndAccountDetailUser) Get() (v UserAndAccountDetailUser, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserAndAccountDetailUser) Or(d UserAndAccountDetailUser) UserAndAccountDetailUser {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptValidateActivationCodeReq returns new OptValidateActivationCodeReq with value set to v.
func NewOptValidateActivationCodeReq(v ValidateActivationCodeReq) OptValidateActivationCodeReq {
	return OptValidateActivationCodeReq{
		Value: v,
		Set:   true,
	}
}

// OptValidateActivationCodeReq is optional ValidateActivationCodeReq.
type OptValidateActivationCodeReq struct {
	Value ValidateActivationCodeReq
	Set   bool
}

// IsSet returns true if OptValidateActivationCodeReq was set.
func (o OptValidateActivationCodeReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptValidateActivationCodeReq) Reset() {
	var v ValidateActivationCodeReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptValidateActivationCodeReq) SetTo(v ValidateActivationCodeReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptValidateActivationCodeReq) Get() (v ValidateActivationCodeReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptValidateActivationCodeReq) Or(d ValidateActivationCodeReq) ValidateActivationCodeReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptValidateActivationCodeReqType returns new OptValidateActivationCodeReqType with value set to v.
func NewOptValidateActivationCodeReqType(v ValidateActivationCodeReqType) OptValidateActivationCodeReqType {
	return OptValidateActivationCodeReqType{
		Value: v,
		Set:   true,
	}
}

// OptValidateActivationCodeReqType is optional ValidateActivationCodeReqType.
type OptValidateActivationCodeReqType struct {
	Value ValidateActivationCodeReqType
	Set   bool
}

// IsSet returns true if OptValidateActivationCodeReqType was set.
func (o OptValidateActivationCodeReqType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptValidateActivationCodeReqType) Reset() {
	var v ValidateActivationCodeReqType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptValidateActivationCodeReqType) SetTo(v ValidateActivationCodeReqType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptValidateActivationCodeReqType) Get() (v ValidateActivationCodeReqType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptValidateActivationCodeReqType) Or(d ValidateActivationCodeReqType) ValidateActivationCodeReqType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptValidateInviteCodeReq returns new OptValidateInviteCodeReq with value set to v.
func NewOptValidateInviteCodeReq(v ValidateInviteCodeReq) OptValidateInviteCodeReq {
	return OptValidateInviteCodeReq{
		Value: v,
		Set:   true,
	}
}

// OptValidateInviteCodeReq is optional ValidateInviteCodeReq.
type OptValidateInviteCodeReq struct {
	Value ValidateInviteCodeReq
	Set   bool
}

// IsSet returns true if OptValidateInviteCodeReq was set.
func (o OptValidateInviteCodeReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptValidateInviteCodeReq) Reset() {
	var v ValidateInviteCodeReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptValidateInviteCodeReq) SetTo(v ValidateInviteCodeReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptValidateInviteCodeReq) Get() (v ValidateInviteCodeReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptValidateInviteCodeReq) Or(d ValidateInviteCodeReq) ValidateInviteCodeReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVoipCarrier returns new OptVoipCarrier with value set to v.
func NewOptVoipCarrier(v VoipCarrier) OptVoipCarrier {
	return OptVoipCarrier{
		Value: v,
		Set:   true,
	}
}

// OptVoipCarrier is optional VoipCarrier.
type OptVoipCarrier struct {
	Value VoipCarrier
	Set   bool
}

// IsSet returns true if OptVoipCarrier was set.
func (o OptVoipCarrier) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVoipCarrier) Reset() {
	var v VoipCarrier
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVoipCarrier) SetTo(v VoipCarrier) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVoipCarrier) Get() (v VoipCarrier, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVoipCarrier) Or(d VoipCarrier) VoipCarrier {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebhook returns new OptWebhook with value set to v.
func NewOptWebhook(v Webhook) OptWebhook {
	return OptWebhook{
		Value: v,
		Set:   true,
	}
}

// OptWebhook is optional Webhook.
type OptWebhook struct {
	Value Webhook
	Set   bool
}

// IsSet returns true if OptWebhook was set.
func (o OptWebhook) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebhook) Reset() {
	var v Webhook
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebhook) SetTo(v Webhook) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebhook) Get() (v Webhook, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebhook) Or(d Webhook) Webhook {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/PhoneNumber
type PhoneNumber struct {
	PhoneNumberSid uuid.UUID  `json:"phone_number_sid"`
	Number         string     `json:"number"`
	VoipCarrierSid uuid.UUID  `json:"voip_carrier_sid"`
	AccountSid     OptUUID    `json:"account_sid"`
	ApplicationSid OptNilUUID `json:"application_sid"`
}

// GetPhoneNumberSid returns the value of PhoneNumberSid.
func (s *PhoneNumber) GetPhoneNumberSid() uuid.UUID {
	return s.PhoneNumberSid
}

// GetNumber returns the value of Number.
func (s *PhoneNumber) GetNumber() string {
	return s.Number
}

// GetVoipCarrierSid returns the value of VoipCarrierSid.
func (s *PhoneNumber) GetVoipCarrierSid() uuid.UUID {
	return s.VoipCarrierSid
}

// GetAccountSid returns the value of AccountSid.
func (s *PhoneNumber) GetAccountSid() OptUUID {
	return s.AccountSid
}

// GetApplicationSid returns the value of ApplicationSid.
func (s *PhoneNumber) GetApplicationSid() OptNilUUID {
	return s.ApplicationSid
}

// SetPhoneNumberSid sets the value of PhoneNumberSid.
func (s *PhoneNumber) SetPhoneNumberSid(val uuid.UUID) {
	s.PhoneNumberSid = val
}

// SetNumber sets the value of Number.
func (s *PhoneNumber) SetNumber(val string) {
	s.Number = val
}

// SetVoipCarrierSid sets the value of VoipCarrierSid.
func (s *PhoneNumber) SetVoipCarrierSid(val uuid.UUID) {
	s.VoipCarrierSid = val
}

// SetAccountSid sets the value of AccountSid.
func (s *PhoneNumber) SetAccountSid(val OptUUID) {
	s.AccountSid = val
}

// SetApplicationSid sets the value of ApplicationSid.
func (s *PhoneNumber) SetApplicationSid(val OptNilUUID) {
	s.ApplicationSid = val
}

func (*PhoneNumber) getPhoneNumberRes() {}

// Ref: #/components/schemas/PredefinedCarrier
type PredefinedCarrier struct {
	PredefinedCarrierSid      uuid.UUID `json:"predefined_carrier_sid"`
	Name                      string    `json:"name"`
	RequiresStaticIP          bool      `json:"requires_static_ip"`
	E164LeadingPlus           bool      `json:"e164_leading_plus"`
	RequiresRegister          bool      `json:"requires_register"`
	RegisterUsername          OptString `json:"register_username"`
	RegisterSipRealm          OptString `json:"register_sip_realm"`
	RegisterPassword          OptString `json:"register_password"`
	RegisterFromUser          OptString `json:"register_from_user"`
	RegisterFromDomain        OptString `json:"register_from_domain"`
	RegisterPublicIPInContact OptBool   `json:"register_public_ip_in_contact"`
	TechPrefix                OptString `json:"tech_prefix"`
	InboundAuthUsername       OptString `json:"inbound_auth_username"`
	InboundAuthPassword       OptString `json:"inbound_auth_password"`
	Diversion                 OptString `json:"diversion"`
}

// GetPredefinedCarrierSid returns the value of PredefinedCarrierSid.
func (s *PredefinedCarrier) GetPredefinedCarrierSid() uuid.UUID {
	return s.PredefinedCarrierSid
}

// GetName returns the value of Name.
func (s *PredefinedCarrier) GetName() string {
	return s.Name
}

// GetRequiresStaticIP returns the value of RequiresStaticIP.
func (s *PredefinedCarrier) GetRequiresStaticIP() bool {
	return s.RequiresStaticIP
}

// GetE164LeadingPlus returns the value of E164LeadingPlus.
func (s *PredefinedCarrier) GetE164LeadingPlus() bool {
	return s.E164LeadingPlus
}

// GetRequiresRegister returns the value of RequiresRegister.
func (s *PredefinedCarrier) GetRequiresRegister() bool {
	return s.RequiresRegister
}

// GetRegisterUsername returns the value of RegisterUsername.
func (s *PredefinedCarrier) GetRegisterUsername() OptString {
	return s.RegisterUsername
}

// GetRegisterSipRealm returns the value of RegisterSipRealm.
func (s *PredefinedCarrier) GetRegisterSipRealm() OptString {
	return s.RegisterSipRealm
}

// GetRegisterPassword returns the value of RegisterPassword.
func (s *PredefinedCarrier) GetRegisterPassword() OptString {
	return s.RegisterPassword
}

// GetRegisterFromUser returns the value of RegisterFromUser.
func (s *PredefinedCarrier) GetRegisterFromUser() OptString {
	return s.RegisterFromUser
}

// GetRegisterFromDomain returns the value of RegisterFromDomain.
func (s *PredefinedCarrier) GetRegisterFromDomain() OptString {
	return s.RegisterFromDomain
}

// GetRegisterPublicIPInContact returns the value of RegisterPublicIPInContact.
func (s *PredefinedCarrier) GetRegisterPublicIPInContact() OptBool {
	return s.RegisterPublicIPInContact
}

// GetTechPrefix returns the value of TechPrefix.
func (s *PredefinedCarrier) GetTechPrefix() OptString {
	return s.TechPrefix
}

// GetInboundAuthUsername returns the value of InboundAuthUsername.
func (s *PredefinedCarrier) GetInboundAuthUsername() OptString {
	return s.InboundAuthUsername
}

// GetInboundAuthPassword returns the value of InboundAuthPassword.
func (s *PredefinedCarrier) GetInboundAuthPassword() OptString {
	return s.InboundAuthPassword
}

// GetDiversion returns the value of Diversion.
func (s *PredefinedCarrier) GetDiversion() OptString {
	return s.Diversion
}

// SetPredefinedCarrierSid sets the value of PredefinedCarrierSid.
func (s *PredefinedCarrier) SetPredefinedCarrierSid(val uuid.UUID) {
	s.PredefinedCarrierSid = val
}

// SetName sets the value of Name.
func (s *PredefinedCarrier) SetName(val string) {
	s.Name = val
}

// SetRequiresStaticIP sets the value of RequiresStaticIP.
func (s *PredefinedCarrier) SetRequiresStaticIP(val bool) {
	s.RequiresStaticIP = val
}

// SetE164LeadingPlus sets the value of E164LeadingPlus.
func (s *PredefinedCarrier) SetE164LeadingPlus(val bool) {
	s.E164LeadingPlus = val
}

// SetRequiresRegister sets the value of RequiresRegister.
func (s *PredefinedCarrier) SetRequiresRegister(val bool) {
	s.RequiresRegister = val
}

// SetRegisterUsername sets the value of RegisterUsername.
func (s *PredefinedCarrier) SetRegisterUsername(val OptString) {
	s.RegisterUsername = val
}

// SetRegisterSipRealm sets the value of RegisterSipRealm.
func (s *PredefinedCarrier) SetRegisterSipRealm(val OptString) {
	s.RegisterSipRealm = val
}

// SetRegisterPassword sets the value of RegisterPassword.
func (s *PredefinedCarrier) SetRegisterPassword(val OptString) {
	s.RegisterPassword = val
}

// SetRegisterFromUser sets the value of RegisterFromUser.
func (s *PredefinedCarrier) SetRegisterFromUser(val OptString) {
	s.RegisterFromUser = val
}

// SetRegisterFromDomain sets the value of RegisterFromDomain.
func (s *PredefinedCarrier) SetRegisterFromDomain(val OptString) {
	s.RegisterFromDomain = val
}

// SetRegisterPublicIPInContact sets the value of RegisterPublicIPInContact.
func (s *PredefinedCarrier) SetRegisterPublicIPInContact(val OptBool) {
	s.RegisterPublicIPInContact = val
}

// SetTechPrefix sets the value of TechPrefix.
func (s *PredefinedCarrier) SetTechPrefix(val OptString) {
	s.TechPrefix = val
}

// SetInboundAuthUsername sets the value of InboundAuthUsername.
func (s *PredefinedCarrier) SetInboundAuthUsername(val OptString) {
	s.InboundAuthUsername = val
}

// SetInboundAuthPassword sets the value of InboundAuthPassword.
func (s *PredefinedCarrier) SetInboundAuthPassword(val OptString) {
	s.InboundAuthPassword = val
}

// SetDiversion sets the value of Diversion.
func (s *PredefinedCarrier) SetDiversion(val OptString) {
	s.Diversion = val
}

// Ref: #/components/schemas/Product
type Product struct {
	ProductSid  string    `json:"product_sid"`
	Name        string    `json:"name"`
	Description OptString `json:"description"`
	UnitLabel   string    `json:"unit_label"`
	Category    string    `json:"category"`
}

// GetProductSid returns the value of ProductSid.
func (s *Product) GetProductSid() string {
	return s.ProductSid
}

// GetName returns the value of Name.
func (s *Product) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *Product) GetDescription() OptString {
	return s.Description
}

// GetUnitLabel returns the value of UnitLabel.
func (s *Product) GetUnitLabel() string {
	return s.UnitLabel
}

// GetCategory returns the value of Category.
func (s *Product) GetCategory() string {
	return s.Category
}

// SetProductSid sets the value of ProductSid.
func (s *Product) SetProductSid(val string) {
	s.ProductSid = val
}

// SetName sets the value of Name.
func (s *Product) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *Product) SetDescription(val OptString) {
	s.Description = val
}

// SetUnitLabel sets the value of UnitLabel.
func (s *Product) SetUnitLabel(val string) {
	s.UnitLabel = val
}

// SetCategory sets the value of Category.
func (s *Product) SetCategory(val string) {
	s.Category = val
}

type ProvisionPhoneNumberBadRequest GeneralError

func (*ProvisionPhoneNumberBadRequest) provisionPhoneNumberRes() {}

type ProvisionPhoneNumberInternalServerError GeneralError

func (*ProvisionPhoneNumberInternalServerError) provisionPhoneNumberRes() {}

// ProvisionPhoneNumberNotFound is response for ProvisionPhoneNumber operation.
type ProvisionPhoneNumberNotFound struct{}

func (*ProvisionPhoneNumberNotFound) provisionPhoneNumberRes() {}

type ProvisionPhoneNumberReq struct {
	AccountSid     uuid.UUID `json:"account_sid"`
	ApplicationSid OptUUID   `json:"application_sid"`
	// Telephone number.
	Number         string    `json:"number"`
	VoipCarrierSid uuid.UUID `json:"voip_carrier_sid"`
}

// GetAccountSid returns the value of AccountSid.
func (s *ProvisionPhoneNumberReq) GetAccountSid() uuid.UUID {
	return s.AccountSid
}

// GetApplicationSid returns the value of ApplicationSid.
func (s *ProvisionPhoneNumberReq) GetApplicationSid() OptUUID {
	return s.ApplicationSid
}

// GetNumber returns the value of Number.
func (s *ProvisionPhoneNumberReq) GetNumber() string {
	return s.Number
}

// GetVoipCarrierSid returns the value of VoipCarrierSid.
func (s *ProvisionPhoneNumberReq) GetVoipCarrierSid() uuid.UUID {
	return s.VoipCarrierSid
}

// SetAccountSid sets the value of AccountSid.
func (s *ProvisionPhoneNumberReq) SetAccountSid(val uuid.UUID) {
	s.AccountSid = val
}

// SetApplicationSid sets the value of ApplicationSid.
func (s *ProvisionPhoneNumberReq) SetApplicationSid(val OptUUID) {
	s.ApplicationSid = val
}

// SetNumber sets the value of Number.
func (s *ProvisionPhoneNumberReq) SetNumber(val string) {
	s.Number = val
}

// SetVoipCarrierSid sets the value of VoipCarrierSid.
func (s *ProvisionPhoneNumberReq) SetVoipCarrierSid(val uuid.UUID) {
	s.VoipCarrierSid = val
}

type ProvisionPhoneNumberUnprocessableEntity GeneralError

func (*ProvisionPhoneNumberUnprocessableEntity) provisionPhoneNumberRes() {}

type PutTenantInternalServerError GeneralError

func (*PutTenantInternalServerError) putTenantRes() {}

// PutTenantNoContent is response for PutTenant operation.
type PutTenantNoContent struct{}

func (*PutTenantNoContent) putTenantRes() {}

// PutTenantNotFound is response for PutTenant operation.
type PutTenantNotFound struct{}

func (*PutTenantNotFound) putTenantRes() {}

type PutTenantUnprocessableEntity GeneralError

func (*PutTenantUnprocessableEntity) putTenantRes() {}

type RegisterUserBadRequest GeneralError

func (*RegisterUserBadRequest) registerUserRes() {}

type RegisterUserForbidden GeneralError

func (*RegisterUserForbidden) registerUserRes() {}

type RegisterUserInternalServerError GeneralError

func (*RegisterUserInternalServerError) registerUserRes() {}

type RegisterUserReq struct {
	ServiceProviderSid  string                  `json:"service_provider_sid"`
	Provider            RegisterUserReqProvider `json:"provider"`
	Email               OptString               `json:"email"`
	Password            OptString               `json:"password"`
	EmailActivationCode OptString               `json:"email_activation_code"`
	OAuth2Code          OptString               `json:"oauth2_code"`
	OAuth2State         OptString               `json:"oauth2_state"`
	OAuth2ClientID      OptString               `json:"oauth2_client_id"`
	OAuth2RedirectURI   OptString               `json:"oauth2_redirect_uri"`
}

// GetServiceProviderSid returns the value of ServiceProviderSid.
func (s *RegisterUserReq) GetServiceProviderSid() string {
	return s.ServiceProviderSid
}

// GetProvider returns the value of Provider.
func (s *RegisterUserReq) GetProvider() RegisterUserReqProvider {
	return s.Provider
}

// GetEmail returns the value of Email.
func (s *RegisterUserReq) GetEmail() OptString {
	return s.Email
}

// GetPassword returns the value of Password.
func (s *RegisterUserReq) GetPassword() OptString {
	return s.Password
}

// GetEmailActivationCode returns the value of EmailActivationCode.
func (s *RegisterUserReq) GetEmailActivationCode() OptString {
	return s.EmailActivationCode
}

// GetOAuth2Code returns the value of OAuth2Code.
func (s *RegisterUserReq) GetOAuth2Code() OptString {
	return s.OAuth2Code
}

// GetOAuth2State returns the value of OAuth2State.
func (s *RegisterUserReq) GetOAuth2State() OptString {
	return s.OAuth2State
}

// GetOAuth2ClientID returns the value of OAuth2ClientID.
func (s *RegisterUserReq) GetOAuth2ClientID() OptString {
	return s.OAuth2ClientID
}

// GetOAuth2RedirectURI returns the value of OAuth2RedirectURI.
func (s *RegisterUserReq) GetOAuth2RedirectURI() OptString {
	return s.OAuth2RedirectURI
}

// SetServiceProviderSid sets the value of ServiceProviderSid.
func (s *RegisterUserReq) SetServiceProviderSid(val string) {
	s.ServiceProviderSid = val
}

// SetProvider sets the value of Provider.
func (s *RegisterUserReq) SetProvider(val RegisterUserReqProvider) {
	s.Provider = val
}

// SetEmail sets the value of Email.
func (s *RegisterUserReq) SetEmail(val OptString) {
	s.Email = val
}

// SetPassword sets the value of Password.
func (s *RegisterUserReq) SetPassword(val OptString) {
	s.Password = val
}

// SetEmailActivationCode sets the value of EmailActivationCode.
func (s *RegisterUserReq) SetEmailActivationCode(val OptString) {
	s.EmailActivationCode = val
}

// SetOAuth2Code sets the value of OAuth2Code.
func (s *RegisterUserReq) SetOAuth2Code(val OptString) {
	s.OAuth2Code = val
}

// SetOAuth2State sets the value of OAuth2State.
func (s *RegisterUserReq) SetOAuth2State(val OptString) {
	s.OAuth2State = val
}

// SetOAuth2ClientID sets the value of OAuth2ClientID.
func (s *RegisterUserReq) SetOAuth2ClientID(val OptString) {
	s.OAuth2ClientID = val
}

// SetOAuth2RedirectURI sets the value of OAuth2RedirectURI.
func (s *RegisterUserReq) SetOAuth2RedirectURI(val OptString) {
	s.OAuth2RedirectURI = val
}

type RegisterUserReqProvider string

const (
	RegisterUserReqProviderGithub  RegisterUserReqProvider = "github"
	RegisterUserReqProviderGoogle  RegisterUserReqProvider = "google"
	RegisterUserReqProviderTwitter RegisterUserReqProvider = "twitter"
	RegisterUserReqProviderLocal   RegisterUserReqProvider = "local"
)

// AllValues returns all RegisterUserReqProvider values.
func (RegisterUserReqProvider) AllValues() []RegisterUserReqProvider {
	return []RegisterUserReqProvider{
		RegisterUserReqProviderGithub,
		RegisterUserReqProviderGoogle,
		RegisterUserReqProviderTwitter,
		RegisterUserReqProviderLocal,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RegisterUserReqProvider) MarshalText() ([]byte, error) {
	switch s {
	case RegisterUserReqProviderGithub:
		return []byte(s), nil
	case RegisterUserReqProviderGoogle:
		return []byte(s), nil
	case RegisterUserReqProviderTwitter:
		return []byte(s), nil
	case RegisterUserReqProviderLocal:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RegisterUserReqProvider) UnmarshalText(data []byte) error {
	switch RegisterUserReqProvider(data) {
	case RegisterUserReqProviderGithub:
		*s = RegisterUserReqProviderGithub
		return nil
	case RegisterUserReqProviderGoogle:
		*s = RegisterUserReqProviderGoogle
		return nil
	case RegisterUserReqProviderTwitter:
		*s = RegisterUserReqProviderTwitter
		return nil
	case RegisterUserReqProviderLocal:
		*s = RegisterUserReqProviderLocal
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type RegisterUserUnprocessableEntity GeneralError

func (*RegisterUserUnprocessableEntity) registerUserRes() {}

// Ref: #/components/schemas/RegisteredClient
type RegisteredClient struct {
	Name                    string                              `json:"name"`
	Contact                 OptString                           `json:"contact"`
	ExpiryTime              OptFloat64                          `json:"expiryTime"`
	Protocol                OptString                           `json:"protocol"`
	AllowDirectAppCalling   OptFloat64                          `json:"allow_direct_app_calling"`
	AllowDirectQueueCalling OptFloat64                          `json:"allow_direct_queue_calling"`
	AllowDirectUserCalling  OptFloat64                          `json:"allow_direct_user_calling"`
	RegisteredStatus        OptRegisteredClientRegisteredStatus `json:"registered_status"`
}

// GetName returns the value of Name.
func (s *RegisteredClient) GetName() string {
	return s.Name
}

// GetContact returns the value of Contact.
func (s *RegisteredClient) GetContact() OptString {
	return s.Contact
}

// GetExpiryTime returns the value of ExpiryTime.
func (s *RegisteredClient) GetExpiryTime() OptFloat64 {
	return s.ExpiryTime
}

// GetProtocol returns the value of Protocol.
func (s *RegisteredClient) GetProtocol() OptString {
	return s.Protocol
}

// GetAllowDirectAppCalling returns the value of AllowDirectAppCalling.
func (s *RegisteredClient) GetAllowDirectAppCalling() OptFloat64 {
	return s.AllowDirectAppCalling
}

// GetAllowDirectQueueCalling returns the value of AllowDirectQueueCalling.
func (s *RegisteredClient) GetAllowDirectQueueCalling() OptFloat64 {
	return s.AllowDirectQueueCalling
}

// GetAllowDirectUserCalling returns the value of AllowDirectUserCalling.
func (s *RegisteredClient) GetAllowDirectUserCalling() OptFloat64 {
	return s.AllowDirectUserCalling
}

// GetRegisteredStatus returns the value of RegisteredStatus.
func (s *RegisteredClient) GetRegisteredStatus() OptRegisteredClientRegisteredStatus {
	return s.RegisteredStatus
}

// SetName sets the value of Name.
func (s *RegisteredClient) SetName(val string) {
	s.Name = val
}

// SetContact sets the value of Contact.
func (s *RegisteredClient) SetContact(val OptString) {
	s.Contact = val
}

// SetExpiryTime sets the value of ExpiryTime.
func (s *RegisteredClient) SetExpiryTime(val OptFloat64) {
	s.ExpiryTime = val
}

// SetProtocol sets the value of Protocol.
func (s *RegisteredClient) SetProtocol(val OptString) {
	s.Protocol = val
}

// SetAllowDirectAppCalling sets the value of AllowDirectAppCalling.
func (s *RegisteredClient) SetAllowDirectAppCalling(val OptFloat64) {
	s.AllowDirectAppCalling = val
}

// SetAllowDirectQueueCalling sets the value of AllowDirectQueueCalling.
func (s *RegisteredClient) SetAllowDirectQueueCalling(val OptFloat64) {
	s.AllowDirectQueueCalling = val
}

// SetAllowDirectUserCalling sets the value of AllowDirectUserCalling.
func (s *RegisteredClient) SetAllowDirectUserCalling(val OptFloat64) {
	s.AllowDirectUserCalling = val
}

// SetRegisteredStatus sets the value of RegisteredStatus.
func (s *RegisteredClient) SetRegisteredStatus(val OptRegisteredClientRegisteredStatus) {
	s.RegisteredStatus = val
}

type RegisteredClientRegisteredStatus string

const (
	RegisteredClientRegisteredStatusActive   RegisteredClientRegisteredStatus = "active"
	RegisteredClientRegisteredStatusInactive RegisteredClientRegisteredStatus = "inactive"
)

// AllValues returns all RegisteredClientRegisteredStatus values.
func (RegisteredClientRegisteredStatus) AllValues() []RegisteredClientRegisteredStatus {
	return []RegisteredClientRegisteredStatus{
		RegisteredClientRegisteredStatusActive,
		RegisteredClientRegisteredStatusInactive,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RegisteredClientRegisteredStatus) MarshalText() ([]byte, error) {
	switch s {
	case RegisteredClientRegisteredStatusActive:
		return []byte(s), nil
	case RegisteredClientRegisteredStatusInactive:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RegisteredClientRegisteredStatus) UnmarshalText(data []byte) error {
	switch RegisteredClientRegisteredStatus(data) {
	case RegisteredClientRegisteredStatusActive:
		*s = RegisteredClientRegisteredStatusActive
		return nil
	case RegisteredClientRegisteredStatusInactive:
		*s = RegisteredClientRegisteredStatusInactive
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// RetrieveInvoiceNotFound is response for RetrieveInvoice operation.
type RetrieveInvoiceNotFound struct{}

func (*RetrieveInvoiceNotFound) retrieveInvoiceRes() {}

type RetrieveInvoiceOK struct{}

func (*RetrieveInvoiceOK) retrieveInvoiceRes() {}

// SendActivationCodeNoContent is response for SendActivationCode operation.
type SendActivationCodeNoContent struct{}

func (*SendActivationCodeNoContent) sendActivationCodeRes() {}

// SendActivationCodeNotFound is response for SendActivationCode operation.
type SendActivationCodeNotFound struct{}

func (*SendActivationCodeNotFound) sendActivationCodeRes() {}

type SendActivationCodeReq struct {
	// Activation code.
	Code OptString `json:"code"`
	// Identifies user to send to.
	UserSid OptUUID                      `json:"user_sid"`
	Type    OptSendActivationCodeReqType `json:"type"`
	// The new email or phone number to be activated.
	Value OptString `json:"value"`
}

// GetCode returns the value of Code.
func (s *SendActivationCodeReq) GetCode() OptString {
	return s.Code
}

// GetUserSid returns the value of UserSid.
func (s *SendActivationCodeReq) GetUserSid() OptUUID {
	return s.UserSid
}

// GetType returns the value of Type.
func (s *SendActivationCodeReq) GetType() OptSendActivationCodeReqType {
	return s.Type
}

// GetValue returns the value of Value.
func (s *SendActivationCodeReq) GetValue() OptString {
	return s.Value
}

// SetCode sets the value of Code.
func (s *SendActivationCodeReq) SetCode(val OptString) {
	s.Code = val
}

// SetUserSid sets the value of UserSid.
func (s *SendActivationCodeReq) SetUserSid(val OptUUID) {
	s.UserSid = val
}

// SetType sets the value of Type.
func (s *SendActivationCodeReq) SetType(val OptSendActivationCodeReqType) {
	s.Type = val
}

// SetValue sets the value of Value.
func (s *SendActivationCodeReq) SetValue(val OptString) {
	s.Value = val
}

type SendActivationCodeReqType string

const (
	SendActivationCodeReqTypeEmail SendActivationCodeReqType = "email"
	SendActivationCodeReqTypePhone SendActivationCodeReqType = "phone"
)

// AllValues returns all SendActivationCodeReqType values.
func (SendActivationCodeReqType) AllValues() []SendActivationCodeReqType {
	return []SendActivationCodeReqType{
		SendActivationCodeReqTypeEmail,
		SendActivationCodeReqTypePhone,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SendActivationCodeReqType) MarshalText() ([]byte, error) {
	switch s {
	case SendActivationCodeReqTypeEmail:
		return []byte(s), nil
	case SendActivationCodeReqTypePhone:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SendActivationCodeReqType) UnmarshalText(data []byte) error {
	switch SendActivationCodeReqType(data) {
	case SendActivationCodeReqTypeEmail:
		*s = SendActivationCodeReqTypeEmail
		return nil
	case SendActivationCodeReqTypePhone:
		*s = SendActivationCodeReqTypePhone
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/ServiceProvider
type ServiceProvider struct {
	ServiceProviderSid uuid.UUID `json:"service_provider_sid"`
	Name               string    `json:"name"`
	Description        OptString `json:"description"`
	RootDomain         OptString `json:"root_domain"`
	// Authentication webhook for registration.
	RegistrationHook OptWebhook `json:"registration_hook"`
	MsTeamsFqdn      OptString  `json:"ms_teams_fqdn"`
	// Used for inbound testing for accounts on free plan.
	TestNumber OptString `json:"test_number"`
	// Name of test application that can be used for new signups.
	TestApplicationName OptString `json:"test_application_name"`
	// Identifies test application that can be used for new signups.
	TestApplicationSid OptString `json:"test_application_sid"`
}

// GetServiceProviderSid returns the value of ServiceProviderSid.
func (s *ServiceProvider) GetServiceProviderSid() uuid.UUID {
	return s.ServiceProviderSid
}

// GetName returns the value of Name.
func (s *ServiceProvider) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *ServiceProvider) GetDescription() OptString {
	return s.Description
}

// GetRootDomain returns the value of RootDomain.
func (s *ServiceProvider) GetRootDomain() OptString {
	return s.RootDomain
}

// GetRegistrationHook returns the value of RegistrationHook.
func (s *ServiceProvider) GetRegistrationHook() OptWebhook {
	return s.RegistrationHook
}

// GetMsTeamsFqdn returns the value of MsTeamsFqdn.
func (s *ServiceProvider) GetMsTeamsFqdn() OptString {
	return s.MsTeamsFqdn
}

// GetTestNumber returns the value of TestNumber.
func (s *ServiceProvider) GetTestNumber() OptString {
	return s.TestNumber
}

// GetTestApplicationName returns the value of TestApplicationName.
func (s *ServiceProvider) GetTestApplicationName() OptString {
	return s.TestApplicationName
}

// GetTestApplicationSid returns the value of TestApplicationSid.
func (s *ServiceProvider) GetTestApplicationSid() OptString {
	return s.TestApplicationSid
}

// SetServiceProviderSid sets the value of ServiceProviderSid.
func (s *ServiceProvider) SetServiceProviderSid(val uuid.UUID) {
	s.ServiceProviderSid = val
}

// SetName sets the value of Name.
func (s *ServiceProvider) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *ServiceProvider) SetDescription(val OptString) {
	s.Description = val
}

// SetRootDomain sets the value of RootDomain.
func (s *ServiceProvider) SetRootDomain(val OptString) {
	s.RootDomain = val
}

// SetRegistrationHook sets the value of RegistrationHook.
func (s *ServiceProvider) SetRegistrationHook(val OptWebhook) {
	s.RegistrationHook = val
}

// SetMsTeamsFqdn sets the value of MsTeamsFqdn.
func (s *ServiceProvider) SetMsTeamsFqdn(val OptString) {
	s.MsTeamsFqdn = val
}

// SetTestNumber sets the value of TestNumber.
func (s *ServiceProvider) SetTestNumber(val OptString) {
	s.TestNumber = val
}

// SetTestApplicationName sets the value of TestApplicationName.
func (s *ServiceProvider) SetTestApplicationName(val OptString) {
	s.TestApplicationName = val
}

// SetTestApplicationSid sets the value of TestApplicationSid.
func (s *ServiceProvider) SetTestApplicationSid(val OptString) {
	s.TestApplicationSid = val
}

func (*ServiceProvider) getServiceProviderRes() {}

// Ref: #/components/schemas/SipGateway
type SipGateway struct {
	SipGatewaySid  uuid.UUID `json:"sip_gateway_sid"`
	Ipv4           string    `json:"ipv4"`
	Port           float64   `json:"port"`
	Netmask        float64   `json:"netmask"`
	VoipCarrierSid uuid.UUID `json:"voip_carrier_sid"`
	Inbound        OptBool   `json:"inbound"`
	Outbound       OptBool   `json:"outbound"`
}

// GetSipGatewaySid returns the value of SipGatewaySid.
func (s *SipGateway) GetSipGatewaySid() uuid.UUID {
	return s.SipGatewaySid
}

// GetIpv4 returns the value of Ipv4.
func (s *SipGateway) GetIpv4() string {
	return s.Ipv4
}

// GetPort returns the value of Port.
func (s *SipGateway) GetPort() float64 {
	return s.Port
}

// GetNetmask returns the value of Netmask.
func (s *SipGateway) GetNetmask() float64 {
	return s.Netmask
}

// GetVoipCarrierSid returns the value of VoipCarrierSid.
func (s *SipGateway) GetVoipCarrierSid() uuid.UUID {
	return s.VoipCarrierSid
}

// GetInbound returns the value of Inbound.
func (s *SipGateway) GetInbound() OptBool {
	return s.Inbound
}

// GetOutbound returns the value of Outbound.
func (s *SipGateway) GetOutbound() OptBool {
	return s.Outbound
}

// SetSipGatewaySid sets the value of SipGatewaySid.
func (s *SipGateway) SetSipGatewaySid(val uuid.UUID) {
	s.SipGatewaySid = val
}

// SetIpv4 sets the value of Ipv4.
func (s *SipGateway) SetIpv4(val string) {
	s.Ipv4 = val
}

// SetPort sets the value of Port.
func (s *SipGateway) SetPort(val float64) {
	s.Port = val
}

// SetNetmask sets the value of Netmask.
func (s *SipGateway) SetNetmask(val float64) {
	s.Netmask = val
}

// SetVoipCarrierSid sets the value of VoipCarrierSid.
func (s *SipGateway) SetVoipCarrierSid(val uuid.UUID) {
	s.VoipCarrierSid = val
}

// SetInbound sets the value of Inbound.
func (s *SipGateway) SetInbound(val OptBool) {
	s.Inbound = val
}

// SetOutbound sets the value of Outbound.
func (s *SipGateway) SetOutbound(val OptBool) {
	s.Outbound = val
}

func (*SipGateway) getSipGatewayRes() {}

// Ref: #/components/schemas/SmppGateway
type SmppGateway struct {
	SmppGatewaySid uuid.UUID `json:"smpp_gateway_sid"`
	Ipv4           string    `json:"ipv4"`
	Port           float64   `json:"port"`
	Netmask        float64   `json:"netmask"`
	VoipCarrierSid uuid.UUID `json:"voip_carrier_sid"`
	IsPrimary      OptBool   `json:"is_primary"`
	UseTLS         OptBool   `json:"use_tls"`
	Inbound        OptBool   `json:"inbound"`
	Outbound       OptBool   `json:"outbound"`
}

// GetSmppGatewaySid returns the value of SmppGatewaySid.
func (s *SmppGateway) GetSmppGatewaySid() uuid.UUID {
	return s.SmppGatewaySid
}

// GetIpv4 returns the value of Ipv4.
func (s *SmppGateway) GetIpv4() string {
	return s.Ipv4
}

// GetPort returns the value of Port.
func (s *SmppGateway) GetPort() float64 {
	return s.Port
}

// GetNetmask returns the value of Netmask.
func (s *SmppGateway) GetNetmask() float64 {
	return s.Netmask
}

// GetVoipCarrierSid returns the value of VoipCarrierSid.
func (s *SmppGateway) GetVoipCarrierSid() uuid.UUID {
	return s.VoipCarrierSid
}

// GetIsPrimary returns the value of IsPrimary.
func (s *SmppGateway) GetIsPrimary() OptBool {
	return s.IsPrimary
}

// GetUseTLS returns the value of UseTLS.
func (s *SmppGateway) GetUseTLS() OptBool {
	return s.UseTLS
}

// GetInbound returns the value of Inbound.
func (s *SmppGateway) GetInbound() OptBool {
	return s.Inbound
}

// GetOutbound returns the value of Outbound.
func (s *SmppGateway) GetOutbound() OptBool {
	return s.Outbound
}

// SetSmppGatewaySid sets the value of SmppGatewaySid.
func (s *SmppGateway) SetSmppGatewaySid(val uuid.UUID) {
	s.SmppGatewaySid = val
}

// SetIpv4 sets the value of Ipv4.
func (s *SmppGateway) SetIpv4(val string) {
	s.Ipv4 = val
}

// SetPort sets the value of Port.
func (s *SmppGateway) SetPort(val float64) {
	s.Port = val
}

// SetNetmask sets the value of Netmask.
func (s *SmppGateway) SetNetmask(val float64) {
	s.Netmask = val
}

// SetVoipCarrierSid sets the value of VoipCarrierSid.
func (s *SmppGateway) SetVoipCarrierSid(val uuid.UUID) {
	s.VoipCarrierSid = val
}

// SetIsPrimary sets the value of IsPrimary.
func (s *SmppGateway) SetIsPrimary(val OptBool) {
	s.IsPrimary = val
}

// SetUseTLS sets the value of UseTLS.
func (s *SmppGateway) SetUseTLS(val OptBool) {
	s.UseTLS = val
}

// SetInbound sets the value of Inbound.
func (s *SmppGateway) SetInbound(val OptBool) {
	s.Inbound = val
}

// SetOutbound sets the value of Outbound.
func (s *SmppGateway) SetOutbound(val OptBool) {
	s.Outbound = val
}

func (*SmppGateway) getSmppGatewayRes() {}

// Ref: #/components/schemas/SpeechCredential
type SpeechCredential struct {
	SpeechCredentialSid OptUUID                   `json:"speech_credential_sid"`
	AccountSid          OptUUID                   `json:"account_sid"`
	Vendor              OptSpeechCredentialVendor `json:"vendor"`
	ServiceKey          OptString                 `json:"service_key"`
	AccessKeyID         OptString                 `json:"access_key_id"`
	SecretAccessKey     OptString                 `json:"secret_access_key"`
	AWSRegion           OptString                 `json:"aws_region"`
	LastUsed            OptDateTime               `json:"last_used"`
	LastTested          OptDateTime               `json:"last_tested"`
	UseForTts           OptBool                   `json:"use_for_tts"`
	UseForStt           OptBool                   `json:"use_for_stt"`
	TtsTestedOk         OptBool                   `json:"tts_tested_ok"`
	SttTestedOk         OptBool                   `json:"stt_tested_ok"`
	RivaServerURI       OptString                 `json:"riva_server_uri"`
}

// GetSpeechCredentialSid returns the value of SpeechCredentialSid.
func (s *SpeechCredential) GetSpeechCredentialSid() OptUUID {
	return s.SpeechCredentialSid
}

// GetAccountSid returns the value of AccountSid.
func (s *SpeechCredential) GetAccountSid() OptUUID {
	return s.AccountSid
}

// GetVendor returns the value of Vendor.
func (s *SpeechCredential) GetVendor() OptSpeechCredentialVendor {
	return s.Vendor
}

// GetServiceKey returns the value of ServiceKey.
func (s *SpeechCredential) GetServiceKey() OptString {
	return s.ServiceKey
}

// GetAccessKeyID returns the value of AccessKeyID.
func (s *SpeechCredential) GetAccessKeyID() OptString {
	return s.AccessKeyID
}

// GetSecretAccessKey returns the value of SecretAccessKey.
func (s *SpeechCredential) GetSecretAccessKey() OptString {
	return s.SecretAccessKey
}

// GetAWSRegion returns the value of AWSRegion.
func (s *SpeechCredential) GetAWSRegion() OptString {
	return s.AWSRegion
}

// GetLastUsed returns the value of LastUsed.
func (s *SpeechCredential) GetLastUsed() OptDateTime {
	return s.LastUsed
}

// GetLastTested returns the value of LastTested.
func (s *SpeechCredential) GetLastTested() OptDateTime {
	return s.LastTested
}

// GetUseForTts returns the value of UseForTts.
func (s *SpeechCredential) GetUseForTts() OptBool {
	return s.UseForTts
}

// GetUseForStt returns the value of UseForStt.
func (s *SpeechCredential) GetUseForStt() OptBool {
	return s.UseForStt
}

// GetTtsTestedOk returns the value of TtsTestedOk.
func (s *SpeechCredential) GetTtsTestedOk() OptBool {
	return s.TtsTestedOk
}

// GetSttTestedOk returns the value of SttTestedOk.
func (s *SpeechCredential) GetSttTestedOk() OptBool {
	return s.SttTestedOk
}

// GetRivaServerURI returns the value of RivaServerURI.
func (s *SpeechCredential) GetRivaServerURI() OptString {
	return s.RivaServerURI
}

// SetSpeechCredentialSid sets the value of SpeechCredentialSid.
func (s *SpeechCredential) SetSpeechCredentialSid(val OptUUID) {
	s.SpeechCredentialSid = val
}

// SetAccountSid sets the value of AccountSid.
func (s *SpeechCredential) SetAccountSid(val OptUUID) {
	s.AccountSid = val
}

// SetVendor sets the value of Vendor.
func (s *SpeechCredential) SetVendor(val OptSpeechCredentialVendor) {
	s.Vendor = val
}

// SetServiceKey sets the value of ServiceKey.
func (s *SpeechCredential) SetServiceKey(val OptString) {
	s.ServiceKey = val
}

// SetAccessKeyID sets the value of AccessKeyID.
func (s *SpeechCredential) SetAccessKeyID(val OptString) {
	s.AccessKeyID = val
}

// SetSecretAccessKey sets the value of SecretAccessKey.
func (s *SpeechCredential) SetSecretAccessKey(val OptString) {
	s.SecretAccessKey = val
}

// SetAWSRegion sets the value of AWSRegion.
func (s *SpeechCredential) SetAWSRegion(val OptString) {
	s.AWSRegion = val
}

// SetLastUsed sets the value of LastUsed.
func (s *SpeechCredential) SetLastUsed(val OptDateTime) {
	s.LastUsed = val
}

// SetLastTested sets the value of LastTested.
func (s *SpeechCredential) SetLastTested(val OptDateTime) {
	s.LastTested = val
}

// SetUseForTts sets the value of UseForTts.
func (s *SpeechCredential) SetUseForTts(val OptBool) {
	s.UseForTts = val
}

// SetUseForStt sets the value of UseForStt.
func (s *SpeechCredential) SetUseForStt(val OptBool) {
	s.UseForStt = val
}

// SetTtsTestedOk sets the value of TtsTestedOk.
func (s *SpeechCredential) SetTtsTestedOk(val OptBool) {
	s.TtsTestedOk = val
}

// SetSttTestedOk sets the value of SttTestedOk.
func (s *SpeechCredential) SetSttTestedOk(val OptBool) {
	s.SttTestedOk = val
}

// SetRivaServerURI sets the value of RivaServerURI.
func (s *SpeechCredential) SetRivaServerURI(val OptString) {
	s.RivaServerURI = val
}

func (*SpeechCredential) getSpeechCredentialByAccountRes() {}
func (*SpeechCredential) getSpeechCredentialRes()          {}

// Ref: #/components/schemas/SpeechCredentialUpdate
type SpeechCredentialUpdate struct {
	UseForTts OptBool `json:"use_for_tts"`
	UseForStt OptBool `json:"use_for_stt"`
}

// GetUseForTts returns the value of UseForTts.
func (s *SpeechCredentialUpdate) GetUseForTts() OptBool {
	return s.UseForTts
}

// GetUseForStt returns the value of UseForStt.
func (s *SpeechCredentialUpdate) GetUseForStt() OptBool {
	return s.UseForStt
}

// SetUseForTts sets the value of UseForTts.
func (s *SpeechCredentialUpdate) SetUseForTts(val OptBool) {
	s.UseForTts = val
}

// SetUseForStt sets the value of UseForStt.
func (s *SpeechCredentialUpdate) SetUseForStt(val OptBool) {
	s.UseForStt = val
}

type SpeechCredentialVendor string

const (
	SpeechCredentialVendorGoogle SpeechCredentialVendor = "google"
	SpeechCredentialVendorAWS    SpeechCredentialVendor = "aws"
)

// AllValues returns all SpeechCredentialVendor values.
func (SpeechCredentialVendor) AllValues() []SpeechCredentialVendor {
	return []SpeechCredentialVendor{
		SpeechCredentialVendorGoogle,
		SpeechCredentialVendorAWS,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SpeechCredentialVendor) MarshalText() ([]byte, error) {
	switch s {
	case SpeechCredentialVendorGoogle:
		return []byte(s), nil
	case SpeechCredentialVendorAWS:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SpeechCredentialVendor) UnmarshalText(data []byte) error {
	switch SpeechCredentialVendor(data) {
	case SpeechCredentialVendorGoogle:
		*s = SpeechCredentialVendorGoogle
		return nil
	case SpeechCredentialVendorAWS:
		*s = SpeechCredentialVendorAWS
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/SpeechLanguagesVoices
type SpeechLanguagesVoices struct {
	Tts      []LanguageVoices `json:"tts"`
	Stt      []LanguageVoice  `json:"stt"`
	TtsModel []TtsModel       `json:"ttsModel"`
}

// GetTts returns the value of Tts.
func (s *SpeechLanguagesVoices) GetTts() []LanguageVoices {
	return s.Tts
}

// GetStt returns the value of Stt.
func (s *SpeechLanguagesVoices) GetStt() []LanguageVoice {
	return s.Stt
}

// GetTtsModel returns the value of TtsModel.
func (s *SpeechLanguagesVoices) GetTtsModel() []TtsModel {
	return s.TtsModel
}

// SetTts sets the value of Tts.
func (s *SpeechLanguagesVoices) SetTts(val []LanguageVoices) {
	s.Tts = val
}

// SetStt sets the value of Stt.
func (s *SpeechLanguagesVoices) SetStt(val []LanguageVoice) {
	s.Stt = val
}

// SetTtsModel sets the value of TtsModel.
func (s *SpeechLanguagesVoices) SetTtsModel(val []TtsModel) {
	s.TtsModel = val
}

func (*SpeechLanguagesVoices) supportedLanguagesAndVoicesByAccountRes() {}
func (*SpeechLanguagesVoices) supportedLanguagesAndVoicesRes()          {}

// Ref: #/components/schemas/SuccessfulAdd
type SuccessfulAdd struct {
	Sid string `json:"sid"`
}

// GetSid returns the value of Sid.
func (s *SuccessfulAdd) GetSid() string {
	return s.Sid
}

// SetSid sets the value of Sid.
func (s *SuccessfulAdd) SetSid(val string) {
	s.Sid = val
}

func (*SuccessfulAdd) addLimitForAccountRes()                     {}
func (*SuccessfulAdd) addLimitForServiceProviderRes()             {}
func (*SuccessfulAdd) addSpeechCredentialForSeerviceProviderRes() {}
func (*SuccessfulAdd) createAccountRes()                          {}
func (*SuccessfulAdd) createApplicationRes()                      {}
func (*SuccessfulAdd) createCarrierForServiceProviderRes()        {}
func (*SuccessfulAdd) createGoogleCustomVoiceRes()                {}
func (*SuccessfulAdd) createLcrCarrierSetEntryRes()               {}
func (*SuccessfulAdd) createLcrForServiceProviderRes()            {}
func (*SuccessfulAdd) createLcrRes()                              {}
func (*SuccessfulAdd) createLcrRoutesRes()                        {}
func (*SuccessfulAdd) createMsTeamsTenantRes()                    {}
func (*SuccessfulAdd) createSbcRes()                              {}
func (*SuccessfulAdd) createServiceProviderRes()                  {}
func (*SuccessfulAdd) createSipGatewayRes()                       {}
func (*SuccessfulAdd) createSmppGatewayRes()                      {}
func (*SuccessfulAdd) createSpeechCredentialRes()                 {}
func (*SuccessfulAdd) createVoipCarrierFromTemplateBySPRes()      {}
func (*SuccessfulAdd) createVoipCarrierFromTemplateRes()          {}
func (*SuccessfulAdd) createVoipCarrierRes()                      {}
func (*SuccessfulAdd) provisionPhoneNumberRes()                   {}

// Ref: #/components/schemas/SuccessfulApiKeyAdd
type SuccessfulApiKeyAdd struct {
	Sid   string `json:"sid"`
	Token string `json:"token"`
}

// GetSid returns the value of Sid.
func (s *SuccessfulApiKeyAdd) GetSid() string {
	return s.Sid
}

// GetToken returns the value of Token.
func (s *SuccessfulApiKeyAdd) GetToken() string {
	return s.Token
}

// SetSid sets the value of Sid.
func (s *SuccessfulApiKeyAdd) SetSid(val string) {
	s.Sid = val
}

// SetToken sets the value of Token.
func (s *SuccessfulApiKeyAdd) SetToken(val string) {
	s.Token = val
}

func (*SuccessfulApiKeyAdd) createApikeyRes() {}

// Ref: #/components/schemas/SuccessfulLogin
type SuccessfulLogin struct {
	Token       OptString `json:"token"`
	UserSid     OptString `json:"user_sid"`
	Scope       OptString `json:"scope"`
	ForceChange OptBool   `json:"force_change"`
}

// GetToken returns the value of Token.
func (s *SuccessfulLogin) GetToken() OptString {
	return s.Token
}

// GetUserSid returns the value of UserSid.
func (s *SuccessfulLogin) GetUserSid() OptString {
	return s.UserSid
}

// GetScope returns the value of Scope.
func (s *SuccessfulLogin) GetScope() OptString {
	return s.Scope
}

// GetForceChange returns the value of ForceChange.
func (s *SuccessfulLogin) GetForceChange() OptBool {
	return s.ForceChange
}

// SetToken sets the value of Token.
func (s *SuccessfulLogin) SetToken(val OptString) {
	s.Token = val
}

// SetUserSid sets the value of UserSid.
func (s *SuccessfulLogin) SetUserSid(val OptString) {
	s.UserSid = val
}

// SetScope sets the value of Scope.
func (s *SuccessfulLogin) SetScope(val OptString) {
	s.Scope = val
}

// SetForceChange sets the value of ForceChange.
func (s *SuccessfulLogin) SetForceChange(val OptBool) {
	s.ForceChange = val
}

func (*SuccessfulLogin) loginRes() {}

type SynthesizeBadRequest GeneralError

func (*SynthesizeBadRequest) synthesizeRes() {}

type SynthesizeInternalServerError GeneralError

func (*SynthesizeInternalServerError) synthesizeRes() {}

type SynthesizeOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s SynthesizeOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*SynthesizeOK) synthesizeRes() {}

type SynthesizeReq struct {
	// Speech credential Sid.
	SpeechCredentialSid string `json:"speech_credential_sid"`
	// The text to convert to audio.
	Text string `json:"text"`
	// Language is used in text.
	Language string `json:"language"`
	// Voice ID.
	Voice string `json:"voice"`
	// Convert audio to mp3.
	EncodingMp3 OptBool `json:"encodingMp3"`
}

// GetSpeechCredentialSid returns the value of SpeechCredentialSid.
func (s *SynthesizeReq) GetSpeechCredentialSid() string {
	return s.SpeechCredentialSid
}

// GetText returns the value of Text.
func (s *SynthesizeReq) GetText() string {
	return s.Text
}

// GetLanguage returns the value of Language.
func (s *SynthesizeReq) GetLanguage() string {
	return s.Language
}

// GetVoice returns the value of Voice.
func (s *SynthesizeReq) GetVoice() string {
	return s.Voice
}

// GetEncodingMp3 returns the value of EncodingMp3.
func (s *SynthesizeReq) GetEncodingMp3() OptBool {
	return s.EncodingMp3
}

// SetSpeechCredentialSid sets the value of SpeechCredentialSid.
func (s *SynthesizeReq) SetSpeechCredentialSid(val string) {
	s.SpeechCredentialSid = val
}

// SetText sets the value of Text.
func (s *SynthesizeReq) SetText(val string) {
	s.Text = val
}

// SetLanguage sets the value of Language.
func (s *SynthesizeReq) SetLanguage(val string) {
	s.Language = val
}

// SetVoice sets the value of Voice.
func (s *SynthesizeReq) SetVoice(val string) {
	s.Voice = val
}

// SetEncodingMp3 sets the value of EncodingMp3.
func (s *SynthesizeReq) SetEncodingMp3(val OptBool) {
	s.EncodingMp3 = val
}

type SynthesizeUnprocessableEntity GeneralError

func (*SynthesizeUnprocessableEntity) synthesizeRes() {}

// Ref: #/components/schemas/Target
type Target struct {
	Type   TargetType `json:"type"`
	Number OptString  `json:"number"`
	SipUri OptString  `json:"sipUri"`
	// Microsoft Teams customer tenant domain name.
	Tenant OptString `json:"tenant"`
	Trunk  OptString `json:"trunk"`
	// Dial directly into user's voicemail to leave a message.
	Vmail      OptBool       `json:"vmail"`
	OverrideTo OptString     `json:"overrideTo"`
	Name       OptString     `json:"name"`
	Auth       OptTargetAuth `json:"auth"`
}

// GetType returns the value of Type.
func (s *Target) GetType() TargetType {
	return s.Type
}

// GetNumber returns the value of Number.
func (s *Target) GetNumber() OptString {
	return s.Number
}

// GetSipUri returns the value of SipUri.
func (s *Target) GetSipUri() OptString {
	return s.SipUri
}

// GetTenant returns the value of Tenant.
func (s *Target) GetTenant() OptString {
	return s.Tenant
}

// GetTrunk returns the value of Trunk.
func (s *Target) GetTrunk() OptString {
	return s.Trunk
}

// GetVmail returns the value of Vmail.
func (s *Target) GetVmail() OptBool {
	return s.Vmail
}

// GetOverrideTo returns the value of OverrideTo.
func (s *Target) GetOverrideTo() OptString {
	return s.OverrideTo
}

// GetName returns the value of Name.
func (s *Target) GetName() OptString {
	return s.Name
}

// GetAuth returns the value of Auth.
func (s *Target) GetAuth() OptTargetAuth {
	return s.Auth
}

// SetType sets the value of Type.
func (s *Target) SetType(val TargetType) {
	s.Type = val
}

// SetNumber sets the value of Number.
func (s *Target) SetNumber(val OptString) {
	s.Number = val
}

// SetSipUri sets the value of SipUri.
func (s *Target) SetSipUri(val OptString) {
	s.SipUri = val
}

// SetTenant sets the value of Tenant.
func (s *Target) SetTenant(val OptString) {
	s.Tenant = val
}

// SetTrunk sets the value of Trunk.
func (s *Target) SetTrunk(val OptString) {
	s.Trunk = val
}

// SetVmail sets the value of Vmail.
func (s *Target) SetVmail(val OptBool) {
	s.Vmail = val
}

// SetOverrideTo sets the value of OverrideTo.
func (s *Target) SetOverrideTo(val OptString) {
	s.OverrideTo = val
}

// SetName sets the value of Name.
func (s *Target) SetName(val OptString) {
	s.Name = val
}

// SetAuth sets the value of Auth.
func (s *Target) SetAuth(val OptTargetAuth) {
	s.Auth = val
}

type TargetAuth struct {
	Username OptString `json:"username"`
	Password OptString `json:"password"`
}

// GetUsername returns the value of Username.
func (s *TargetAuth) GetUsername() OptString {
	return s.Username
}

// GetPassword returns the value of Password.
func (s *TargetAuth) GetPassword() OptString {
	return s.Password
}

// SetUsername sets the value of Username.
func (s *TargetAuth) SetUsername(val OptString) {
	s.Username = val
}

// SetPassword sets the value of Password.
func (s *TargetAuth) SetPassword(val OptString) {
	s.Password = val
}

type TargetType string

const (
	TargetTypePhone TargetType = "phone"
	TargetTypeSip   TargetType = "sip"
	TargetTypeUser  TargetType = "user"
	TargetTypeTeams TargetType = "teams"
)

// AllValues returns all TargetType values.
func (TargetType) AllValues() []TargetType {
	return []TargetType{
		TargetTypePhone,
		TargetTypeSip,
		TargetTypeUser,
		TargetTypeTeams,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s TargetType) MarshalText() ([]byte, error) {
	switch s {
	case TargetTypePhone:
		return []byte(s), nil
	case TargetTypeSip:
		return []byte(s), nil
	case TargetTypeUser:
		return []byte(s), nil
	case TargetTypeTeams:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TargetType) UnmarshalText(data []byte) error {
	switch TargetType(data) {
	case TargetTypePhone:
		*s = TargetTypePhone
		return nil
	case TargetTypeSip:
		*s = TargetTypeSip
		return nil
	case TargetTypeUser:
		*s = TargetTypeUser
		return nil
	case TargetTypeTeams:
		*s = TargetTypeTeams
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// TestSpeechCredentialByAccountNotFound is response for TestSpeechCredentialByAccount operation.
type TestSpeechCredentialByAccountNotFound struct{}

func (*TestSpeechCredentialByAccountNotFound) testSpeechCredentialByAccountRes() {}

type TestSpeechCredentialByAccountOK struct {
	Tts OptTestSpeechCredentialByAccountOKTts `json:"tts"`
	Stt OptTestSpeechCredentialByAccountOKStt `json:"stt"`
}

// GetTts returns the value of Tts.
func (s *TestSpeechCredentialByAccountOK) GetTts() OptTestSpeechCredentialByAccountOKTts {
	return s.Tts
}

// GetStt returns the value of Stt.
func (s *TestSpeechCredentialByAccountOK) GetStt() OptTestSpeechCredentialByAccountOKStt {
	return s.Stt
}

// SetTts sets the value of Tts.
func (s *TestSpeechCredentialByAccountOK) SetTts(val OptTestSpeechCredentialByAccountOKTts) {
	s.Tts = val
}

// SetStt sets the value of Stt.
func (s *TestSpeechCredentialByAccountOK) SetStt(val OptTestSpeechCredentialByAccountOKStt) {
	s.Stt = val
}

func (*TestSpeechCredentialByAccountOK) testSpeechCredentialByAccountRes() {}

type TestSpeechCredentialByAccountOKStt struct {
	Status OptTestSpeechCredentialByAccountOKSttStatus `json:"status"`
	Reason OptString                                   `json:"reason"`
}

// GetStatus returns the value of Status.
func (s *TestSpeechCredentialByAccountOKStt) GetStatus() OptTestSpeechCredentialByAccountOKSttStatus {
	return s.Status
}

// GetReason returns the value of Reason.
func (s *TestSpeechCredentialByAccountOKStt) GetReason() OptString {
	return s.Reason
}

// SetStatus sets the value of Status.
func (s *TestSpeechCredentialByAccountOKStt) SetStatus(val OptTestSpeechCredentialByAccountOKSttStatus) {
	s.Status = val
}

// SetReason sets the value of Reason.
func (s *TestSpeechCredentialByAccountOKStt) SetReason(val OptString) {
	s.Reason = val
}

type TestSpeechCredentialByAccountOKSttStatus string

const (
	TestSpeechCredentialByAccountOKSttStatusSuccess TestSpeechCredentialByAccountOKSttStatus = "success"
	TestSpeechCredentialByAccountOKSttStatusFail    TestSpeechCredentialByAccountOKSttStatus = "fail"
)

// AllValues returns all TestSpeechCredentialByAccountOKSttStatus values.
func (TestSpeechCredentialByAccountOKSttStatus) AllValues() []TestSpeechCredentialByAccountOKSttStatus {
	return []TestSpeechCredentialByAccountOKSttStatus{
		TestSpeechCredentialByAccountOKSttStatusSuccess,
		TestSpeechCredentialByAccountOKSttStatusFail,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s TestSpeechCredentialByAccountOKSttStatus) MarshalText() ([]byte, error) {
	switch s {
	case TestSpeechCredentialByAccountOKSttStatusSuccess:
		return []byte(s), nil
	case TestSpeechCredentialByAccountOKSttStatusFail:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TestSpeechCredentialByAccountOKSttStatus) UnmarshalText(data []byte) error {
	switch TestSpeechCredentialByAccountOKSttStatus(data) {
	case TestSpeechCredentialByAccountOKSttStatusSuccess:
		*s = TestSpeechCredentialByAccountOKSttStatusSuccess
		return nil
	case TestSpeechCredentialByAccountOKSttStatusFail:
		*s = TestSpeechCredentialByAccountOKSttStatusFail
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type TestSpeechCredentialByAccountOKTts struct {
	Status OptTestSpeechCredentialByAccountOKTtsStatus `json:"status"`
	Reason OptString                                   `json:"reason"`
}

// GetStatus returns the value of Status.
func (s *TestSpeechCredentialByAccountOKTts) GetStatus() OptTestSpeechCredentialByAccountOKTtsStatus {
	return s.Status
}

// GetReason returns the value of Reason.
func (s *TestSpeechCredentialByAccountOKTts) GetReason() OptString {
	return s.Reason
}

// SetStatus sets the value of Status.
func (s *TestSpeechCredentialByAccountOKTts) SetStatus(val OptTestSpeechCredentialByAccountOKTtsStatus) {
	s.Status = val
}

// SetReason sets the value of Reason.
func (s *TestSpeechCredentialByAccountOKTts) SetReason(val OptString) {
	s.Reason = val
}

type TestSpeechCredentialByAccountOKTtsStatus string

const (
	TestSpeechCredentialByAccountOKTtsStatusSuccess   TestSpeechCredentialByAccountOKTtsStatus = "success"
	TestSpeechCredentialByAccountOKTtsStatusFail      TestSpeechCredentialByAccountOKTtsStatus = "fail"
	TestSpeechCredentialByAccountOKTtsStatusNotTested TestSpeechCredentialByAccountOKTtsStatus = "not tested"
)

// AllValues returns all TestSpeechCredentialByAccountOKTtsStatus values.
func (TestSpeechCredentialByAccountOKTtsStatus) AllValues() []TestSpeechCredentialByAccountOKTtsStatus {
	return []TestSpeechCredentialByAccountOKTtsStatus{
		TestSpeechCredentialByAccountOKTtsStatusSuccess,
		TestSpeechCredentialByAccountOKTtsStatusFail,
		TestSpeechCredentialByAccountOKTtsStatusNotTested,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s TestSpeechCredentialByAccountOKTtsStatus) MarshalText() ([]byte, error) {
	switch s {
	case TestSpeechCredentialByAccountOKTtsStatusSuccess:
		return []byte(s), nil
	case TestSpeechCredentialByAccountOKTtsStatusFail:
		return []byte(s), nil
	case TestSpeechCredentialByAccountOKTtsStatusNotTested:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TestSpeechCredentialByAccountOKTtsStatus) UnmarshalText(data []byte) error {
	switch TestSpeechCredentialByAccountOKTtsStatus(data) {
	case TestSpeechCredentialByAccountOKTtsStatusSuccess:
		*s = TestSpeechCredentialByAccountOKTtsStatusSuccess
		return nil
	case TestSpeechCredentialByAccountOKTtsStatusFail:
		*s = TestSpeechCredentialByAccountOKTtsStatusFail
		return nil
	case TestSpeechCredentialByAccountOKTtsStatusNotTested:
		*s = TestSpeechCredentialByAccountOKTtsStatusNotTested
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// TestSpeechCredentialNotFound is response for TestSpeechCredential operation.
type TestSpeechCredentialNotFound struct{}

func (*TestSpeechCredentialNotFound) testSpeechCredentialRes() {}

type TestSpeechCredentialOK struct {
	Tts OptTestSpeechCredentialOKTts `json:"tts"`
	Stt OptTestSpeechCredentialOKStt `json:"stt"`
}

// GetTts returns the value of Tts.
func (s *TestSpeechCredentialOK) GetTts() OptTestSpeechCredentialOKTts {
	return s.Tts
}

// GetStt returns the value of Stt.
func (s *TestSpeechCredentialOK) GetStt() OptTestSpeechCredentialOKStt {
	return s.Stt
}

// SetTts sets the value of Tts.
func (s *TestSpeechCredentialOK) SetTts(val OptTestSpeechCredentialOKTts) {
	s.Tts = val
}

// SetStt sets the value of Stt.
func (s *TestSpeechCredentialOK) SetStt(val OptTestSpeechCredentialOKStt) {
	s.Stt = val
}

func (*TestSpeechCredentialOK) testSpeechCredentialRes() {}

type TestSpeechCredentialOKStt struct {
	Status OptTestSpeechCredentialOKSttStatus `json:"status"`
	Reason OptString                          `json:"reason"`
}

// GetStatus returns the value of Status.
func (s *TestSpeechCredentialOKStt) GetStatus() OptTestSpeechCredentialOKSttStatus {
	return s.Status
}

// GetReason returns the value of Reason.
func (s *TestSpeechCredentialOKStt) GetReason() OptString {
	return s.Reason
}

// SetStatus sets the value of Status.
func (s *TestSpeechCredentialOKStt) SetStatus(val OptTestSpeechCredentialOKSttStatus) {
	s.Status = val
}

// SetReason sets the value of Reason.
func (s *TestSpeechCredentialOKStt) SetReason(val OptString) {
	s.Reason = val
}

type TestSpeechCredentialOKSttStatus string

const (
	TestSpeechCredentialOKSttStatusSuccess TestSpeechCredentialOKSttStatus = "success"
	TestSpeechCredentialOKSttStatusFail    TestSpeechCredentialOKSttStatus = "fail"
)

// AllValues returns all TestSpeechCredentialOKSttStatus values.
func (TestSpeechCredentialOKSttStatus) AllValues() []TestSpeechCredentialOKSttStatus {
	return []TestSpeechCredentialOKSttStatus{
		TestSpeechCredentialOKSttStatusSuccess,
		TestSpeechCredentialOKSttStatusFail,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s TestSpeechCredentialOKSttStatus) MarshalText() ([]byte, error) {
	switch s {
	case TestSpeechCredentialOKSttStatusSuccess:
		return []byte(s), nil
	case TestSpeechCredentialOKSttStatusFail:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TestSpeechCredentialOKSttStatus) UnmarshalText(data []byte) error {
	switch TestSpeechCredentialOKSttStatus(data) {
	case TestSpeechCredentialOKSttStatusSuccess:
		*s = TestSpeechCredentialOKSttStatusSuccess
		return nil
	case TestSpeechCredentialOKSttStatusFail:
		*s = TestSpeechCredentialOKSttStatusFail
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type TestSpeechCredentialOKTts struct {
	Status OptTestSpeechCredentialOKTtsStatus `json:"status"`
	Reason OptString                          `json:"reason"`
}

// GetStatus returns the value of Status.
func (s *TestSpeechCredentialOKTts) GetStatus() OptTestSpeechCredentialOKTtsStatus {
	return s.Status
}

// GetReason returns the value of Reason.
func (s *TestSpeechCredentialOKTts) GetReason() OptString {
	return s.Reason
}

// SetStatus sets the value of Status.
func (s *TestSpeechCredentialOKTts) SetStatus(val OptTestSpeechCredentialOKTtsStatus) {
	s.Status = val
}

// SetReason sets the value of Reason.
func (s *TestSpeechCredentialOKTts) SetReason(val OptString) {
	s.Reason = val
}

type TestSpeechCredentialOKTtsStatus string

const (
	TestSpeechCredentialOKTtsStatusSuccess   TestSpeechCredentialOKTtsStatus = "success"
	TestSpeechCredentialOKTtsStatusFail      TestSpeechCredentialOKTtsStatus = "fail"
	TestSpeechCredentialOKTtsStatusNotTested TestSpeechCredentialOKTtsStatus = "not tested"
)

// AllValues returns all TestSpeechCredentialOKTtsStatus values.
func (TestSpeechCredentialOKTtsStatus) AllValues() []TestSpeechCredentialOKTtsStatus {
	return []TestSpeechCredentialOKTtsStatus{
		TestSpeechCredentialOKTtsStatusSuccess,
		TestSpeechCredentialOKTtsStatusFail,
		TestSpeechCredentialOKTtsStatusNotTested,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s TestSpeechCredentialOKTtsStatus) MarshalText() ([]byte, error) {
	switch s {
	case TestSpeechCredentialOKTtsStatusSuccess:
		return []byte(s), nil
	case TestSpeechCredentialOKTtsStatusFail:
		return []byte(s), nil
	case TestSpeechCredentialOKTtsStatusNotTested:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TestSpeechCredentialOKTtsStatus) UnmarshalText(data []byte) error {
	switch TestSpeechCredentialOKTtsStatus(data) {
	case TestSpeechCredentialOKTtsStatusSuccess:
		*s = TestSpeechCredentialOKTtsStatusSuccess
		return nil
	case TestSpeechCredentialOKTtsStatusFail:
		*s = TestSpeechCredentialOKTtsStatusFail
		return nil
	case TestSpeechCredentialOKTtsStatusNotTested:
		*s = TestSpeechCredentialOKTtsStatusNotTested
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/TtsModel
type TtsModel struct {
	Name  OptString `json:"name"`
	Value OptString `json:"value"`
}

// GetName returns the value of Name.
func (s *TtsModel) GetName() OptString {
	return s.Name
}

// GetValue returns the value of Value.
func (s *TtsModel) GetValue() OptString {
	return s.Value
}

// SetName sets the value of Name.
func (s *TtsModel) SetName(val OptString) {
	s.Name = val
}

// SetValue sets the value of Value.
func (s *TtsModel) SetValue(val OptString) {
	s.Value = val
}

type UpdateAccountInternalServerError GeneralError

func (*UpdateAccountInternalServerError) updateAccountRes() {}

// UpdateAccountNoContent is response for UpdateAccount operation.
type UpdateAccountNoContent struct{}

func (*UpdateAccountNoContent) updateAccountRes() {}

// UpdateAccountNotFound is response for UpdateAccount operation.
type UpdateAccountNotFound struct{}

func (*UpdateAccountNotFound) updateAccountRes() {}

type UpdateAccountUnprocessableEntity GeneralError

func (*UpdateAccountUnprocessableEntity) updateAccountRes() {}

type UpdateApplicationInternalServerError GeneralError

func (*UpdateApplicationInternalServerError) updateApplicationRes() {}

// UpdateApplicationNoContent is response for UpdateApplication operation.
type UpdateApplicationNoContent struct{}

func (*UpdateApplicationNoContent) updateApplicationRes() {}

// UpdateApplicationNotFound is response for UpdateApplication operation.
type UpdateApplicationNotFound struct{}

func (*UpdateApplicationNotFound) updateApplicationRes() {}

type UpdateApplicationReq struct {
	Name       string    `json:"name"`
	AccountSid uuid.UUID `json:"account_sid"`
	// Application webhook for inbound voice calls.
	CallHook Webhook `json:"call_hook"`
	// Webhook for reporting call status events.
	CallStatusHook Webhook `json:"call_status_hook"`
	// Application webhook for inbound SMS/MMS.
	MessagingHook  Webhook                            `json:"messaging_hook"`
	RecordAllCalls UpdateApplicationReqRecordAllCalls `json:"record_all_calls"`
}

// GetName returns the value of Name.
func (s *UpdateApplicationReq) GetName() string {
	return s.Name
}

// GetAccountSid returns the value of AccountSid.
func (s *UpdateApplicationReq) GetAccountSid() uuid.UUID {
	return s.AccountSid
}

// GetCallHook returns the value of CallHook.
func (s *UpdateApplicationReq) GetCallHook() Webhook {
	return s.CallHook
}

// GetCallStatusHook returns the value of CallStatusHook.
func (s *UpdateApplicationReq) GetCallStatusHook() Webhook {
	return s.CallStatusHook
}

// GetMessagingHook returns the value of MessagingHook.
func (s *UpdateApplicationReq) GetMessagingHook() Webhook {
	return s.MessagingHook
}

// GetRecordAllCalls returns the value of RecordAllCalls.
func (s *UpdateApplicationReq) GetRecordAllCalls() UpdateApplicationReqRecordAllCalls {
	return s.RecordAllCalls
}

// SetName sets the value of Name.
func (s *UpdateApplicationReq) SetName(val string) {
	s.Name = val
}

// SetAccountSid sets the value of AccountSid.
func (s *UpdateApplicationReq) SetAccountSid(val uuid.UUID) {
	s.AccountSid = val
}

// SetCallHook sets the value of CallHook.
func (s *UpdateApplicationReq) SetCallHook(val Webhook) {
	s.CallHook = val
}

// SetCallStatusHook sets the value of CallStatusHook.
func (s *UpdateApplicationReq) SetCallStatusHook(val Webhook) {
	s.CallStatusHook = val
}

// SetMessagingHook sets the value of MessagingHook.
func (s *UpdateApplicationReq) SetMessagingHook(val Webhook) {
	s.MessagingHook = val
}

// SetRecordAllCalls sets the value of RecordAllCalls.
func (s *UpdateApplicationReq) SetRecordAllCalls(val UpdateApplicationReqRecordAllCalls) {
	s.RecordAllCalls = val
}

type UpdateApplicationReqRecordAllCalls int

const (
	UpdateApplicationReqRecordAllCalls0 UpdateApplicationReqRecordAllCalls = 0
	UpdateApplicationReqRecordAllCalls1 UpdateApplicationReqRecordAllCalls = 1
)

// AllValues returns all UpdateApplicationReqRecordAllCalls values.
func (UpdateApplicationReqRecordAllCalls) AllValues() []UpdateApplicationReqRecordAllCalls {
	return []UpdateApplicationReqRecordAllCalls{
		UpdateApplicationReqRecordAllCalls0,
		UpdateApplicationReqRecordAllCalls1,
	}
}

type UpdateApplicationUnprocessableEntity GeneralError

func (*UpdateApplicationUnprocessableEntity) updateApplicationRes() {}

// UpdateCallAccepted is response for UpdateCall operation.
type UpdateCallAccepted struct{}

func (*UpdateCallAccepted) updateCallRes() {}

// UpdateCallBadRequest is response for UpdateCall operation.
type UpdateCallBadRequest struct{}

func (*UpdateCallBadRequest) updateCallRes() {}

type UpdateCallInternalServerError GeneralError

func (*UpdateCallInternalServerError) updateCallRes() {}

// UpdateCallNotFound is response for UpdateCall operation.
type UpdateCallNotFound struct{}

func (*UpdateCallNotFound) updateCallRes() {}

// UpdateCallOK is response for UpdateCall operation.
type UpdateCallOK struct{}

func (*UpdateCallOK) updateCallRes() {}

type UpdateCallReq struct {
	CallHook                    OptWebhook                                  `json:"call_hook"`
	ChildCallHook               OptWebhook                                  `json:"child_call_hook"`
	CallStatus                  OptUpdateCallReqCallStatus                  `json:"call_status"`
	ConfMuteStatus              OptUpdateCallReqConfMuteStatus              `json:"conf_mute_status"`
	ConfHoldStatus              OptUpdateCallReqConfHoldStatus              `json:"conf_hold_status"`
	ListenStatus                OptUpdateCallReqListenStatus                `json:"listen_status"`
	MuteStatus                  OptUpdateCallReqMuteStatus                  `json:"mute_status"`
	Whisper                     OptWebhook                                  `json:"whisper"`
	SipRequest                  OptUpdateCallReqSipRequest                  `json:"sip_request"`
	Record                      OptUpdateCallReqRecord                      `json:"record"`
	ConferenceParticipantAction OptUpdateCallReqConferenceParticipantAction `json:"conferenceParticipantAction"`
}

// GetCallHook returns the value of CallHook.
func (s *UpdateCallReq) GetCallHook() OptWebhook {
	return s.CallHook
}

// GetChildCallHook returns the value of ChildCallHook.
func (s *UpdateCallReq) GetChildCallHook() OptWebhook {
	return s.ChildCallHook
}

// GetCallStatus returns the value of CallStatus.
func (s *UpdateCallReq) GetCallStatus() OptUpdateCallReqCallStatus {
	return s.CallStatus
}

// GetConfMuteStatus returns the value of ConfMuteStatus.
func (s *UpdateCallReq) GetConfMuteStatus() OptUpdateCallReqConfMuteStatus {
	return s.ConfMuteStatus
}

// GetConfHoldStatus returns the value of ConfHoldStatus.
func (s *UpdateCallReq) GetConfHoldStatus() OptUpdateCallReqConfHoldStatus {
	return s.ConfHoldStatus
}

// GetListenStatus returns the value of ListenStatus.
func (s *UpdateCallReq) GetListenStatus() OptUpdateCallReqListenStatus {
	return s.ListenStatus
}

// GetMuteStatus returns the value of MuteStatus.
func (s *UpdateCallReq) GetMuteStatus() OptUpdateCallReqMuteStatus {
	return s.MuteStatus
}

// GetWhisper returns the value of Whisper.
func (s *UpdateCallReq) GetWhisper() OptWebhook {
	return s.Whisper
}

// GetSipRequest returns the value of SipRequest.
func (s *UpdateCallReq) GetSipRequest() OptUpdateCallReqSipRequest {
	return s.SipRequest
}

// GetRecord returns the value of Record.
func (s *UpdateCallReq) GetRecord() OptUpdateCallReqRecord {
	return s.Record
}

// GetConferenceParticipantAction returns the value of ConferenceParticipantAction.
func (s *UpdateCallReq) GetConferenceParticipantAction() OptUpdateCallReqConferenceParticipantAction {
	return s.ConferenceParticipantAction
}

// SetCallHook sets the value of CallHook.
func (s *UpdateCallReq) SetCallHook(val OptWebhook) {
	s.CallHook = val
}

// SetChildCallHook sets the value of ChildCallHook.
func (s *UpdateCallReq) SetChildCallHook(val OptWebhook) {
	s.ChildCallHook = val
}

// SetCallStatus sets the value of CallStatus.
func (s *UpdateCallReq) SetCallStatus(val OptUpdateCallReqCallStatus) {
	s.CallStatus = val
}

// SetConfMuteStatus sets the value of ConfMuteStatus.
func (s *UpdateCallReq) SetConfMuteStatus(val OptUpdateCallReqConfMuteStatus) {
	s.ConfMuteStatus = val
}

// SetConfHoldStatus sets the value of ConfHoldStatus.
func (s *UpdateCallReq) SetConfHoldStatus(val OptUpdateCallReqConfHoldStatus) {
	s.ConfHoldStatus = val
}

// SetListenStatus sets the value of ListenStatus.
func (s *UpdateCallReq) SetListenStatus(val OptUpdateCallReqListenStatus) {
	s.ListenStatus = val
}

// SetMuteStatus sets the value of MuteStatus.
func (s *UpdateCallReq) SetMuteStatus(val OptUpdateCallReqMuteStatus) {
	s.MuteStatus = val
}

// SetWhisper sets the value of Whisper.
func (s *UpdateCallReq) SetWhisper(val OptWebhook) {
	s.Whisper = val
}

// SetSipRequest sets the value of SipRequest.
func (s *UpdateCallReq) SetSipRequest(val OptUpdateCallReqSipRequest) {
	s.SipRequest = val
}

// SetRecord sets the value of Record.
func (s *UpdateCallReq) SetRecord(val OptUpdateCallReqRecord) {
	s.Record = val
}

// SetConferenceParticipantAction sets the value of ConferenceParticipantAction.
func (s *UpdateCallReq) SetConferenceParticipantAction(val OptUpdateCallReqConferenceParticipantAction) {
	s.ConferenceParticipantAction = val
}

type UpdateCallReqCallStatus string

const (
	UpdateCallReqCallStatusCompleted UpdateCallReqCallStatus = "completed"
	UpdateCallReqCallStatusNoAnswer  UpdateCallReqCallStatus = "no-answer"
)

// AllValues returns all UpdateCallReqCallStatus values.
func (UpdateCallReqCallStatus) AllValues() []UpdateCallReqCallStatus {
	return []UpdateCallReqCallStatus{
		UpdateCallReqCallStatusCompleted,
		UpdateCallReqCallStatusNoAnswer,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UpdateCallReqCallStatus) MarshalText() ([]byte, error) {
	switch s {
	case UpdateCallReqCallStatusCompleted:
		return []byte(s), nil
	case UpdateCallReqCallStatusNoAnswer:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UpdateCallReqCallStatus) UnmarshalText(data []byte) error {
	switch UpdateCallReqCallStatus(data) {
	case UpdateCallReqCallStatusCompleted:
		*s = UpdateCallReqCallStatusCompleted
		return nil
	case UpdateCallReqCallStatusNoAnswer:
		*s = UpdateCallReqCallStatusNoAnswer
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type UpdateCallReqConfHoldStatus string

const (
	UpdateCallReqConfHoldStatusHold   UpdateCallReqConfHoldStatus = "hold"
	UpdateCallReqConfHoldStatusUnhold UpdateCallReqConfHoldStatus = "unhold"
)

// AllValues returns all UpdateCallReqConfHoldStatus values.
func (UpdateCallReqConfHoldStatus) AllValues() []UpdateCallReqConfHoldStatus {
	return []UpdateCallReqConfHoldStatus{
		UpdateCallReqConfHoldStatusHold,
		UpdateCallReqConfHoldStatusUnhold,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UpdateCallReqConfHoldStatus) MarshalText() ([]byte, error) {
	switch s {
	case UpdateCallReqConfHoldStatusHold:
		return []byte(s), nil
	case UpdateCallReqConfHoldStatusUnhold:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UpdateCallReqConfHoldStatus) UnmarshalText(data []byte) error {
	switch UpdateCallReqConfHoldStatus(data) {
	case UpdateCallReqConfHoldStatusHold:
		*s = UpdateCallReqConfHoldStatusHold
		return nil
	case UpdateCallReqConfHoldStatusUnhold:
		*s = UpdateCallReqConfHoldStatusUnhold
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type UpdateCallReqConfMuteStatus string

const (
	UpdateCallReqConfMuteStatusMute   UpdateCallReqConfMuteStatus = "mute"
	UpdateCallReqConfMuteStatusUnmute UpdateCallReqConfMuteStatus = "unmute"
)

// AllValues returns all UpdateCallReqConfMuteStatus values.
func (UpdateCallReqConfMuteStatus) AllValues() []UpdateCallReqConfMuteStatus {
	return []UpdateCallReqConfMuteStatus{
		UpdateCallReqConfMuteStatusMute,
		UpdateCallReqConfMuteStatusUnmute,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UpdateCallReqConfMuteStatus) MarshalText() ([]byte, error) {
	switch s {
	case UpdateCallReqConfMuteStatusMute:
		return []byte(s), nil
	case UpdateCallReqConfMuteStatusUnmute:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UpdateCallReqConfMuteStatus) UnmarshalText(data []byte) error {
	switch UpdateCallReqConfMuteStatus(data) {
	case UpdateCallReqConfMuteStatusMute:
		*s = UpdateCallReqConfMuteStatusMute
		return nil
	case UpdateCallReqConfMuteStatusUnmute:
		*s = UpdateCallReqConfMuteStatusUnmute
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type UpdateCallReqConferenceParticipantAction struct {
	Action OptUpdateCallReqConferenceParticipantActionAction `json:"action"`
	Tag    OptString                                         `json:"tag"`
}

// GetAction returns the value of Action.
func (s *UpdateCallReqConferenceParticipantAction) GetAction() OptUpdateCallReqConferenceParticipantActionAction {
	return s.Action
}

// GetTag returns the value of Tag.
func (s *UpdateCallReqConferenceParticipantAction) GetTag() OptString {
	return s.Tag
}

// SetAction sets the value of Action.
func (s *UpdateCallReqConferenceParticipantAction) SetAction(val OptUpdateCallReqConferenceParticipantActionAction) {
	s.Action = val
}

// SetTag sets the value of Tag.
func (s *UpdateCallReqConferenceParticipantAction) SetTag(val OptString) {
	s.Tag = val
}

type UpdateCallReqConferenceParticipantActionAction string

const (
	UpdateCallReqConferenceParticipantActionActionTag     UpdateCallReqConferenceParticipantActionAction = "tag"
	UpdateCallReqConferenceParticipantActionActionUntag   UpdateCallReqConferenceParticipantActionAction = "untag"
	UpdateCallReqConferenceParticipantActionActionCoach   UpdateCallReqConferenceParticipantActionAction = "coach"
	UpdateCallReqConferenceParticipantActionActionUncoach UpdateCallReqConferenceParticipantActionAction = "uncoach"
	UpdateCallReqConferenceParticipantActionActionMute    UpdateCallReqConferenceParticipantActionAction = "mute"
	UpdateCallReqConferenceParticipantActionActionUnmute  UpdateCallReqConferenceParticipantActionAction = "unmute"
	UpdateCallReqConferenceParticipantActionActionHold    UpdateCallReqConferenceParticipantActionAction = "hold"
	UpdateCallReqConferenceParticipantActionActionUnhold  UpdateCallReqConferenceParticipantActionAction = "unhold"
)

// AllValues returns all UpdateCallReqConferenceParticipantActionAction values.
func (UpdateCallReqConferenceParticipantActionAction) AllValues() []UpdateCallReqConferenceParticipantActionAction {
	return []UpdateCallReqConferenceParticipantActionAction{
		UpdateCallReqConferenceParticipantActionActionTag,
		UpdateCallReqConferenceParticipantActionActionUntag,
		UpdateCallReqConferenceParticipantActionActionCoach,
		UpdateCallReqConferenceParticipantActionActionUncoach,
		UpdateCallReqConferenceParticipantActionActionMute,
		UpdateCallReqConferenceParticipantActionActionUnmute,
		UpdateCallReqConferenceParticipantActionActionHold,
		UpdateCallReqConferenceParticipantActionActionUnhold,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UpdateCallReqConferenceParticipantActionAction) MarshalText() ([]byte, error) {
	switch s {
	case UpdateCallReqConferenceParticipantActionActionTag:
		return []byte(s), nil
	case UpdateCallReqConferenceParticipantActionActionUntag:
		return []byte(s), nil
	case UpdateCallReqConferenceParticipantActionActionCoach:
		return []byte(s), nil
	case UpdateCallReqConferenceParticipantActionActionUncoach:
		return []byte(s), nil
	case UpdateCallReqConferenceParticipantActionActionMute:
		return []byte(s), nil
	case UpdateCallReqConferenceParticipantActionActionUnmute:
		return []byte(s), nil
	case UpdateCallReqConferenceParticipantActionActionHold:
		return []byte(s), nil
	case UpdateCallReqConferenceParticipantActionActionUnhold:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UpdateCallReqConferenceParticipantActionAction) UnmarshalText(data []byte) error {
	switch UpdateCallReqConferenceParticipantActionAction(data) {
	case UpdateCallReqConferenceParticipantActionActionTag:
		*s = UpdateCallReqConferenceParticipantActionActionTag
		return nil
	case UpdateCallReqConferenceParticipantActionActionUntag:
		*s = UpdateCallReqConferenceParticipantActionActionUntag
		return nil
	case UpdateCallReqConferenceParticipantActionActionCoach:
		*s = UpdateCallReqConferenceParticipantActionActionCoach
		return nil
	case UpdateCallReqConferenceParticipantActionActionUncoach:
		*s = UpdateCallReqConferenceParticipantActionActionUncoach
		return nil
	case UpdateCallReqConferenceParticipantActionActionMute:
		*s = UpdateCallReqConferenceParticipantActionActionMute
		return nil
	case UpdateCallReqConferenceParticipantActionActionUnmute:
		*s = UpdateCallReqConferenceParticipantActionActionUnmute
		return nil
	case UpdateCallReqConferenceParticipantActionActionHold:
		*s = UpdateCallReqConferenceParticipantActionActionHold
		return nil
	case UpdateCallReqConferenceParticipantActionActionUnhold:
		*s = UpdateCallReqConferenceParticipantActionActionUnhold
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type UpdateCallReqListenStatus string

const (
	UpdateCallReqListenStatusPause   UpdateCallReqListenStatus = "pause"
	UpdateCallReqListenStatusSilence UpdateCallReqListenStatus = "silence"
	UpdateCallReqListenStatusResume  UpdateCallReqListenStatus = "resume"
)

// AllValues returns all UpdateCallReqListenStatus values.
func (UpdateCallReqListenStatus) AllValues() []UpdateCallReqListenStatus {
	return []UpdateCallReqListenStatus{
		UpdateCallReqListenStatusPause,
		UpdateCallReqListenStatusSilence,
		UpdateCallReqListenStatusResume,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UpdateCallReqListenStatus) MarshalText() ([]byte, error) {
	switch s {
	case UpdateCallReqListenStatusPause:
		return []byte(s), nil
	case UpdateCallReqListenStatusSilence:
		return []byte(s), nil
	case UpdateCallReqListenStatusResume:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UpdateCallReqListenStatus) UnmarshalText(data []byte) error {
	switch UpdateCallReqListenStatus(data) {
	case UpdateCallReqListenStatusPause:
		*s = UpdateCallReqListenStatusPause
		return nil
	case UpdateCallReqListenStatusSilence:
		*s = UpdateCallReqListenStatusSilence
		return nil
	case UpdateCallReqListenStatusResume:
		*s = UpdateCallReqListenStatusResume
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type UpdateCallReqMuteStatus string

const (
	UpdateCallReqMuteStatusMute   UpdateCallReqMuteStatus = "mute"
	UpdateCallReqMuteStatusUnmute UpdateCallReqMuteStatus = "unmute"
)

// AllValues returns all UpdateCallReqMuteStatus values.
func (UpdateCallReqMuteStatus) AllValues() []UpdateCallReqMuteStatus {
	return []UpdateCallReqMuteStatus{
		UpdateCallReqMuteStatusMute,
		UpdateCallReqMuteStatusUnmute,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UpdateCallReqMuteStatus) MarshalText() ([]byte, error) {
	switch s {
	case UpdateCallReqMuteStatusMute:
		return []byte(s), nil
	case UpdateCallReqMuteStatusUnmute:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UpdateCallReqMuteStatus) UnmarshalText(data []byte) error {
	switch UpdateCallReqMuteStatus(data) {
	case UpdateCallReqMuteStatusMute:
		*s = UpdateCallReqMuteStatusMute
		return nil
	case UpdateCallReqMuteStatusUnmute:
		*s = UpdateCallReqMuteStatusUnmute
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type UpdateCallReqRecord struct {
	Action          OptUpdateCallReqRecordAction `json:"action"`
	RecordingID     OptString                    `json:"recordingID"`
	SiprecServerURL OptString                    `json:"siprecServerURL"`
}

// GetAction returns the value of Action.
func (s *UpdateCallReqRecord) GetAction() OptUpdateCallReqRecordAction {
	return s.Action
}

// GetRecordingID returns the value of RecordingID.
func (s *UpdateCallReqRecord) GetRecordingID() OptString {
	return s.RecordingID
}

// GetSiprecServerURL returns the value of SiprecServerURL.
func (s *UpdateCallReqRecord) GetSiprecServerURL() OptString {
	return s.SiprecServerURL
}

// SetAction sets the value of Action.
func (s *UpdateCallReqRecord) SetAction(val OptUpdateCallReqRecordAction) {
	s.Action = val
}

// SetRecordingID sets the value of RecordingID.
func (s *UpdateCallReqRecord) SetRecordingID(val OptString) {
	s.RecordingID = val
}

// SetSiprecServerURL sets the value of SiprecServerURL.
func (s *UpdateCallReqRecord) SetSiprecServerURL(val OptString) {
	s.SiprecServerURL = val
}

type UpdateCallReqRecordAction string

const (
	UpdateCallReqRecordActionStartCallRecording  UpdateCallReqRecordAction = "startCallRecording"
	UpdateCallReqRecordActionStopCallRecording   UpdateCallReqRecordAction = "stopCallRecording"
	UpdateCallReqRecordActionPauseCallRecording  UpdateCallReqRecordAction = "pauseCallRecording"
	UpdateCallReqRecordActionResumeCallRecording UpdateCallReqRecordAction = "resumeCallRecording"
)

// AllValues returns all UpdateCallReqRecordAction values.
func (UpdateCallReqRecordAction) AllValues() []UpdateCallReqRecordAction {
	return []UpdateCallReqRecordAction{
		UpdateCallReqRecordActionStartCallRecording,
		UpdateCallReqRecordActionStopCallRecording,
		UpdateCallReqRecordActionPauseCallRecording,
		UpdateCallReqRecordActionResumeCallRecording,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UpdateCallReqRecordAction) MarshalText() ([]byte, error) {
	switch s {
	case UpdateCallReqRecordActionStartCallRecording:
		return []byte(s), nil
	case UpdateCallReqRecordActionStopCallRecording:
		return []byte(s), nil
	case UpdateCallReqRecordActionPauseCallRecording:
		return []byte(s), nil
	case UpdateCallReqRecordActionResumeCallRecording:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UpdateCallReqRecordAction) UnmarshalText(data []byte) error {
	switch UpdateCallReqRecordAction(data) {
	case UpdateCallReqRecordActionStartCallRecording:
		*s = UpdateCallReqRecordActionStartCallRecording
		return nil
	case UpdateCallReqRecordActionStopCallRecording:
		*s = UpdateCallReqRecordActionStopCallRecording
		return nil
	case UpdateCallReqRecordActionPauseCallRecording:
		*s = UpdateCallReqRecordActionPauseCallRecording
		return nil
	case UpdateCallReqRecordActionResumeCallRecording:
		*s = UpdateCallReqRecordActionResumeCallRecording
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type UpdateCallReqSipRequest struct {
	Method      OptString                       `json:"method"`
	ContentType OptString                       `json:"content_type"`
	Content     OptString                       `json:"content"`
	Headers     *UpdateCallReqSipRequestHeaders `json:"headers"`
}

// GetMethod returns the value of Method.
func (s *UpdateCallReqSipRequest) GetMethod() OptString {
	return s.Method
}

// GetContentType returns the value of ContentType.
func (s *UpdateCallReqSipRequest) GetContentType() OptString {
	return s.ContentType
}

// GetContent returns the value of Content.
func (s *UpdateCallReqSipRequest) GetContent() OptString {
	return s.Content
}

// GetHeaders returns the value of Headers.
func (s *UpdateCallReqSipRequest) GetHeaders() *UpdateCallReqSipRequestHeaders {
	return s.Headers
}

// SetMethod sets the value of Method.
func (s *UpdateCallReqSipRequest) SetMethod(val OptString) {
	s.Method = val
}

// SetContentType sets the value of ContentType.
func (s *UpdateCallReqSipRequest) SetContentType(val OptString) {
	s.ContentType = val
}

// SetContent sets the value of Content.
func (s *UpdateCallReqSipRequest) SetContent(val OptString) {
	s.Content = val
}

// SetHeaders sets the value of Headers.
func (s *UpdateCallReqSipRequest) SetHeaders(val *UpdateCallReqSipRequestHeaders) {
	s.Headers = val
}

type UpdateCallReqSipRequestHeaders struct{}

type UpdateCallUnprocessableEntity GeneralError

func (*UpdateCallUnprocessableEntity) updateCallRes() {}

type UpdateGoogleCustomVoiceBadRequest GeneralError

func (*UpdateGoogleCustomVoiceBadRequest) updateGoogleCustomVoiceRes() {}

type UpdateGoogleCustomVoiceInternalServerError GeneralError

func (*UpdateGoogleCustomVoiceInternalServerError) updateGoogleCustomVoiceRes() {}

// UpdateGoogleCustomVoiceNotFound is response for UpdateGoogleCustomVoice operation.
type UpdateGoogleCustomVoiceNotFound struct{}

func (*UpdateGoogleCustomVoiceNotFound) updateGoogleCustomVoiceRes() {}

type UpdateLeastCostRoutingBadRequest GeneralError

func (*UpdateLeastCostRoutingBadRequest) updateLeastCostRoutingRes() {}

type UpdateLeastCostRoutingCarrierSetEntryBadRequest GeneralError

func (*UpdateLeastCostRoutingCarrierSetEntryBadRequest) updateLeastCostRoutingCarrierSetEntryRes() {}

type UpdateLeastCostRoutingCarrierSetEntryInternalServerError GeneralError

func (*UpdateLeastCostRoutingCarrierSetEntryInternalServerError) updateLeastCostRoutingCarrierSetEntryRes() {
}

// UpdateLeastCostRoutingCarrierSetEntryNotFound is response for UpdateLeastCostRoutingCarrierSetEntry operation.
type UpdateLeastCostRoutingCarrierSetEntryNotFound struct{}

func (*UpdateLeastCostRoutingCarrierSetEntryNotFound) updateLeastCostRoutingCarrierSetEntryRes() {}

type UpdateLeastCostRoutingInternalServerError GeneralError

func (*UpdateLeastCostRoutingInternalServerError) updateLeastCostRoutingRes() {}

// UpdateLeastCostRoutingNotFound is response for UpdateLeastCostRouting operation.
type UpdateLeastCostRoutingNotFound struct{}

func (*UpdateLeastCostRoutingNotFound) updateLeastCostRoutingRes() {}

type UpdateLeastCostRoutingRouteBadRequest GeneralError

func (*UpdateLeastCostRoutingRouteBadRequest) updateLeastCostRoutingRouteRes() {}

type UpdateLeastCostRoutingRouteInternalServerError GeneralError

func (*UpdateLeastCostRoutingRouteInternalServerError) updateLeastCostRoutingRouteRes() {}

// UpdateLeastCostRoutingRouteNotFound is response for UpdateLeastCostRoutingRoute operation.
type UpdateLeastCostRoutingRouteNotFound struct{}

func (*UpdateLeastCostRoutingRouteNotFound) updateLeastCostRoutingRouteRes() {}

type UpdateLeastCostRoutingRoutesAndCarrierEntriesBadRequest GeneralError

func (*UpdateLeastCostRoutingRoutesAndCarrierEntriesBadRequest) updateLeastCostRoutingRoutesAndCarrierEntriesRes() {
}

type UpdateLeastCostRoutingRoutesAndCarrierEntriesInternalServerError GeneralError

func (*UpdateLeastCostRoutingRoutesAndCarrierEntriesInternalServerError) updateLeastCostRoutingRoutesAndCarrierEntriesRes() {
}

// UpdateLeastCostRoutingRoutesAndCarrierEntriesNoContent is response for UpdateLeastCostRoutingRoutesAndCarrierEntries operation.
type UpdateLeastCostRoutingRoutesAndCarrierEntriesNoContent struct{}

func (*UpdateLeastCostRoutingRoutesAndCarrierEntriesNoContent) updateLeastCostRoutingRoutesAndCarrierEntriesRes() {
}

// UpdateLeastCostRoutingRoutesAndCarrierEntriesNotFound is response for UpdateLeastCostRoutingRoutesAndCarrierEntries operation.
type UpdateLeastCostRoutingRoutesAndCarrierEntriesNotFound struct{}

func (*UpdateLeastCostRoutingRoutesAndCarrierEntriesNotFound) updateLeastCostRoutingRoutesAndCarrierEntriesRes() {
}

type UpdatePhoneNumberBadRequest GeneralError

func (*UpdatePhoneNumberBadRequest) updatePhoneNumberRes() {}

type UpdatePhoneNumberInternalServerError GeneralError

func (*UpdatePhoneNumberInternalServerError) updatePhoneNumberRes() {}

// UpdatePhoneNumberNoContent is response for UpdatePhoneNumber operation.
type UpdatePhoneNumberNoContent struct{}

func (*UpdatePhoneNumberNoContent) updatePhoneNumberRes() {}

// UpdatePhoneNumberNotFound is response for UpdatePhoneNumber operation.
type UpdatePhoneNumberNotFound struct{}

func (*UpdatePhoneNumberNotFound) updatePhoneNumberRes() {}

type UpdatePhoneNumberReq struct {
	AccountSid     uuid.UUID `json:"account_sid"`
	ApplicationSid NilUUID   `json:"application_sid"`
}

// GetAccountSid returns the value of AccountSid.
func (s *UpdatePhoneNumberReq) GetAccountSid() uuid.UUID {
	return s.AccountSid
}

// GetApplicationSid returns the value of ApplicationSid.
func (s *UpdatePhoneNumberReq) GetApplicationSid() NilUUID {
	return s.ApplicationSid
}

// SetAccountSid sets the value of AccountSid.
func (s *UpdatePhoneNumberReq) SetAccountSid(val uuid.UUID) {
	s.AccountSid = val
}

// SetApplicationSid sets the value of ApplicationSid.
func (s *UpdatePhoneNumberReq) SetApplicationSid(val NilUUID) {
	s.ApplicationSid = val
}

type UpdateServiceProviderInternalServerError GeneralError

func (*UpdateServiceProviderInternalServerError) updateServiceProviderRes() {}

// UpdateServiceProviderNoContent is response for UpdateServiceProvider operation.
type UpdateServiceProviderNoContent struct{}

func (*UpdateServiceProviderNoContent) updateServiceProviderRes() {}

// UpdateServiceProviderNotFound is response for UpdateServiceProvider operation.
type UpdateServiceProviderNotFound struct{}

func (*UpdateServiceProviderNotFound) updateServiceProviderRes() {}

type UpdateServiceProviderUnprocessableEntity GeneralError

func (*UpdateServiceProviderUnprocessableEntity) updateServiceProviderRes() {}

type UpdateSipGatewayBadRequest GeneralError

func (*UpdateSipGatewayBadRequest) updateSipGatewayRes() {}

type UpdateSipGatewayInternalServerError GeneralError

func (*UpdateSipGatewayInternalServerError) updateSipGatewayRes() {}

// UpdateSipGatewayNoContent is response for UpdateSipGateway operation.
type UpdateSipGatewayNoContent struct{}

func (*UpdateSipGatewayNoContent) updateSipGatewayRes() {}

// UpdateSipGatewayNotFound is response for UpdateSipGateway operation.
type UpdateSipGatewayNotFound struct{}

func (*UpdateSipGatewayNotFound) updateSipGatewayRes() {}

type UpdateSmppGatewayBadRequest GeneralError

func (*UpdateSmppGatewayBadRequest) updateSmppGatewayRes() {}

type UpdateSmppGatewayInternalServerError GeneralError

func (*UpdateSmppGatewayInternalServerError) updateSmppGatewayRes() {}

// UpdateSmppGatewayNoContent is response for UpdateSmppGateway operation.
type UpdateSmppGatewayNoContent struct{}

func (*UpdateSmppGatewayNoContent) updateSmppGatewayRes() {}

// UpdateSmppGatewayNotFound is response for UpdateSmppGateway operation.
type UpdateSmppGatewayNotFound struct{}

func (*UpdateSmppGatewayNotFound) updateSmppGatewayRes() {}

// UpdateSpeechCredentialByAccountNoContent is response for UpdateSpeechCredentialByAccount operation.
type UpdateSpeechCredentialByAccountNoContent struct{}

func (*UpdateSpeechCredentialByAccountNoContent) updateSpeechCredentialByAccountRes() {}

// UpdateSpeechCredentialByAccountNotFound is response for UpdateSpeechCredentialByAccount operation.
type UpdateSpeechCredentialByAccountNotFound struct{}

func (*UpdateSpeechCredentialByAccountNotFound) updateSpeechCredentialByAccountRes() {}

// UpdateSpeechCredentialNoContent is response for UpdateSpeechCredential operation.
type UpdateSpeechCredentialNoContent struct{}

func (*UpdateSpeechCredentialNoContent) updateSpeechCredentialRes() {}

// UpdateSpeechCredentialNotFound is response for UpdateSpeechCredential operation.
type UpdateSpeechCredentialNotFound struct{}

func (*UpdateSpeechCredentialNotFound) updateSpeechCredentialRes() {}

type UpdateUserForbidden GeneralError

func (*UpdateUserForbidden) updateUserRes() {}

type UpdateUserInternalServerError GeneralError

func (*UpdateUserInternalServerError) updateUserRes() {}

// UpdateUserNoContent is response for UpdateUser operation.
type UpdateUserNoContent struct{}

func (*UpdateUserNoContent) updateUserRes() {}

type UpdateUserReq struct {
	Name                OptString `json:"name"`
	Email               OptString `json:"email"`
	EmailActivationCode OptString `json:"email_activation_code"`
	// Existing password, which is to be replaced.
	OldPassword OptString `json:"old_password"`
	// New password.
	NewPassword OptString `json:"new_password"`
	IsActive    OptBool   `json:"is_active"`
	ForceChange OptBool   `json:"force_change"`
	Scope       OptString `json:"scope"`
	Permissions []string  `json:"permissions"`
}

// GetName returns the value of Name.
func (s *UpdateUserReq) GetName() OptString {
	return s.Name
}

// GetEmail returns the value of Email.
func (s *UpdateUserReq) GetEmail() OptString {
	return s.Email
}

// GetEmailActivationCode returns the value of EmailActivationCode.
func (s *UpdateUserReq) GetEmailActivationCode() OptString {
	return s.EmailActivationCode
}

// GetOldPassword returns the value of OldPassword.
func (s *UpdateUserReq) GetOldPassword() OptString {
	return s.OldPassword
}

// GetNewPassword returns the value of NewPassword.
func (s *UpdateUserReq) GetNewPassword() OptString {
	return s.NewPassword
}

// GetIsActive returns the value of IsActive.
func (s *UpdateUserReq) GetIsActive() OptBool {
	return s.IsActive
}

// GetForceChange returns the value of ForceChange.
func (s *UpdateUserReq) GetForceChange() OptBool {
	return s.ForceChange
}

// GetScope returns the value of Scope.
func (s *UpdateUserReq) GetScope() OptString {
	return s.Scope
}

// GetPermissions returns the value of Permissions.
func (s *UpdateUserReq) GetPermissions() []string {
	return s.Permissions
}

// SetName sets the value of Name.
func (s *UpdateUserReq) SetName(val OptString) {
	s.Name = val
}

// SetEmail sets the value of Email.
func (s *UpdateUserReq) SetEmail(val OptString) {
	s.Email = val
}

// SetEmailActivationCode sets the value of EmailActivationCode.
func (s *UpdateUserReq) SetEmailActivationCode(val OptString) {
	s.EmailActivationCode = val
}

// SetOldPassword sets the value of OldPassword.
func (s *UpdateUserReq) SetOldPassword(val OptString) {
	s.OldPassword = val
}

// SetNewPassword sets the value of NewPassword.
func (s *UpdateUserReq) SetNewPassword(val OptString) {
	s.NewPassword = val
}

// SetIsActive sets the value of IsActive.
func (s *UpdateUserReq) SetIsActive(val OptBool) {
	s.IsActive = val
}

// SetForceChange sets the value of ForceChange.
func (s *UpdateUserReq) SetForceChange(val OptBool) {
	s.ForceChange = val
}

// SetScope sets the value of Scope.
func (s *UpdateUserReq) SetScope(val OptString) {
	s.Scope = val
}

// SetPermissions sets the value of Permissions.
func (s *UpdateUserReq) SetPermissions(val []string) {
	s.Permissions = val
}

type UpdateVoipCarrierBadRequest GeneralError

func (*UpdateVoipCarrierBadRequest) updateVoipCarrierRes() {}

type UpdateVoipCarrierInternalServerError GeneralError

func (*UpdateVoipCarrierInternalServerError) updateVoipCarrierRes() {}

// UpdateVoipCarrierNotFound is response for UpdateVoipCarrier operation.
type UpdateVoipCarrierNotFound struct{}

func (*UpdateVoipCarrierNotFound) updateVoipCarrierRes() {}

// Ref: #/components/schemas/UserAndAccountDetail
type UserAndAccountDetail struct {
	User       OptUserAndAccountDetailUser        `json:"user"`
	Account    OptUserAndAccountDetailAccount     `json:"account"`
	Testapp    OptUserAndAccountDetailTestapp     `json:"testapp"`
	Balance    OptUserAndAccountDetailBalance     `json:"balance"`
	Capacities OptUserAndAccountDetailCapacities  `json:"capacities"`
	APIKeys    []UserAndAccountDetailAPIKeysItem  `json:"api_keys"`
	Products   []UserAndAccountDetailProductsItem `json:"products"`
}

// GetUser returns the value of User.
func (s *UserAndAccountDetail) GetUser() OptUserAndAccountDetailUser {
	return s.User
}

// GetAccount returns the value of Account.
func (s *UserAndAccountDetail) GetAccount() OptUserAndAccountDetailAccount {
	return s.Account
}

// GetTestapp returns the value of Testapp.
func (s *UserAndAccountDetail) GetTestapp() OptUserAndAccountDetailTestapp {
	return s.Testapp
}

// GetBalance returns the value of Balance.
func (s *UserAndAccountDetail) GetBalance() OptUserAndAccountDetailBalance {
	return s.Balance
}

// GetCapacities returns the value of Capacities.
func (s *UserAndAccountDetail) GetCapacities() OptUserAndAccountDetailCapacities {
	return s.Capacities
}

// GetAPIKeys returns the value of APIKeys.
func (s *UserAndAccountDetail) GetAPIKeys() []UserAndAccountDetailAPIKeysItem {
	return s.APIKeys
}

// GetProducts returns the value of Products.
func (s *UserAndAccountDetail) GetProducts() []UserAndAccountDetailProductsItem {
	return s.Products
}

// SetUser sets the value of User.
func (s *UserAndAccountDetail) SetUser(val OptUserAndAccountDetailUser) {
	s.User = val
}

// SetAccount sets the value of Account.
func (s *UserAndAccountDetail) SetAccount(val OptUserAndAccountDetailAccount) {
	s.Account = val
}

// SetTestapp sets the value of Testapp.
func (s *UserAndAccountDetail) SetTestapp(val OptUserAndAccountDetailTestapp) {
	s.Testapp = val
}

// SetBalance sets the value of Balance.
func (s *UserAndAccountDetail) SetBalance(val OptUserAndAccountDetailBalance) {
	s.Balance = val
}

// SetCapacities sets the value of Capacities.
func (s *UserAndAccountDetail) SetCapacities(val OptUserAndAccountDetailCapacities) {
	s.Capacities = val
}

// SetAPIKeys sets the value of APIKeys.
func (s *UserAndAccountDetail) SetAPIKeys(val []UserAndAccountDetailAPIKeysItem) {
	s.APIKeys = val
}

// SetProducts sets the value of Products.
func (s *UserAndAccountDetail) SetProducts(val []UserAndAccountDetailProductsItem) {
	s.Products = val
}

func (*UserAndAccountDetail) getMyDetailsRes() {}

type UserAndAccountDetailAPIKeysItem struct {
	Token     OptString   `json:"token"`
	LastUsed  OptDateTime `json:"last_used"`
	CreatedAt OptDateTime `json:"created_at"`
}

// GetToken returns the value of Token.
func (s *UserAndAccountDetailAPIKeysItem) GetToken() OptString {
	return s.Token
}

// GetLastUsed returns the value of LastUsed.
func (s *UserAndAccountDetailAPIKeysItem) GetLastUsed() OptDateTime {
	return s.LastUsed
}

// GetCreatedAt returns the value of CreatedAt.
func (s *UserAndAccountDetailAPIKeysItem) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// SetToken sets the value of Token.
func (s *UserAndAccountDetailAPIKeysItem) SetToken(val OptString) {
	s.Token = val
}

// SetLastUsed sets the value of LastUsed.
func (s *UserAndAccountDetailAPIKeysItem) SetLastUsed(val OptDateTime) {
	s.LastUsed = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *UserAndAccountDetailAPIKeysItem) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

type UserAndAccountDetailAccount struct {
	AccountSid                  OptString   `json:"account_sid"`
	SipRealm                    OptString   `json:"sip_realm"`
	ServiceProviderSid          OptString   `json:"service_provider_sid"`
	RegistrationHookSid         OptString   `json:"registration_hook_sid"`
	QueueEventHookSid           OptString   `json:"queue_event_hook_sid"`
	DeviceCallingApplicationSid OptString   `json:"device_calling_application_sid"`
	IsActive                    OptBool     `json:"is_active"`
	CreatedAt                   OptDateTime `json:"created_at"`
}

// GetAccountSid returns the value of AccountSid.
func (s *UserAndAccountDetailAccount) GetAccountSid() OptString {
	return s.AccountSid
}

// GetSipRealm returns the value of SipRealm.
func (s *UserAndAccountDetailAccount) GetSipRealm() OptString {
	return s.SipRealm
}

// GetServiceProviderSid returns the value of ServiceProviderSid.
func (s *UserAndAccountDetailAccount) GetServiceProviderSid() OptString {
	return s.ServiceProviderSid
}

// GetRegistrationHookSid returns the value of RegistrationHookSid.
func (s *UserAndAccountDetailAccount) GetRegistrationHookSid() OptString {
	return s.RegistrationHookSid
}

// GetQueueEventHookSid returns the value of QueueEventHookSid.
func (s *UserAndAccountDetailAccount) GetQueueEventHookSid() OptString {
	return s.QueueEventHookSid
}

// GetDeviceCallingApplicationSid returns the value of DeviceCallingApplicationSid.
func (s *UserAndAccountDetailAccount) GetDeviceCallingApplicationSid() OptString {
	return s.DeviceCallingApplicationSid
}

// GetIsActive returns the value of IsActive.
func (s *UserAndAccountDetailAccount) GetIsActive() OptBool {
	return s.IsActive
}

// GetCreatedAt returns the value of CreatedAt.
func (s *UserAndAccountDetailAccount) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// SetAccountSid sets the value of AccountSid.
func (s *UserAndAccountDetailAccount) SetAccountSid(val OptString) {
	s.AccountSid = val
}

// SetSipRealm sets the value of SipRealm.
func (s *UserAndAccountDetailAccount) SetSipRealm(val OptString) {
	s.SipRealm = val
}

// SetServiceProviderSid sets the value of ServiceProviderSid.
func (s *UserAndAccountDetailAccount) SetServiceProviderSid(val OptString) {
	s.ServiceProviderSid = val
}

// SetRegistrationHookSid sets the value of RegistrationHookSid.
func (s *UserAndAccountDetailAccount) SetRegistrationHookSid(val OptString) {
	s.RegistrationHookSid = val
}

// SetQueueEventHookSid sets the value of QueueEventHookSid.
func (s *UserAndAccountDetailAccount) SetQueueEventHookSid(val OptString) {
	s.QueueEventHookSid = val
}

// SetDeviceCallingApplicationSid sets the value of DeviceCallingApplicationSid.
func (s *UserAndAccountDetailAccount) SetDeviceCallingApplicationSid(val OptString) {
	s.DeviceCallingApplicationSid = val
}

// SetIsActive sets the value of IsActive.
func (s *UserAndAccountDetailAccount) SetIsActive(val OptBool) {
	s.IsActive = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *UserAndAccountDetailAccount) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

type UserAndAccountDetailBalance struct {
	Currency          OptUserAndAccountDetailBalanceCurrency `json:"currency"`
	Balance           OptFloat64                             `json:"balance"`
	LastUpdatedAt     OptDateTime                            `json:"last_updated_at"`
	CreatedAt         OptDateTime                            `json:"created_at"`
	LastTransactionID OptString                              `json:"last_transaction_id"`
}

// GetCurrency returns the value of Currency.
func (s *UserAndAccountDetailBalance) GetCurrency() OptUserAndAccountDetailBalanceCurrency {
	return s.Currency
}

// GetBalance returns the value of Balance.
func (s *UserAndAccountDetailBalance) GetBalance() OptFloat64 {
	return s.Balance
}

// GetLastUpdatedAt returns the value of LastUpdatedAt.
func (s *UserAndAccountDetailBalance) GetLastUpdatedAt() OptDateTime {
	return s.LastUpdatedAt
}

// GetCreatedAt returns the value of CreatedAt.
func (s *UserAndAccountDetailBalance) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetLastTransactionID returns the value of LastTransactionID.
func (s *UserAndAccountDetailBalance) GetLastTransactionID() OptString {
	return s.LastTransactionID
}

// SetCurrency sets the value of Currency.
func (s *UserAndAccountDetailBalance) SetCurrency(val OptUserAndAccountDetailBalanceCurrency) {
	s.Currency = val
}

// SetBalance sets the value of Balance.
func (s *UserAndAccountDetailBalance) SetBalance(val OptFloat64) {
	s.Balance = val
}

// SetLastUpdatedAt sets the value of LastUpdatedAt.
func (s *UserAndAccountDetailBalance) SetLastUpdatedAt(val OptDateTime) {
	s.LastUpdatedAt = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *UserAndAccountDetailBalance) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetLastTransactionID sets the value of LastTransactionID.
func (s *UserAndAccountDetailBalance) SetLastTransactionID(val OptString) {
	s.LastTransactionID = val
}

type UserAndAccountDetailBalanceCurrency string

const (
	UserAndAccountDetailBalanceCurrencyUSD UserAndAccountDetailBalanceCurrency = "USD"
	UserAndAccountDetailBalanceCurrencyEUR UserAndAccountDetailBalanceCurrency = "EUR"
)

// AllValues returns all UserAndAccountDetailBalanceCurrency values.
func (UserAndAccountDetailBalanceCurrency) AllValues() []UserAndAccountDetailBalanceCurrency {
	return []UserAndAccountDetailBalanceCurrency{
		UserAndAccountDetailBalanceCurrencyUSD,
		UserAndAccountDetailBalanceCurrencyEUR,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UserAndAccountDetailBalanceCurrency) MarshalText() ([]byte, error) {
	switch s {
	case UserAndAccountDetailBalanceCurrencyUSD:
		return []byte(s), nil
	case UserAndAccountDetailBalanceCurrencyEUR:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UserAndAccountDetailBalanceCurrency) UnmarshalText(data []byte) error {
	switch UserAndAccountDetailBalanceCurrency(data) {
	case UserAndAccountDetailBalanceCurrencyUSD:
		*s = UserAndAccountDetailBalanceCurrencyUSD
		return nil
	case UserAndAccountDetailBalanceCurrencyEUR:
		*s = UserAndAccountDetailBalanceCurrencyEUR
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type UserAndAccountDetailCapacities struct {
	EffectiveStartDate OptDateTime `json:"effective_start_date"`
	EffectiveEndDate   OptDateTime `json:"effective_end_date"`
	LimitSessions      OptInt      `json:"limit_sessions"`
	LimitRegistrations OptInt      `json:"limit_registrations"`
}

// GetEffectiveStartDate returns the value of EffectiveStartDate.
func (s *UserAndAccountDetailCapacities) GetEffectiveStartDate() OptDateTime {
	return s.EffectiveStartDate
}

// GetEffectiveEndDate returns the value of EffectiveEndDate.
func (s *UserAndAccountDetailCapacities) GetEffectiveEndDate() OptDateTime {
	return s.EffectiveEndDate
}

// GetLimitSessions returns the value of LimitSessions.
func (s *UserAndAccountDetailCapacities) GetLimitSessions() OptInt {
	return s.LimitSessions
}

// GetLimitRegistrations returns the value of LimitRegistrations.
func (s *UserAndAccountDetailCapacities) GetLimitRegistrations() OptInt {
	return s.LimitRegistrations
}

// SetEffectiveStartDate sets the value of EffectiveStartDate.
func (s *UserAndAccountDetailCapacities) SetEffectiveStartDate(val OptDateTime) {
	s.EffectiveStartDate = val
}

// SetEffectiveEndDate sets the value of EffectiveEndDate.
func (s *UserAndAccountDetailCapacities) SetEffectiveEndDate(val OptDateTime) {
	s.EffectiveEndDate = val
}

// SetLimitSessions sets the value of LimitSessions.
func (s *UserAndAccountDetailCapacities) SetLimitSessions(val OptInt) {
	s.LimitSessions = val
}

// SetLimitRegistrations sets the value of LimitRegistrations.
func (s *UserAndAccountDetailCapacities) SetLimitRegistrations(val OptInt) {
	s.LimitRegistrations = val
}

type UserAndAccountDetailProductsItem struct {
	Name               OptString   `json:"name"`
	Description        OptString   `json:"description"`
	Category           OptString   `json:"category"`
	Quantity           OptString   `json:"quantity"`
	InStarterSet       OptBool     `json:"in_starter_set"`
	ProductSid         OptString   `json:"product_sid"`
	EffectiveStartDate OptDateTime `json:"effective_start_date"`
	EffectiveEndDate   OptDateTime `json:"effective_end_date"`
}

// GetName returns the value of Name.
func (s *UserAndAccountDetailProductsItem) GetName() OptString {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *UserAndAccountDetailProductsItem) GetDescription() OptString {
	return s.Description
}

// GetCategory returns the value of Category.
func (s *UserAndAccountDetailProductsItem) GetCategory() OptString {
	return s.Category
}

// GetQuantity returns the value of Quantity.
func (s *UserAndAccountDetailProductsItem) GetQuantity() OptString {
	return s.Quantity
}

// GetInStarterSet returns the value of InStarterSet.
func (s *UserAndAccountDetailProductsItem) GetInStarterSet() OptBool {
	return s.InStarterSet
}

// GetProductSid returns the value of ProductSid.
func (s *UserAndAccountDetailProductsItem) GetProductSid() OptString {
	return s.ProductSid
}

// GetEffectiveStartDate returns the value of EffectiveStartDate.
func (s *UserAndAccountDetailProductsItem) GetEffectiveStartDate() OptDateTime {
	return s.EffectiveStartDate
}

// GetEffectiveEndDate returns the value of EffectiveEndDate.
func (s *UserAndAccountDetailProductsItem) GetEffectiveEndDate() OptDateTime {
	return s.EffectiveEndDate
}

// SetName sets the value of Name.
func (s *UserAndAccountDetailProductsItem) SetName(val OptString) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *UserAndAccountDetailProductsItem) SetDescription(val OptString) {
	s.Description = val
}

// SetCategory sets the value of Category.
func (s *UserAndAccountDetailProductsItem) SetCategory(val OptString) {
	s.Category = val
}

// SetQuantity sets the value of Quantity.
func (s *UserAndAccountDetailProductsItem) SetQuantity(val OptString) {
	s.Quantity = val
}

// SetInStarterSet sets the value of InStarterSet.
func (s *UserAndAccountDetailProductsItem) SetInStarterSet(val OptBool) {
	s.InStarterSet = val
}

// SetProductSid sets the value of ProductSid.
func (s *UserAndAccountDetailProductsItem) SetProductSid(val OptString) {
	s.ProductSid = val
}

// SetEffectiveStartDate sets the value of EffectiveStartDate.
func (s *UserAndAccountDetailProductsItem) SetEffectiveStartDate(val OptDateTime) {
	s.EffectiveStartDate = val
}

// SetEffectiveEndDate sets the value of EffectiveEndDate.
func (s *UserAndAccountDetailProductsItem) SetEffectiveEndDate(val OptDateTime) {
	s.EffectiveEndDate = val
}

type UserAndAccountDetailTestapp struct {
	ApplicationSid           OptString `json:"application_sid"`
	Name                     OptString `json:"name"`
	ServiceProviderSid       OptString `json:"service_provider_sid"`
	AccountSid               OptString `json:"account_sid"`
	CallHookSid              OptString `json:"call_hook_sid"`
	CallStatusHookSid        OptString `json:"call_status_hook_sid"`
	MessagingHookSid         OptString `json:"messaging_hook_sid"`
	SpeechSynthesisVendor    OptString `json:"speech_synthesis_vendor"`
	SpeechSynthesisLanguage  OptString `json:"speech_synthesis_language"`
	SpeechSynthesisVoice     OptString `json:"speech_synthesis_voice"`
	SpeechRecognizerVendor   OptString `json:"speech_recognizer_vendor"`
	SpeechRecognizerLanguage OptString `json:"speech_recognizer_language"`
}

// GetApplicationSid returns the value of ApplicationSid.
func (s *UserAndAccountDetailTestapp) GetApplicationSid() OptString {
	return s.ApplicationSid
}

// GetName returns the value of Name.
func (s *UserAndAccountDetailTestapp) GetName() OptString {
	return s.Name
}

// GetServiceProviderSid returns the value of ServiceProviderSid.
func (s *UserAndAccountDetailTestapp) GetServiceProviderSid() OptString {
	return s.ServiceProviderSid
}

// GetAccountSid returns the value of AccountSid.
func (s *UserAndAccountDetailTestapp) GetAccountSid() OptString {
	return s.AccountSid
}

// GetCallHookSid returns the value of CallHookSid.
func (s *UserAndAccountDetailTestapp) GetCallHookSid() OptString {
	return s.CallHookSid
}

// GetCallStatusHookSid returns the value of CallStatusHookSid.
func (s *UserAndAccountDetailTestapp) GetCallStatusHookSid() OptString {
	return s.CallStatusHookSid
}

// GetMessagingHookSid returns the value of MessagingHookSid.
func (s *UserAndAccountDetailTestapp) GetMessagingHookSid() OptString {
	return s.MessagingHookSid
}

// GetSpeechSynthesisVendor returns the value of SpeechSynthesisVendor.
func (s *UserAndAccountDetailTestapp) GetSpeechSynthesisVendor() OptString {
	return s.SpeechSynthesisVendor
}

// GetSpeechSynthesisLanguage returns the value of SpeechSynthesisLanguage.
func (s *UserAndAccountDetailTestapp) GetSpeechSynthesisLanguage() OptString {
	return s.SpeechSynthesisLanguage
}

// GetSpeechSynthesisVoice returns the value of SpeechSynthesisVoice.
func (s *UserAndAccountDetailTestapp) GetSpeechSynthesisVoice() OptString {
	return s.SpeechSynthesisVoice
}

// GetSpeechRecognizerVendor returns the value of SpeechRecognizerVendor.
func (s *UserAndAccountDetailTestapp) GetSpeechRecognizerVendor() OptString {
	return s.SpeechRecognizerVendor
}

// GetSpeechRecognizerLanguage returns the value of SpeechRecognizerLanguage.
func (s *UserAndAccountDetailTestapp) GetSpeechRecognizerLanguage() OptString {
	return s.SpeechRecognizerLanguage
}

// SetApplicationSid sets the value of ApplicationSid.
func (s *UserAndAccountDetailTestapp) SetApplicationSid(val OptString) {
	s.ApplicationSid = val
}

// SetName sets the value of Name.
func (s *UserAndAccountDetailTestapp) SetName(val OptString) {
	s.Name = val
}

// SetServiceProviderSid sets the value of ServiceProviderSid.
func (s *UserAndAccountDetailTestapp) SetServiceProviderSid(val OptString) {
	s.ServiceProviderSid = val
}

// SetAccountSid sets the value of AccountSid.
func (s *UserAndAccountDetailTestapp) SetAccountSid(val OptString) {
	s.AccountSid = val
}

// SetCallHookSid sets the value of CallHookSid.
func (s *UserAndAccountDetailTestapp) SetCallHookSid(val OptString) {
	s.CallHookSid = val
}

// SetCallStatusHookSid sets the value of CallStatusHookSid.
func (s *UserAndAccountDetailTestapp) SetCallStatusHookSid(val OptString) {
	s.CallStatusHookSid = val
}

// SetMessagingHookSid sets the value of MessagingHookSid.
func (s *UserAndAccountDetailTestapp) SetMessagingHookSid(val OptString) {
	s.MessagingHookSid = val
}

// SetSpeechSynthesisVendor sets the value of SpeechSynthesisVendor.
func (s *UserAndAccountDetailTestapp) SetSpeechSynthesisVendor(val OptString) {
	s.SpeechSynthesisVendor = val
}

// SetSpeechSynthesisLanguage sets the value of SpeechSynthesisLanguage.
func (s *UserAndAccountDetailTestapp) SetSpeechSynthesisLanguage(val OptString) {
	s.SpeechSynthesisLanguage = val
}

// SetSpeechSynthesisVoice sets the value of SpeechSynthesisVoice.
func (s *UserAndAccountDetailTestapp) SetSpeechSynthesisVoice(val OptString) {
	s.SpeechSynthesisVoice = val
}

// SetSpeechRecognizerVendor sets the value of SpeechRecognizerVendor.
func (s *UserAndAccountDetailTestapp) SetSpeechRecognizerVendor(val OptString) {
	s.SpeechRecognizerVendor = val
}

// SetSpeechRecognizerLanguage sets the value of SpeechRecognizerLanguage.
func (s *UserAndAccountDetailTestapp) SetSpeechRecognizerLanguage(val OptString) {
	s.SpeechRecognizerLanguage = val
}

type UserAndAccountDetailUser struct {
	UserSid            OptString `json:"user_sid"`
	Name               OptString `json:"name"`
	Email              OptString `json:"email"`
	Phone              OptString `json:"phone"`
	ServiceProviderSid OptString `json:"service_provider_sid"`
	ForceChange        OptBool   `json:"force_change"`
	Provider           OptString `json:"provider"`
	ProviderUserid     OptString `json:"provider_userid"`
	Scope              OptString `json:"scope"`
	EmailValidated     OptBool   `json:"email_validated"`
	PhoneValidated     OptString `json:"phone_validated"`
}

// GetUserSid returns the value of UserSid.
func (s *UserAndAccountDetailUser) GetUserSid() OptString {
	return s.UserSid
}

// GetName returns the value of Name.
func (s *UserAndAccountDetailUser) GetName() OptString {
	return s.Name
}

// GetEmail returns the value of Email.
func (s *UserAndAccountDetailUser) GetEmail() OptString {
	return s.Email
}

// GetPhone returns the value of Phone.
func (s *UserAndAccountDetailUser) GetPhone() OptString {
	return s.Phone
}

// GetServiceProviderSid returns the value of ServiceProviderSid.
func (s *UserAndAccountDetailUser) GetServiceProviderSid() OptString {
	return s.ServiceProviderSid
}

// GetForceChange returns the value of ForceChange.
func (s *UserAndAccountDetailUser) GetForceChange() OptBool {
	return s.ForceChange
}

// GetProvider returns the value of Provider.
func (s *UserAndAccountDetailUser) GetProvider() OptString {
	return s.Provider
}

// GetProviderUserid returns the value of ProviderUserid.
func (s *UserAndAccountDetailUser) GetProviderUserid() OptString {
	return s.ProviderUserid
}

// GetScope returns the value of Scope.
func (s *UserAndAccountDetailUser) GetScope() OptString {
	return s.Scope
}

// GetEmailValidated returns the value of EmailValidated.
func (s *UserAndAccountDetailUser) GetEmailValidated() OptBool {
	return s.EmailValidated
}

// GetPhoneValidated returns the value of PhoneValidated.
func (s *UserAndAccountDetailUser) GetPhoneValidated() OptString {
	return s.PhoneValidated
}

// SetUserSid sets the value of UserSid.
func (s *UserAndAccountDetailUser) SetUserSid(val OptString) {
	s.UserSid = val
}

// SetName sets the value of Name.
func (s *UserAndAccountDetailUser) SetName(val OptString) {
	s.Name = val
}

// SetEmail sets the value of Email.
func (s *UserAndAccountDetailUser) SetEmail(val OptString) {
	s.Email = val
}

// SetPhone sets the value of Phone.
func (s *UserAndAccountDetailUser) SetPhone(val OptString) {
	s.Phone = val
}

// SetServiceProviderSid sets the value of ServiceProviderSid.
func (s *UserAndAccountDetailUser) SetServiceProviderSid(val OptString) {
	s.ServiceProviderSid = val
}

// SetForceChange sets the value of ForceChange.
func (s *UserAndAccountDetailUser) SetForceChange(val OptBool) {
	s.ForceChange = val
}

// SetProvider sets the value of Provider.
func (s *UserAndAccountDetailUser) SetProvider(val OptString) {
	s.Provider = val
}

// SetProviderUserid sets the value of ProviderUserid.
func (s *UserAndAccountDetailUser) SetProviderUserid(val OptString) {
	s.ProviderUserid = val
}

// SetScope sets the value of Scope.
func (s *UserAndAccountDetailUser) SetScope(val OptString) {
	s.Scope = val
}

// SetEmailValidated sets the value of EmailValidated.
func (s *UserAndAccountDetailUser) SetEmailValidated(val OptBool) {
	s.EmailValidated = val
}

// SetPhoneValidated sets the value of PhoneValidated.
func (s *UserAndAccountDetailUser) SetPhoneValidated(val OptString) {
	s.PhoneValidated = val
}

// Ref: #/components/schemas/UserList
type UserList struct {
	Name        OptString `json:"name"`
	Email       OptString `json:"email"`
	IsActive    OptBool   `json:"is_active"`
	ForceChange OptBool   `json:"force_change"`
	Scope       OptString `json:"scope"`
	Permissions []string  `json:"permissions"`
}

// GetName returns the value of Name.
func (s *UserList) GetName() OptString {
	return s.Name
}

// GetEmail returns the value of Email.
func (s *UserList) GetEmail() OptString {
	return s.Email
}

// GetIsActive returns the value of IsActive.
func (s *UserList) GetIsActive() OptBool {
	return s.IsActive
}

// GetForceChange returns the value of ForceChange.
func (s *UserList) GetForceChange() OptBool {
	return s.ForceChange
}

// GetScope returns the value of Scope.
func (s *UserList) GetScope() OptString {
	return s.Scope
}

// GetPermissions returns the value of Permissions.
func (s *UserList) GetPermissions() []string {
	return s.Permissions
}

// SetName sets the value of Name.
func (s *UserList) SetName(val OptString) {
	s.Name = val
}

// SetEmail sets the value of Email.
func (s *UserList) SetEmail(val OptString) {
	s.Email = val
}

// SetIsActive sets the value of IsActive.
func (s *UserList) SetIsActive(val OptBool) {
	s.IsActive = val
}

// SetForceChange sets the value of ForceChange.
func (s *UserList) SetForceChange(val OptBool) {
	s.ForceChange = val
}

// SetScope sets the value of Scope.
func (s *UserList) SetScope(val OptString) {
	s.Scope = val
}

// SetPermissions sets the value of Permissions.
func (s *UserList) SetPermissions(val []string) {
	s.Permissions = val
}

// Ref: #/components/schemas/UserProfile
type UserProfile struct {
	UserSid    string    `json:"user_sid"`
	AccountSid OptString `json:"account_sid"`
	// Indicates whether account is active.
	IsActive bool `json:"is_active"`
	// Full user name.
	Name string `json:"name"`
	// Email associated with user.
	Email string `json:"email"`
	// Phone associated with user.
	Phone OptString `json:"phone"`
	// Authentication provider.
	Provider UserProfileProvider `json:"provider"`
	// Scope of user permissions.
	Scope UserProfileScope `json:"scope"`
	// True if account was newly created.
	Pristine bool `json:"pristine"`
	// Indicates whether user has validated their email address.
	EmailValidated OptBool `json:"email_validated"`
	// Indicates whether user has validated their mobile phone.
	PhoneValidated OptBool `json:"phone_validated"`
	// Bitmask indicating which tutorials have been completed.
	TutorialCompletion OptFloat64 `json:"tutorial_completion"`
	// Json web token to be used as bearer token in API requests.
	Jwt string `json:"jwt"`
}

// GetUserSid returns the value of UserSid.
func (s *UserProfile) GetUserSid() string {
	return s.UserSid
}

// GetAccountSid returns the value of AccountSid.
func (s *UserProfile) GetAccountSid() OptString {
	return s.AccountSid
}

// GetIsActive returns the value of IsActive.
func (s *UserProfile) GetIsActive() bool {
	return s.IsActive
}

// GetName returns the value of Name.
func (s *UserProfile) GetName() string {
	return s.Name
}

// GetEmail returns the value of Email.
func (s *UserProfile) GetEmail() string {
	return s.Email
}

// GetPhone returns the value of Phone.
func (s *UserProfile) GetPhone() OptString {
	return s.Phone
}

// GetProvider returns the value of Provider.
func (s *UserProfile) GetProvider() UserProfileProvider {
	return s.Provider
}

// GetScope returns the value of Scope.
func (s *UserProfile) GetScope() UserProfileScope {
	return s.Scope
}

// GetPristine returns the value of Pristine.
func (s *UserProfile) GetPristine() bool {
	return s.Pristine
}

// GetEmailValidated returns the value of EmailValidated.
func (s *UserProfile) GetEmailValidated() OptBool {
	return s.EmailValidated
}

// GetPhoneValidated returns the value of PhoneValidated.
func (s *UserProfile) GetPhoneValidated() OptBool {
	return s.PhoneValidated
}

// GetTutorialCompletion returns the value of TutorialCompletion.
func (s *UserProfile) GetTutorialCompletion() OptFloat64 {
	return s.TutorialCompletion
}

// GetJwt returns the value of Jwt.
func (s *UserProfile) GetJwt() string {
	return s.Jwt
}

// SetUserSid sets the value of UserSid.
func (s *UserProfile) SetUserSid(val string) {
	s.UserSid = val
}

// SetAccountSid sets the value of AccountSid.
func (s *UserProfile) SetAccountSid(val OptString) {
	s.AccountSid = val
}

// SetIsActive sets the value of IsActive.
func (s *UserProfile) SetIsActive(val bool) {
	s.IsActive = val
}

// SetName sets the value of Name.
func (s *UserProfile) SetName(val string) {
	s.Name = val
}

// SetEmail sets the value of Email.
func (s *UserProfile) SetEmail(val string) {
	s.Email = val
}

// SetPhone sets the value of Phone.
func (s *UserProfile) SetPhone(val OptString) {
	s.Phone = val
}

// SetProvider sets the value of Provider.
func (s *UserProfile) SetProvider(val UserProfileProvider) {
	s.Provider = val
}

// SetScope sets the value of Scope.
func (s *UserProfile) SetScope(val UserProfileScope) {
	s.Scope = val
}

// SetPristine sets the value of Pristine.
func (s *UserProfile) SetPristine(val bool) {
	s.Pristine = val
}

// SetEmailValidated sets the value of EmailValidated.
func (s *UserProfile) SetEmailValidated(val OptBool) {
	s.EmailValidated = val
}

// SetPhoneValidated sets the value of PhoneValidated.
func (s *UserProfile) SetPhoneValidated(val OptBool) {
	s.PhoneValidated = val
}

// SetTutorialCompletion sets the value of TutorialCompletion.
func (s *UserProfile) SetTutorialCompletion(val OptFloat64) {
	s.TutorialCompletion = val
}

// SetJwt sets the value of Jwt.
func (s *UserProfile) SetJwt(val string) {
	s.Jwt = val
}

func (*UserProfile) getUserRes()      {}
func (*UserProfile) loginUserRes()    {}
func (*UserProfile) registerUserRes() {}

// Authentication provider.
type UserProfileProvider string

const (
	UserProfileProviderGithub UserProfileProvider = "github"
	UserProfileProviderGoogle UserProfileProvider = "google"
	UserProfileProviderLocal  UserProfileProvider = "local"
)

// AllValues returns all UserProfileProvider values.
func (UserProfileProvider) AllValues() []UserProfileProvider {
	return []UserProfileProvider{
		UserProfileProviderGithub,
		UserProfileProviderGoogle,
		UserProfileProviderLocal,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UserProfileProvider) MarshalText() ([]byte, error) {
	switch s {
	case UserProfileProviderGithub:
		return []byte(s), nil
	case UserProfileProviderGoogle:
		return []byte(s), nil
	case UserProfileProviderLocal:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UserProfileProvider) UnmarshalText(data []byte) error {
	switch UserProfileProvider(data) {
	case UserProfileProviderGithub:
		*s = UserProfileProviderGithub
		return nil
	case UserProfileProviderGoogle:
		*s = UserProfileProviderGoogle
		return nil
	case UserProfileProviderLocal:
		*s = UserProfileProviderLocal
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Scope of user permissions.
type UserProfileScope string

const (
	UserProfileScopeReadOnly  UserProfileScope = "read-only"
	UserProfileScopeReadWrite UserProfileScope = "read-write"
)

// AllValues returns all UserProfileScope values.
func (UserProfileScope) AllValues() []UserProfileScope {
	return []UserProfileScope{
		UserProfileScopeReadOnly,
		UserProfileScopeReadWrite,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UserProfileScope) MarshalText() ([]byte, error) {
	switch s {
	case UserProfileScopeReadOnly:
		return []byte(s), nil
	case UserProfileScopeReadWrite:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UserProfileScope) UnmarshalText(data []byte) error {
	switch UserProfileScope(data) {
	case UserProfileScopeReadOnly:
		*s = UserProfileScopeReadOnly
		return nil
	case UserProfileScopeReadWrite:
		*s = UserProfileScopeReadWrite
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ValidateActivationCodeInternalServerError GeneralError

func (*ValidateActivationCodeInternalServerError) validateActivationCodeRes() {}

// ValidateActivationCodeNoContent is response for ValidateActivationCode operation.
type ValidateActivationCodeNoContent struct{}

func (*ValidateActivationCodeNoContent) validateActivationCodeRes() {}

type ValidateActivationCodeNotFound GeneralError

func (*ValidateActivationCodeNotFound) validateActivationCodeRes() {}

type ValidateActivationCodeReq struct {
	// Identifies user to send to.
	UserSid OptUUID                          `json:"user_sid"`
	Type    OptValidateActivationCodeReqType `json:"type"`
}

// GetUserSid returns the value of UserSid.
func (s *ValidateActivationCodeReq) GetUserSid() OptUUID {
	return s.UserSid
}

// GetType returns the value of Type.
func (s *ValidateActivationCodeReq) GetType() OptValidateActivationCodeReqType {
	return s.Type
}

// SetUserSid sets the value of UserSid.
func (s *ValidateActivationCodeReq) SetUserSid(val OptUUID) {
	s.UserSid = val
}

// SetType sets the value of Type.
func (s *ValidateActivationCodeReq) SetType(val OptValidateActivationCodeReqType) {
	s.Type = val
}

type ValidateActivationCodeReqType string

const (
	ValidateActivationCodeReqTypeEmail ValidateActivationCodeReqType = "email"
	ValidateActivationCodeReqTypePhone ValidateActivationCodeReqType = "phone"
)

// AllValues returns all ValidateActivationCodeReqType values.
func (ValidateActivationCodeReqType) AllValues() []ValidateActivationCodeReqType {
	return []ValidateActivationCodeReqType{
		ValidateActivationCodeReqTypeEmail,
		ValidateActivationCodeReqTypePhone,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ValidateActivationCodeReqType) MarshalText() ([]byte, error) {
	switch s {
	case ValidateActivationCodeReqTypeEmail:
		return []byte(s), nil
	case ValidateActivationCodeReqTypePhone:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ValidateActivationCodeReqType) UnmarshalText(data []byte) error {
	switch ValidateActivationCodeReqType(data) {
	case ValidateActivationCodeReqTypeEmail:
		*s = ValidateActivationCodeReqTypeEmail
		return nil
	case ValidateActivationCodeReqTypePhone:
		*s = ValidateActivationCodeReqTypePhone
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// ValidateInviteCodeNoContent is response for ValidateInviteCode operation.
type ValidateInviteCodeNoContent struct{}

func (*ValidateInviteCodeNoContent) validateInviteCodeRes() {}

// ValidateInviteCodeNotFound is response for ValidateInviteCode operation.
type ValidateInviteCodeNotFound struct{}

func (*ValidateInviteCodeNotFound) validateInviteCodeRes() {}

type ValidateInviteCodeReq struct {
	Code string `json:"code"`
}

// GetCode returns the value of Code.
func (s *ValidateInviteCodeReq) GetCode() string {
	return s.Code
}

// SetCode sets the value of Code.
func (s *ValidateInviteCodeReq) SetCode(val string) {
	s.Code = val
}

// Ref: #/components/schemas/VoipCarrier
type VoipCarrier struct {
	VoipCarrierSid          uuid.UUID  `json:"voip_carrier_sid"`
	Name                    string     `json:"name"`
	Description             OptString  `json:"description"`
	AccountSid              OptUUID    `json:"account_sid"`
	ApplicationSid          OptUUID    `json:"application_sid"`
	E164LeadingPlus         OptBool    `json:"e164_leading_plus"`
	RequiresRegister        OptBool    `json:"requires_register"`
	RegisterUsername        OptString  `json:"register_username"`
	RegisterSipRealm        OptString  `json:"register_sip_realm"`
	RegisterPassword        OptString  `json:"register_password"`
	TechPrefix              OptString  `json:"tech_prefix"`
	InboundAuthUsername     OptString  `json:"inbound_auth_username"`
	InboundAuthPassword     OptString  `json:"inbound_auth_password"`
	Diversion               OptString  `json:"diversion"`
	IsActive                OptBool    `json:"is_active"`
	SmppSystemID            OptString  `json:"smpp_system_id"`
	SmppPassword            OptString  `json:"smpp_password"`
	SmppInboundSystemID     OptString  `json:"smpp_inbound_system_id"`
	SmppInboundPassword     OptString  `json:"smpp_inbound_password"`
	SmppEnquireLinkInterval OptFloat64 `json:"smpp_enquire_link_interval"`
}

// GetVoipCarrierSid returns the value of VoipCarrierSid.
func (s *VoipCarrier) GetVoipCarrierSid() uuid.UUID {
	return s.VoipCarrierSid
}

// GetName returns the value of Name.
func (s *VoipCarrier) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *VoipCarrier) GetDescription() OptString {
	return s.Description
}

// GetAccountSid returns the value of AccountSid.
func (s *VoipCarrier) GetAccountSid() OptUUID {
	return s.AccountSid
}

// GetApplicationSid returns the value of ApplicationSid.
func (s *VoipCarrier) GetApplicationSid() OptUUID {
	return s.ApplicationSid
}

// GetE164LeadingPlus returns the value of E164LeadingPlus.
func (s *VoipCarrier) GetE164LeadingPlus() OptBool {
	return s.E164LeadingPlus
}

// GetRequiresRegister returns the value of RequiresRegister.
func (s *VoipCarrier) GetRequiresRegister() OptBool {
	return s.RequiresRegister
}

// GetRegisterUsername returns the value of RegisterUsername.
func (s *VoipCarrier) GetRegisterUsername() OptString {
	return s.RegisterUsername
}

// GetRegisterSipRealm returns the value of RegisterSipRealm.
func (s *VoipCarrier) GetRegisterSipRealm() OptString {
	return s.RegisterSipRealm
}

// GetRegisterPassword returns the value of RegisterPassword.
func (s *VoipCarrier) GetRegisterPassword() OptString {
	return s.RegisterPassword
}

// GetTechPrefix returns the value of TechPrefix.
func (s *VoipCarrier) GetTechPrefix() OptString {
	return s.TechPrefix
}

// GetInboundAuthUsername returns the value of InboundAuthUsername.
func (s *VoipCarrier) GetInboundAuthUsername() OptString {
	return s.InboundAuthUsername
}

// GetInboundAuthPassword returns the value of InboundAuthPassword.
func (s *VoipCarrier) GetInboundAuthPassword() OptString {
	return s.InboundAuthPassword
}

// GetDiversion returns the value of Diversion.
func (s *VoipCarrier) GetDiversion() OptString {
	return s.Diversion
}

// GetIsActive returns the value of IsActive.
func (s *VoipCarrier) GetIsActive() OptBool {
	return s.IsActive
}

// GetSmppSystemID returns the value of SmppSystemID.
func (s *VoipCarrier) GetSmppSystemID() OptString {
	return s.SmppSystemID
}

// GetSmppPassword returns the value of SmppPassword.
func (s *VoipCarrier) GetSmppPassword() OptString {
	return s.SmppPassword
}

// GetSmppInboundSystemID returns the value of SmppInboundSystemID.
func (s *VoipCarrier) GetSmppInboundSystemID() OptString {
	return s.SmppInboundSystemID
}

// GetSmppInboundPassword returns the value of SmppInboundPassword.
func (s *VoipCarrier) GetSmppInboundPassword() OptString {
	return s.SmppInboundPassword
}

// GetSmppEnquireLinkInterval returns the value of SmppEnquireLinkInterval.
func (s *VoipCarrier) GetSmppEnquireLinkInterval() OptFloat64 {
	return s.SmppEnquireLinkInterval
}

// SetVoipCarrierSid sets the value of VoipCarrierSid.
func (s *VoipCarrier) SetVoipCarrierSid(val uuid.UUID) {
	s.VoipCarrierSid = val
}

// SetName sets the value of Name.
func (s *VoipCarrier) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *VoipCarrier) SetDescription(val OptString) {
	s.Description = val
}

// SetAccountSid sets the value of AccountSid.
func (s *VoipCarrier) SetAccountSid(val OptUUID) {
	s.AccountSid = val
}

// SetApplicationSid sets the value of ApplicationSid.
func (s *VoipCarrier) SetApplicationSid(val OptUUID) {
	s.ApplicationSid = val
}

// SetE164LeadingPlus sets the value of E164LeadingPlus.
func (s *VoipCarrier) SetE164LeadingPlus(val OptBool) {
	s.E164LeadingPlus = val
}

// SetRequiresRegister sets the value of RequiresRegister.
func (s *VoipCarrier) SetRequiresRegister(val OptBool) {
	s.RequiresRegister = val
}

// SetRegisterUsername sets the value of RegisterUsername.
func (s *VoipCarrier) SetRegisterUsername(val OptString) {
	s.RegisterUsername = val
}

// SetRegisterSipRealm sets the value of RegisterSipRealm.
func (s *VoipCarrier) SetRegisterSipRealm(val OptString) {
	s.RegisterSipRealm = val
}

// SetRegisterPassword sets the value of RegisterPassword.
func (s *VoipCarrier) SetRegisterPassword(val OptString) {
	s.RegisterPassword = val
}

// SetTechPrefix sets the value of TechPrefix.
func (s *VoipCarrier) SetTechPrefix(val OptString) {
	s.TechPrefix = val
}

// SetInboundAuthUsername sets the value of InboundAuthUsername.
func (s *VoipCarrier) SetInboundAuthUsername(val OptString) {
	s.InboundAuthUsername = val
}

// SetInboundAuthPassword sets the value of InboundAuthPassword.
func (s *VoipCarrier) SetInboundAuthPassword(val OptString) {
	s.InboundAuthPassword = val
}

// SetDiversion sets the value of Diversion.
func (s *VoipCarrier) SetDiversion(val OptString) {
	s.Diversion = val
}

// SetIsActive sets the value of IsActive.
func (s *VoipCarrier) SetIsActive(val OptBool) {
	s.IsActive = val
}

// SetSmppSystemID sets the value of SmppSystemID.
func (s *VoipCarrier) SetSmppSystemID(val OptString) {
	s.SmppSystemID = val
}

// SetSmppPassword sets the value of SmppPassword.
func (s *VoipCarrier) SetSmppPassword(val OptString) {
	s.SmppPassword = val
}

// SetSmppInboundSystemID sets the value of SmppInboundSystemID.
func (s *VoipCarrier) SetSmppInboundSystemID(val OptString) {
	s.SmppInboundSystemID = val
}

// SetSmppInboundPassword sets the value of SmppInboundPassword.
func (s *VoipCarrier) SetSmppInboundPassword(val OptString) {
	s.SmppInboundPassword = val
}

// SetSmppEnquireLinkInterval sets the value of SmppEnquireLinkInterval.
func (s *VoipCarrier) SetSmppEnquireLinkInterval(val OptFloat64) {
	s.SmppEnquireLinkInterval = val
}

func (*VoipCarrier) getVoipCarrierRes()    {}
func (*VoipCarrier) updateVoipCarrierRes() {}

// Ref: #/components/schemas/Webhook
type Webhook struct {
	WebhookSid OptUUID       `json:"webhook_sid"`
	URL        string        `json:"url"`
	Method     WebhookMethod `json:"method"`
	Username   NilString     `json:"username"`
	Password   NilString     `json:"password"`
}

// GetWebhookSid returns the value of WebhookSid.
func (s *Webhook) GetWebhookSid() OptUUID {
	return s.WebhookSid
}

// GetURL returns the value of URL.
func (s *Webhook) GetURL() string {
	return s.URL
}

// GetMethod returns the value of Method.
func (s *Webhook) GetMethod() WebhookMethod {
	return s.Method
}

// GetUsername returns the value of Username.
func (s *Webhook) GetUsername() NilString {
	return s.Username
}

// GetPassword returns the value of Password.
func (s *Webhook) GetPassword() NilString {
	return s.Password
}

// SetWebhookSid sets the value of WebhookSid.
func (s *Webhook) SetWebhookSid(val OptUUID) {
	s.WebhookSid = val
}

// SetURL sets the value of URL.
func (s *Webhook) SetURL(val string) {
	s.URL = val
}

// SetMethod sets the value of Method.
func (s *Webhook) SetMethod(val WebhookMethod) {
	s.Method = val
}

// SetUsername sets the value of Username.
func (s *Webhook) SetUsername(val NilString) {
	s.Username = val
}

// SetPassword sets the value of Password.
func (s *Webhook) SetPassword(val NilString) {
	s.Password = val
}

func (*Webhook) getWebhookRes() {}

type WebhookMethod string

const (
	WebhookMethodGET  WebhookMethod = "GET"
	WebhookMethodPOST WebhookMethod = "POST"
)

// AllValues returns all WebhookMethod values.
func (WebhookMethod) AllValues() []WebhookMethod {
	return []WebhookMethod{
		WebhookMethodGET,
		WebhookMethodPOST,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WebhookMethod) MarshalText() ([]byte, error) {
	switch s {
	case WebhookMethodGET:
		return []byte(s), nil
	case WebhookMethodPOST:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WebhookMethod) UnmarshalText(data []byte) error {
	switch WebhookMethod(data) {
	case WebhookMethodGET:
		*s = WebhookMethodGET
		return nil
	case WebhookMethodPOST:
		*s = WebhookMethodPOST
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}
